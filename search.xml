<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Matplotlib基础</title>
    <url>/2020/02/10/Matplotlib%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="Matplotlib基本操作："><a href="#Matplotlib基本操作：" class="headerlink" title="Matplotlib基本操作："></a>Matplotlib基本操作：</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数的用途</th>
</tr>
</thead>
<tbody><tr>
<td>import matplotlib.pyplot as plt</td>
<td>导入包</td>
</tr>
<tr>
<td>from pylab import mpl</td>
<td>导入中文字体包</td>
</tr>
<tr>
<td>plt.figure(figsize=(10,10),dpi=100)</td>
<td>创建画布，画布的范围和画布的大小</td>
</tr>
<tr>
<td>plt.plot()</td>
<td>添加图形的数据</td>
</tr>
<tr>
<td>plt.plot(x, y_beijing, color=’r’, linestyle=’–’, label=”北京”)</td>
<td>可以填加多个数据，“r”为红色，“–”虚线表示，右上角显示</td>
</tr>
<tr>
<td>plt.xticks(x[::5],x_tick[::5])</td>
<td>添加x轴的名字</td>
</tr>
<tr>
<td>plt.yticks(y_ticks[::5])</td>
<td>添加y轴的名字</td>
</tr>
<tr>
<td>plt.grid(True,linestyle=”–”,alpha=20)</td>
<td>添加网格线</td>
</tr>
<tr>
<td>plt.xlabel(“时间”)</td>
<td>添加描述信息</td>
</tr>
<tr>
<td>plt.ylabel(“温度”)</td>
<td>添加描述信息</td>
</tr>
<tr>
<td>plt.title(“”)</td>
<td>添加标题描述信息</td>
</tr>
<tr>
<td>plt.savefig(“./test.png”)</td>
<td>图像的保存</td>
</tr>
<tr>
<td>plt.legend(loc=0)</td>
<td>添加图例，右上角会显示：北京或者上海</td>
</tr>
<tr>
<td>plt.show()</td>
<td>图像的显示</td>
</tr>
<tr>
<td>mpl.rcParams[“font.sans-serif”] = [“SimHei”]</td>
<td>设置显示中文字体</td>
</tr>
<tr>
<td>mpl.rcParams[“axes.unicode_minus”] = False</td>
<td>设置正常显示符号</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>plt.imshow(x,<strong>cmap</strong>)</td>
<td>图片显示:                                                                                                  <strong>x</strong>：图片                                                                                               <strong>cmap</strong>：默认：“绿色”</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>fig,axes=plt.<strong>subplots</strong>(nrows=1,ncols=2,figsize=(10,8),dpi=100)</td>
<td>其中参数1和2分别代表子图的行数和列数,</td>
</tr>
<tr>
<td>.set_title</td>
<td>设置的图像的标题</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>plt.<strong>subplot</strong>（nrows, ncols, index, **kwargs）</td>
<td><strong>在循环中使用创建多少行多少列图</strong>                                                              nrows：生成多少行图，                                                          ncols：生成多少个列图，                                                         index：在第几个图生成对应的图</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>**plt.函数名()<strong>相当于面向过程的画图方法，</strong>axes.set_方法名()**相当于面向对象的画图方法。</p>
<h2 id="创建多个图像"><a href="#创建多个图像" class="headerlink" title="创建多个图像"></a>创建多个图像</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 0.准备数据</span>
x <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>
y_shanghai <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>
y_beijing <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 1.创建画布</span>
<span class="token comment" spellcheck="true"># plt.figure(figsize=(20, 8), dpi=100)</span>
fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#plt.subplots：拆分页面，多图展示</span>


<span class="token comment" spellcheck="true"># 2.绘制图像</span>
<span class="token comment" spellcheck="true"># plt.plot(x, y_shanghai, label="上海")</span>
<span class="token comment" spellcheck="true"># plt.plot(x, y_beijing, color="r", linestyle="--", label="北京")</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_shanghai<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"上海"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y_beijing<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"北京"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 2.1 添加x,y轴刻度</span>
<span class="token comment" spellcheck="true"># 构造x,y轴刻度标签</span>
x_ticks_label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"11点&amp;#123;&amp;#125;分"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span>
y_ticks <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 刻度显示</span>
<span class="token comment" spellcheck="true"># plt.xticks(x[::5], x_ticks_label[::5])</span>
<span class="token comment" spellcheck="true"># plt.yticks(y_ticks[::5])</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span>y_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>x_ticks_label<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 2.2 添加网格显示</span>
<span class="token comment" spellcheck="true"># plt.grid(True, linestyle="--", alpha=0.5)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"--"</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 2.3 添加描述信息</span>
<span class="token comment" spellcheck="true"># plt.xlabel("时间")</span>
<span class="token comment" spellcheck="true"># plt.ylabel("温度")</span>
<span class="token comment" spellcheck="true"># plt.title("中午11点--12点某城市温度变化图", fontsize=20)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"时间"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">"温度"</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"中午11点--12点某城市温度变化图"</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># # 2.4 图像保存</span>
plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># # 2.5 添加图例</span>
<span class="token comment" spellcheck="true"># plt.legend(loc=0)</span>
axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 3.图像显示</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="创建其他图像的api"><a href="#创建其他图像的api" class="headerlink" title="创建其他图像的api"></a>创建其他图像的api</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数的定义</th>
</tr>
</thead>
<tbody><tr>
<td>plt.plot(x, y)</td>
<td>创建折线图</td>
</tr>
<tr>
<td>plt.scatter(x, y)</td>
<td><strong>散点图</strong></td>
</tr>
<tr>
<td>plt.bar(x, width, align=’center’, **kwargs)</td>
<td><strong>柱状图</strong>：x : 需要传递的数据，width : 柱状图的宽度，align : 每个柱状图的位置对齐方式，**kwargs : color=:选择柱状图的颜色</td>
</tr>
<tr>
<td>matplotlib.pyplot.hist(x, bins=None)</td>
<td>直方图 ：    x : 需要传递的数据 ，bins : 组距</td>
</tr>
<tr>
<td>api：plt.pie(x, labels=,autopct=,colors)</td>
<td>饼图：  x:数量，自动算百分比， labels:每部分名称可以写成名字或者数据 的变量，autopct:占比显示指定%1.2f%% ，colors:每部分颜色</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>形成柱状图</strong></td>
<td></td>
</tr>
<tr>
<td>plt.text(x, y, s, fontdict=None, withdash=False, **kwargs）</td>
<td><strong>x</strong>，<strong>y</strong>：显示内容的坐标位置                                                                                                              <strong>s</strong> ：显示内容                                                                                                                                            <strong>fontdict</strong>：一个定义s格式的dict                                                                                                                   <strong>fontsize</strong>：字体大小                                                                                                                                <strong>color</strong>：str or tuple, 设置字体颜色 ,单个字符候选项{‘b’, ‘g’, ‘r’, ‘c’, ‘m’, ‘y’, ‘k’, ‘w’}，也可以’black’,’red’等，tuple时用[0,1]之间的浮点型数据，RGB或者RGBA, 如: (0.1, 0.2, 0.5)、(0.1, 0.2, 0.5, 0.3)等                                                    <strong>backgroundcolor</strong>：字体背景颜色                                                                         <strong>horizontalalignment</strong>(ha)：设置垂直对齐方式，可选参数：left,right,center                                                                                         <strong>verticalalignment</strong>(va)：设置水平对齐方式 ，可选参数 ： ‘center’ , ‘top’ , ‘bottom’ ,‘baseline’                                                                                                             <strong>rotation</strong>(旋转角度)：可选参数为:vertical,horizontal 也可以为数字                            <strong>alpha</strong>：透明度，参数值0至1之间</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Matplotlib</category>
      </categories>
      <tags>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy基础</title>
    <url>/2020/02/10/Numpy%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="numpy数组"><a href="#numpy数组" class="headerlink" title="numpy数组"></a>numpy数组</h2><h4 id="numpy夹角运算"><a href="#numpy夹角运算" class="headerlink" title="numpy夹角运算"></a>numpy夹角运算</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>umpy.arctan2(<em>x1</em>, <em>x2</em>)</td>
<td>对应的可以算数夹角</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>numpy.clip( <em>a</em> , <em>a_min</em> , <em>a_max</em> , <em>out=None</em> , **<em>kwargs</em> )</td>
<td>给定一个区间，区间之外的值被 裁剪 为 <br/>区间边。 例如，如果间隔为 <code>[0, 1]</code>指定，小于 0 的值变为 0，而大于 0 的值<br/>比 1 变成 1。</td>
</tr>
<tr>
<td>例如</td>
<td>np.clip(a, 3, 6, out=a)                                                                                      array([3, 3, 3, 3, 4, 5, 6, 6, 6, 6])</td>
</tr>
<tr>
<td><a href="https://numpy.org/doc/stable/reference/generated/numpy.clip.html?highlight=clip#numpy.clip">https://numpy.org/doc/stable/reference/generated/numpy.clip.html?highlight=clip#numpy.clip</a></td>
<td></td>
</tr>
</tbody></table>
<h4 id="查看数组基本操作"><a href="#查看数组基本操作" class="headerlink" title="查看数组基本操作"></a>查看数组基本操作</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数定义</th>
</tr>
</thead>
<tbody><tr>
<td>np.array（【】，dtype=np.数组类型）</td>
<td>进行数据的存储的容器</td>
</tr>
<tr>
<td>存储数据容器的变量.shape</td>
<td>产看数组维度的元组，几行几列用（）写出</td>
</tr>
<tr>
<td>存储数据容器的变量.ndim</td>
<td>查看是几维的数组</td>
</tr>
<tr>
<td>存储数据容器的变量.size</td>
<td>查看数组里面有多少元素</td>
</tr>
<tr>
<td>存储数据容器的变量.itemsize</td>
<td>一个数组元素的长度（字节大小）</td>
</tr>
<tr>
<td>存储数据容器的变量.dtype</td>
<td>数组元素的类型</td>
</tr>
<tr>
<td>np.<strong>sum</strong>()</td>
<td>求和</td>
</tr>
<tr>
<td>np.<strong>polyfit</strong>（）</td>
<td>多项式拟合</td>
</tr>
</tbody></table>
<h4 id="生成创建数组的方法"><a href="#生成创建数组的方法" class="headerlink" title="生成创建数组的方法"></a>生成创建数组的方法</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数使用方法</th>
</tr>
</thead>
<tbody><tr>
<td>np.ones([])</td>
<td>创建里面都是1的二维数组，【】写上几行几列用逗号隔开</td>
</tr>
<tr>
<td>np.ones_like(存储数据容器的变量)</td>
<td>创建里面都是1的二维数组</td>
</tr>
<tr>
<td>np.zeros([])</td>
<td>创建里面都是0的二维数组，【】写上几行几列用逗号隔开</td>
</tr>
<tr>
<td>np.zeros_like(存储数据容器的变量)</td>
<td>创建里面都是0的二维数组</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>np.array(存储数据容器的变量)</td>
<td>对存储数据容器的变量的深拷贝</td>
</tr>
<tr>
<td>np.asarray(存储数据容器的变量)</td>
<td>对存储数据容器的变量的浅拷贝</td>
</tr>
<tr>
<td><strong>创建等比等差数列的数组</strong></td>
<td></td>
</tr>
<tr>
<td>np.linspace(start,stop,num,endpoint)</td>
<td>创建等差数组 — 指定数量 参数:                                                     start:序列的起始值                                                                                    stop:序列的终止值                                                                                               num:要生成的等间隔样例数量，默认为50                                             endpoint:序列中是否包含stop值，默认为ture</td>
</tr>
<tr>
<td>np.arange(start,stop,step,dtype)</td>
<td>创建等差数组 — 指定步长                                                                                   参数start:为开头，                                                                                                                   stop：为结尾                                                                                                       step:步长,默认值为1</td>
</tr>
<tr>
<td>np.logspace(start,stop,num)</td>
<td>创建等比数列 参数:                                                                                          start:表示用几位数开头，                                                                                stop：表示用几位数结束                                                                               num:要生成的等比数列数量的元素，默认为50</td>
</tr>
<tr>
<td><strong>正态分布</strong></td>
<td></td>
</tr>
<tr>
<td>np.random.normal（<strong>loc=0.0, scale=1.0, size=None</strong>）</td>
<td>生成正态分布的随机数，                                                                                loc：float 此概率分布的<strong>均值</strong>（对应着整个分布的中心centre）scale：float：此概率分布的<strong>标准差</strong>（对应于分布的宽度，scale越大越矮胖，scale越小，越瘦高）                                                              size：可以创建一个维度的多少数，也几行几列二维的随机数</td>
</tr>
<tr>
<td><strong>np.random.uniform(low=0.0, high=1.0, size=None)</strong></td>
<td>low: 采样下界，float类型，默认值为0；                                                              high: 采样上界，float类型，默认值为1；                                                                  size: 输出样本数目，为int或元组(tuple)类型，例如，size=(m,n,k), 则输出m<em>n</em>k个样本，缺省时输出1个值。</td>
</tr>
</tbody></table>
<h4 id="数组的索引，切片，形状改变"><a href="#数组的索引，切片，形状改变" class="headerlink" title="数组的索引，切片，形状改变"></a>数组的索引，切片，形状改变</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数定义</th>
</tr>
</thead>
<tbody><tr>
<td>存储数据容器的变量【】</td>
<td>要分清维度，想要几维的用逗号隔开，在想要的维度再用《：》提取</td>
</tr>
<tr>
<td>存储数据容器的变量.reshape([])</td>
<td>改变想要的几行几列，但是要与原来的总元素量相匹配，是用成法得到总元素相同</td>
</tr>
<tr>
<td>存储数据容器的变量.reshape(-1,1)</td>
<td>把每一个元素都形成一个维</td>
</tr>
<tr>
<td>存储数据容器的变量.resize([])</td>
<td></td>
</tr>
<tr>
<td>存储数据容器的变量.T</td>
<td>进行行与列进行互换</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>折叠成一维的数组</td>
<td></td>
</tr>
<tr>
<td>变量.<strong>flatten</strong>()</td>
<td>返回一个折叠成一维的数组。但是该函数只能适用于numpy对象，即array或者mat，普通的list列表是不行的。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="数组的修改"><a href="#数组的修改" class="headerlink" title="数组的修改"></a>数组的修改</h4><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>stock_change.astype(np.int32)</td>
<td>数组的修类型</td>
</tr>
<tr>
<td>ndarray.tostring([order])</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>np.unique(存储数据容器的变量)</td>
<td>数组的去重</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="ndarray运算（逻辑）"><a href="#ndarray运算（逻辑）" class="headerlink" title="ndarray运算（逻辑）"></a>ndarray运算（逻辑）</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数定义</th>
</tr>
</thead>
<tbody><tr>
<td>np.random.seed()</td>
<td>确定随机数生成种子，用它后每次生成的数都是一样的</td>
</tr>
<tr>
<td>np.random.randn(几行，几列)</td>
<td>创建0到1之间的随机数</td>
</tr>
<tr>
<td>np.random.randit(开头,结尾,(几行,几列))</td>
<td>随机创建数组</td>
</tr>
<tr>
<td>np.all(存储数据容器的变量[取值范围]&gt;条件判断)</td>
<td>符合条件为True，不符合为：False,判断给定轴向上的所有元素是否都为True</td>
</tr>
<tr>
<td>np.any()</td>
<td>判断给定轴向上是否有一个元素为True</td>
</tr>
<tr>
<td>np.where(存储数据容器的变量[取值范围]&gt;条件判断,1,0)</td>
<td>符合条件为1，不符合为0</td>
</tr>
<tr>
<td>np.where(np.logical_and(temp &gt; 60,temp&lt;90),1,0)</td>
<td>np.logical_and:符合条件为1，不符合为0，</td>
</tr>
<tr>
<td>np.where(np.logical_or(temp &gt; 90, temp &lt; 60), 1, 0)</td>
<td>np.logical_or：大于90或小于60的换为1，否则为0</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>统计函数</strong></td>
<td></td>
</tr>
<tr>
<td>np.max(存储数据容器的变量,axis=0或者1)</td>
<td>按照列（0）或者行（1）进行提取，</td>
</tr>
<tr>
<td>np.min(存储数据容器的变量,axis=0或者1)</td>
<td>按照列（0）或者行（1）进行提取，</td>
</tr>
<tr>
<td>np.median()</td>
<td>先排序在找中位数</td>
</tr>
<tr>
<td>np.mean()</td>
<td>均差</td>
</tr>
<tr>
<td>np.std()</td>
<td>标准差</td>
</tr>
<tr>
<td>np.var()</td>
<td>求解方差</td>
</tr>
<tr>
<td>np.argmax(axis=)</td>
<td>最大元素对应的下标</td>
</tr>
<tr>
<td>np.argmin(axis=)</td>
<td>最小元素对应的下标</td>
</tr>
<tr>
<td>axis(“off”)</td>
<td>不按行或列</td>
</tr>
<tr>
<td>np.square</td>
<td>每个元素的经行平方</td>
</tr>
<tr>
<td><strong>sqrt()</strong></td>
<td>方法返回数字x的平方根</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>np.maximum（【】，【】）</td>
<td>能选取最大的列表（向量）</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="广播机制：一个数组与另一个数组是否能不能运算"><a href="#广播机制：一个数组与另一个数组是否能不能运算" class="headerlink" title="广播机制：一个数组与另一个数组是否能不能运算"></a>广播机制：一个数组与另一个数组是否能不能运算</h2><p>横着为行。竖着为列，</p>
<p><strong>是否能相加</strong>：要从两个数组的后缘维度（从末尾开始算起的维度）的轴长度相符</p>
<p><strong>怎么查看维度</strong>：第一个是最外面的中括号有几个元素，后面进行递减查看</p>
<p><strong>矩阵的乘法遵循法则</strong>：第一横行乘于第一竖列再进行相加得出第一个相乘的数</p>
<h3 id="单位矩阵，逆，转置"><a href="#单位矩阵，逆，转置" class="headerlink" title="单位矩阵，逆，转置"></a><strong>单位矩阵</strong>，<strong>逆</strong>，<strong>转置</strong></h3><h6 id="单位矩阵：从-左上角到右下角的对角线（称为主对角线）上的元素均为-1-以外全都为-0"><a href="#单位矩阵：从-左上角到右下角的对角线（称为主对角线）上的元素均为-1-以外全都为-0" class="headerlink" title="单位矩阵：从 左上角到右下角的对角线（称为主对角线）上的元素均为 1 以外全都为 0"></a><strong>单位矩阵</strong>：<strong>从 左上角到右下角的对角线（称为主对角线）上的元素均为 1 以外全都为 0</strong></h6><p><strong>逆</strong>：两个数组相乘，称为了单位矩阵就算是一个数组是另一个数组的逆</p>
<p><strong>转置</strong>：行与列的互换</p>
<h2 id="NP的矩阵乘法要遵循下面的公式，也可以进过转至进行运算"><a href="#NP的矩阵乘法要遵循下面的公式，也可以进过转至进行运算" class="headerlink" title="NP的矩阵乘法要遵循下面的公式，也可以进过转至进行运算"></a>NP的矩阵乘法要遵循下面的公式，也可以进过转至进行运算</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数定义</th>
</tr>
</thead>
<tbody><tr>
<td>np.dot</td>
<td>矩阵进行相乘</td>
</tr>
<tr>
<td>np.matmul</td>
<td>矩阵进行相乘，单是不能矩阵与标量（一维）的相乘</td>
</tr>
<tr>
<td>.set_printoptions(<em>precision=None</em>, <em>threshold=None</em>, <em>edgeitems=None</em>, <em>linewidth=None</em>, <em>suppress=None</em>, <em>nanstr=None</em>, <em>infstr=None</em>, <em>formatter=None</em>, <em>sign=None</em>, <em>floatmode=None</em>, ***, <em>legacy=None</em>)</td>
<td><strong>precision</strong>：浮点精度可以设置，<strong>threshold</strong>：长数组可以总结为，<strong>suppress=True</strong>小结果可以被抑制，<strong>formatter={}<strong>自定义格式化程序可用于根据需要显示数组元素，</strong>要放回默认选项</strong>，可以使用(edgeitems=3, infstr=’inf’, linewidth=75, nanstr=’nan’, precision=8, suppress=False, threshold=1000, formatter=None)</td>
</tr>
</tbody></table>
<h3 id="按元素减去参数。"><a href="#按元素减去参数。" class="headerlink" title="按元素减去参数。"></a>按元素减去参数。</h3><h4 id="numpy-subtract"><a href="#numpy-subtract" class="headerlink" title="numpy.subtract"></a>numpy.subtract</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td><code>numpy.subtract</code>(<em>x1</em>, <em>x2</em>, <em>/</em>, <em>out=None</em>, ***, <em>where=True</em>, <em>casting=’same_kind’</em>, <em>order=’K’</em>, <em>dtype=None</em>, <em>subok=True</em>[, <em>signature</em>, <em>extobj</em>])</td>
<td>参数 ：                                                                                                                                  <strong>x1, x2</strong>：要彼此相减的数组。如果 <code>x1.shape != x2.shape</code>，它们必须可以广播到一个普通的形状（将成为输出的形状，                                                                                          <strong>out</strong>：结果存储的位置。  如果提供，它必须具有输入广播到的形状。  如果未提供或没有，返回一个新分配的数组。  元组（只能作为关键字参数）的长度必须等于输出的数量</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">3.0</span>



x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#这 -运算符可以用作 np.subtract上 数组。 </span>

x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">9.0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3.0</span><span class="token punctuation">)</span>
x1 <span class="token operator">-</span> x2
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
      <categories>
        <category>Numpy</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL数据类型</title>
    <url>/2020/02/10/SQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<img src='https://suncos-01-1254144885.cos.ap-shanghai.myqcloud.com/Hexo/S.png' height=400px >



<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据库：就是以一定格式进行组织的数据集合</p>
<p>关系是用表格存储的，二维表格存储</p>
<p>非关系是用字典类型存储的</p>
<p>数据库管理系统：DBMS</p>
<ul>
<li>数据库文件集合：主要一系列的数据文件，作用存储数据</li>
</ul>
<p>SQL语句：结构化查询语言</p>
<p>数据库文件一般都是.db后缀名</p>
<ol>
<li>取数据与数据库交流</li>
<li></li>
</ol>
<table>
<thead>
<tr>
<th>SQL语句</th>
<th>语句的性质</th>
</tr>
</thead>
<tbody><tr>
<td>sudo apt-get install mysql-server</td>
<td>安装服务端</td>
</tr>
<tr>
<td>sudo apt-get install mysql-client</td>
<td>安装客户端</td>
</tr>
<tr>
<td>sudo service mysql start</td>
<td>启动服务端</td>
</tr>
<tr>
<td>ps -ajx|grep mysql：就像是任务管理器</td>
<td>查看服务器是否开启，就像是任务管理器</td>
</tr>
<tr>
<td>mysql -uroot -pmysql</td>
<td>mysql -u用户名-pmysql登录：可以增删改查，创建表格</td>
</tr>
<tr>
<td>sudo service mysql stop</td>
<td>停止服务端</td>
</tr>
<tr>
<td>exit /quit/ctrl+d</td>
<td>退出</td>
</tr>
<tr>
<td>/etc/mysql/mysql.conf.d/mysqld.cnf</td>
<td>配置文件路径为</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>select now();</td>
<td>查看时间</td>
</tr>
<tr>
<td>select version();</td>
<td>查看版本信息</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>sudo service mysql restart</td>
<td><strong>重启MySQL服务</strong></td>
</tr>
</tbody></table>
<p>客户端Navicat使用</p>
<h2 id="SQL数据类型"><a href="#SQL数据类型" class="headerlink" title="SQL数据类型"></a>SQL数据类型</h2><table>
<thead>
<tr>
<th><strong>类型</strong></th>
<th><strong>功能</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>字符串：</strong></td>
<td></td>
</tr>
<tr>
<td>char：定长字符串：最多255</td>
<td>名字不管多次都占10个字节（知道固定长度的字节）</td>
</tr>
<tr>
<td>varchar：变字符串最多65535</td>
<td>节省空间（适合经常变化的）（存多少占多数）</td>
</tr>
<tr>
<td>text</td>
<td>字符串 text 表示存储大文本，当字符大于 4000 时推荐使用</td>
</tr>
<tr>
<td>字段就是最上面的属性名.enum：枚举类型</td>
<td>列举出一些类型，只能在这些列举的范围选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>年月日类型：</strong></td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>年，月，日</td>
</tr>
<tr>
<td>datetime</td>
<td>年，月，日，时分秒</td>
</tr>
<tr>
<td>decimal：定点数</td>
<td>（5,2）共代表5个</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>整型</strong></td>
<td></td>
</tr>
<tr>
<td>TINYINT：</td>
<td></td>
</tr>
<tr>
<td>SMALLINT</td>
<td></td>
</tr>
<tr>
<td>singned:有符号</td>
<td></td>
</tr>
<tr>
<td>unsingned：无符号</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>小数类型</strong></td>
<td></td>
</tr>
<tr>
<td>float：小数类型</td>
<td></td>
</tr>
<tr>
<td>decimal表示浮点数</td>
<td>如 decimal(5, 2) 表示共存5位数，小数占 2 位.</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="数据完整性和约束"><a href="#数据完整性和约束" class="headerlink" title="数据完整性和约束"></a>数据完整性和约束</h3><h6 id="参照完整性，就是增删改查中：要保证数据的正确性，"><a href="#参照完整性，就是增删改查中：要保证数据的正确性，" class="headerlink" title="参照完整性，就是增删改查中：要保证数据的正确性，"></a>参照完整性，就是增删改查中：要保证数据的正确性，</h6><h5 id="约束：删除的时候不让删"><a href="#约束：删除的时候不让删" class="headerlink" title="约束：删除的时候不让删"></a>约束：删除的时候不让删</h5><p>保证数据的独一性</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>NOT NULL</td>
<td>非空约束</td>
</tr>
<tr>
<td>PRMARY KEY</td>
<td>主键约束</td>
</tr>
<tr>
<td>UNIQUE KE</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>数据库基本操作</p>
<table>
<thead>
<tr>
<th>数据表库的命令</th>
<th>使用的功能</th>
</tr>
</thead>
<tbody><tr>
<td>show databases;</td>
<td>查看所有数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前使用的数据库</td>
</tr>
<tr>
<td>create database (数据库名字)  charset=utf8;</td>
<td>创建数据库</td>
</tr>
<tr>
<td>show  create database （数据库的名字）；</td>
<td>创建数据库查看数据库的字符集</td>
</tr>
<tr>
<td>drop database （数据库名称）;</td>
<td>删除数据表</td>
</tr>
<tr>
<td>数据表名.drop(数据表名[数据表名[对应的异常值这些异常值写出了T] == T].index,inplace = T)</td>
<td>对表里面的一些异常数据进行删除</td>
</tr>
<tr>
<td>use (数据库名称);   返回上一层服务器 use mysql</td>
<td>使用数据表进入指定的数据库</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>create database 数据库的名字</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="查看表结构命令："><a href="#查看表结构命令：" class="headerlink" title="查看表结构命令："></a>查看表结构命令：</h2><table>
<thead>
<tr>
<th>命令</th>
<th>命令介绍</th>
</tr>
</thead>
<tbody><tr>
<td>show tables;</td>
<td>产看数据库的所有表</td>
</tr>
<tr>
<td>desc 表名;</td>
<td>查看表里面的内容</td>
</tr>
<tr>
<td>show create table 表名;</td>
<td>查看数据表</td>
</tr>
<tr>
<td>select * from students;</td>
<td>查看添加的文档</td>
</tr>
</tbody></table>
<h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><pre><code>crea table 表名 （字段   类型    约束    【字段   类型     约束】）；

crea table xxx(id int unsigned primary key auto_increment not null,name varchar(20));


create table创建students 表（id ，name ，age， high， （decimal），gender（enum），cls_id）
</code></pre>
<h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><pre class=" language-python"><code class="language-python">create table 列表名<span class="token punctuation">(</span>

id int unsigned（无符号<span class="token number">0</span><span class="token operator">-</span><span class="token number">255</span>）  primary key（主键） auto_increment（自动增加） <span class="token operator">not</span> null（不能为空）<span class="token punctuation">,</span>

name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>（上限为<span class="token number">20</span>个字符） <span class="token operator">not</span> null<span class="token punctuation">,</span>

age tinyint unsigned default  <span class="token number">0</span>（缺省值自动填充为<span class="token number">0</span>）<span class="token punctuation">,</span>

height decimal<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>（一共有<span class="token number">5</span>位数，有小数点是有两位）

gender enum<span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span>“女”<span class="token punctuation">,</span><span class="token string">"人妖"</span><span class="token punctuation">,</span><span class="token string">"保密"</span><span class="token punctuation">)</span>（枚举），

time date default <span class="token string">"2020-01-01"</span>

<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<pre><code>create table classes(
id int unsigned  primary key auto_increment not null,
name varchar(20） not null,
id_age tinyint unsigned default  0
);
</code></pre>
<pre class=" language-python"><code class="language-python">create table students<span class="token punctuation">(</span>

id int unsigned primary key  auto_increment <span class="token operator">not</span> null<span class="token punctuation">,</span>

name varchar<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> null<span class="token punctuation">,</span>

age tinyint unsigned default  <span class="token number">0</span><span class="token punctuation">,</span>

height decimal<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

gender enum<span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">,</span><span class="token string">"女"</span><span class="token punctuation">,</span><span class="token string">"人妖"</span><span class="token punctuation">,</span><span class="token string">"保密"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

time date default  <span class="token string">"2020-01-01"</span>

<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/1611042404103.png' height=px >



<ul>
<li>Field：创建的字段</li>
<li>Type：属性的性质，和约束，枚举</li>
<li>Null：表示字段为空，yes表示可以为空</li>
<li>Key：唯一标识</li>
<li>Default：，默认值，如果字段被设计时，如果允许默认条件下，用户会进行数据的插入，那么就可以用事先准备好的数据来填充通常填充的是NULL</li>
<li>Extre：表示id可以顺序下去，</li>
</ul>
<table>
<thead>
<tr>
<th>alter table 表名 drop 列名;</th>
<th>删除字段</th>
</tr>
</thead>
<tbody><tr>
<td>drop table 表名;</td>
<td>删除表</td>
</tr>
<tr>
<td>delete from  表名 where id =数字几;</td>
<td>物理删除行</td>
</tr>
<tr>
<td>alter table   表名 add is_delete bit default 0;</td>
<td>逻辑增添</td>
</tr>
<tr>
<td>update 表名 set is_delete =1 where name = “行名”</td>
<td>逻辑删除</td>
</tr>
</tbody></table>
<h2 id="创建数据库和增删改查流程"><a href="#创建数据库和增删改查流程" class="headerlink" title="创建数据库和增删改查流程"></a>创建数据库和增删改查流程</h2><table>
<thead>
<tr>
<th>创建数据库命令</th>
<th>命令的作用</th>
</tr>
</thead>
<tbody><tr>
<td>mysql -uroot -pmysql;</td>
<td>登录数据库</td>
</tr>
<tr>
<td>quit、exit，</td>
<td>退出数据库</td>
</tr>
<tr>
<td>show databases;</td>
<td>查看所有的数据库</td>
</tr>
<tr>
<td>create database  数据库名称    charset=utf8;</td>
<td>创建数据库</td>
</tr>
<tr>
<td>select database();</td>
<td>查看当前使用数据库</td>
</tr>
<tr>
<td>use 数据库名称;</td>
<td>使用数据库</td>
</tr>
<tr>
<td>show tables；</td>
<td>查看当前数据库中所有的表</td>
</tr>
<tr>
<td>create table students(id  int  数据表名   primary  key  auto_increment  not mull,name varchar(20)  not  null, age tinyint unsigned default0,height decimal(5,2),gender enum(“男”，“女”));</td>
<td>创建表</td>
</tr>
<tr>
<td>alter table 表名 add 列名 类型   约束;</td>
<td>添加字段</td>
</tr>
<tr>
<td>alter table 表名 modify 列名 类型 约束;         例:alter table students modify birthday date not null;</td>
<td>修改字段类型及约束</td>
</tr>
<tr>
<td>alter table 表名 drop 列名</td>
<td>修改字段</td>
</tr>
<tr>
<td>show create table  表名;</td>
<td>查看数据表的类型，约束</td>
</tr>
<tr>
<td>show create database  数据库名;</td>
<td>查看数据库的类型</td>
</tr>
<tr>
<td>drop table 表名;</td>
<td>删除表</td>
</tr>
<tr>
<td><strong>增添数据</strong></td>
<td></td>
</tr>
<tr>
<td>insert into 表名  values(…..);：添加数据</td>
<td>添加数据值，对应着字段名字</td>
</tr>
<tr>
<td>insert into 表名 （列1.。。）values(值1，。。。);       insert into students (name,age,height,gender,time) values(“姓名”,18,180.22,”男”,”2020-07-08”);</td>
<td>部分的插入，对应的字段和插入的内容</td>
</tr>
<tr>
<td>insert into 表名 values（，，，），（。。。）。。;</td>
<td>全列多行插入</td>
</tr>
<tr>
<td>insert into 表名 （列1，。。。） values（值1，。。。），（值1.。）;</td>
<td>部分列多行插入</td>
</tr>
<tr>
<td>select * from 表名;</td>
<td>查看表的内容</td>
</tr>
<tr>
<td>select 列1 ，列2 。。。from 表名;</td>
<td>查看指定字段的内容</td>
</tr>
<tr>
<td>update 表名 set 列1 = 值1，列2=值2.。。where  条件;    列如:update students set age = 18, gender = ‘女’ where id = 6;</td>
<td>修改的数据</td>
</tr>
<tr>
<td>delete from 表名 where 条件;    列如:delete from students where id = 3;</td>
<td>删除数据（物理删除）</td>
</tr>
<tr>
<td>alter table   表名 add is_delete bit default 0;</td>
<td>逻辑的添加</td>
</tr>
<tr>
<td>update 表名 set is_delete =1 where name = “行名”</td>
<td>逻辑的删除，要先增添，才能删除</td>
</tr>
<tr>
<td>drop database 数据库名称;</td>
<td>删除数据库</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>fasttext工具</title>
    <url>/2020/02/10/fasttext%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<img src='https://github.com/xiaoyvlongoing/xiaoyvlongoing.github.io/blob/main/favicon.png' height=400px >









<h1 id="fasttext工具的使用"><a href="#fasttext工具的使用" class="headerlink" title="fasttext工具的使用"></a>fasttext工具的使用</h1><p>作为NLP工程领域常用的工具包, fasttext有两大作用:</p>
<ul>
<li>进行文本分类</li>
<li>训练词向量</li>
</ul>
<h3 id="使用fasttext工具进行文本分类的过程"><a href="#使用fasttext工具进行文本分类的过程" class="headerlink" title="使用fasttext工具进行文本分类的过程"></a>使用fasttext工具进行文本分类的过程</h3><ul>
<li>第一步: 获取数据</li>
<li>第二步: 训练集与验证集的划分</li>
<li>第三步: 训练模型</li>
<li>第四步: 使用模型进行预测并评估</li>
<li>第五步: 模型调优</li>
<li>第六步: 模型保存与重加载 </li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>import fasttext</td>
<td>构建fasttext工具包</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>model=fasttext.<strong>train_supervised</strong>（(input=文件名，epoch=数值轮数表示，wordNgrams=关联，loss=’hs’，“ova”）</td>
<td>使用fasttext的train_supervised方法<strong>进行文本分类模型</strong>的训练，                                                                                <strong>wordNgrams</strong>：设置为2意味着添加2-gram特征, 这些特征帮助模型捕捉前后词汇之间的关联, 更好的提取分类规则用于模型分类, 当然这也会增加模型训时练占用的资源和时间，<strong>loss</strong>：来修改损失计算方式(等效于输出层的结构), 默认是softmax层结构，设置为’hs’, 代表层次softmax结构, 意味着输出层的结构(计算方式)发生了变化, 将以一种更低复杂度的方式来计算损失，“ova”：标签多分类问题的损失计算方式，</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>model.predict(“一句话”)</td>
<td>模型进行预测并评估</td>
</tr>
<tr>
<td>model.test（“需要评估的数据集”）</td>
<td>为了评估模型到底表现如何,元组中的每项分别代表, 验证集样本数量, 精度以及召回率</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>model.predict（“一句话”，k=-1, threshold=0.5）</td>
<td>模型进行预测并评估，k=-1：尽可能输出多个标签，threshold：阈值</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>model.save_model(“./模型名字.bin”)</td>
<td>保存模型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>model = fasttext.load_model(“./模型名字.bin”)</td>
<td>模型重加载</td>
</tr>
</tbody></table>
<h2 id="词向量迁移"><a href="#词向量迁移" class="headerlink" title="词向量迁移"></a>词向量迁移</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>model = fasttext.load_model(“模型名字.bin”)</td>
<td>加载模型</td>
</tr>
<tr>
<td>model.words[：100]</td>
<td>查看前100个词汇(这里的词汇是广义的, 可以是中文符号或汉字))</td>
</tr>
<tr>
<td>model.get_word_vector（“词名”）</td>
<td>使用模型获得’词名’这个名词的词向量</td>
</tr>
<tr>
<td>model.get_nearest_neighbors（“词名”）</td>
<td>以’音乐’为例, 返回的邻近词基本上与音乐都有关系, 如乐曲, 音乐会, 声乐等.</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/2020/02/10/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><ol>
<li><h5 id="二分查找要求是有序，是为了索引快速查找到中间值"><a href="#二分查找要求是有序，是为了索引快速查找到中间值" class="headerlink" title="二分查找要求是有序，是为了索引快速查找到中间值"></a>二分查找要求是有序，是为了索引快速查找到中间值</h5></li>
<li><h5 id="二分查找要求是顺序存储的"><a href="#二分查找要求是顺序存储的" class="headerlink" title="二分查找要求是顺序存储的"></a>二分查找要求是顺序存储的</h5></li>
<li><h5 id="二分查找是从中间开始查找的"><a href="#二分查找是从中间开始查找的" class="headerlink" title="二分查找是从中间开始查找的"></a>二分查找是从中间开始查找的</h5></li>
<li><h5 id="时间复杂度最好O（1），最坏O（logn）"><a href="#时间复杂度最好O（1），最坏O（logn）" class="headerlink" title="时间复杂度最好O（1），最坏O（logn）"></a>时间复杂度最好O（1），最坏O（logn）</h5></li>
</ol>
<h2 id="递归版本"><a href="#递归版本" class="headerlink" title="递归版本"></a>递归版本</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">if</span> item <span class="token operator">==</span> alist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">elif</span> item <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>

    <span class="token keyword">elif</span> item <span class="token operator">></span> alist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>  binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="非递归版本"><a href="#非递归版本" class="headerlink" title="非递归版本"></a>非递归版本</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> <span class="token number">0</span>
    end <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">while</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>
        mid <span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true">#要是找到数值的下标的话返回mid</span>
        <span class="token keyword">elif</span> item <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">elif</span> item <span class="token operator">></span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            start <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="查找3的第一个数"><a href="#查找3的第一个数" class="headerlink" title="查找3的第一个数"></a>查找3的第一个数</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> <span class="token number">0</span>
    end <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>

    <span class="token keyword">while</span> start <span class="token operator">&lt;=</span> end<span class="token punctuation">:</span>
        mid <span class="token operator">=</span><span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> mid <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">or</span> alist<span class="token punctuation">[</span>mid<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">!=</span>item<span class="token punctuation">:</span>
                <span class="token keyword">return</span> mid
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                end <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">elif</span> item <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            end <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">elif</span> item <span class="token operator">></span> alist<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">:</span>
            start <span class="token operator">=</span> mid <span class="token operator">+</span><span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token boolean">False</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    alist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>binary_search<span class="token punctuation">(</span>alist<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="线性结构：就是一对一的关系"><a href="#线性结构：就是一对一的关系" class="headerlink" title="线性结构：就是一对一的关系"></a>线性结构：就是一对一的关系</h3><h3 id="非线性结构：一个节点可能对应着前驱后继的多个节点"><a href="#非线性结构：一个节点可能对应着前驱后继的多个节点" class="headerlink" title="非线性结构：一个节点可能对应着前驱后继的多个节点"></a>非线性结构：一个节点可能对应着前驱后继的多个节点</h3><h2 id="树：非线性"><a href="#树：非线性" class="headerlink" title="树：非线性"></a>树：非线性</h2><ol>
<li><h5 id="有序树，二叉树：每个节点最多含有二个子树为二叉树"><a href="#有序树，二叉树：每个节点最多含有二个子树为二叉树" class="headerlink" title="有序树，二叉树：每个节点最多含有二个子树为二叉树"></a>有序树，二叉树：每个节点最多含有二个子树为二叉树</h5></li>
<li><h5 id="完全二叉树，除了最后一层节点除外，其他的节点都满了为完全二叉树，最后一层还是紧密排序的"><a href="#完全二叉树，除了最后一层节点除外，其他的节点都满了为完全二叉树，最后一层还是紧密排序的" class="headerlink" title="完全二叉树，除了最后一层节点除外，其他的节点都满了为完全二叉树，最后一层还是紧密排序的"></a>完全二叉树，除了最后一层节点除外，其他的节点都满了为完全二叉树，最后一层还是紧密排序的</h5></li>
<li><h5 id="满二叉树：所有节点都满了没有一个空的为满二叉树"><a href="#满二叉树：所有节点都满了没有一个空的为满二叉树" class="headerlink" title="满二叉树：所有节点都满了没有一个空的为满二叉树"></a>满二叉树：所有节点都满了没有一个空的为满二叉树</h5></li>
<li><h5 id="平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于1的二叉树"><a href="#平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于1的二叉树" class="headerlink" title="平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于1的二叉树"></a>平衡二叉树：当且仅当任何节点的两棵子树的高度差不大于1的二叉树</h5></li>
<li><h5 id="排序二叉树："><a href="#排序二叉树：" class="headerlink" title="排序二叉树："></a>排序二叉树：</h5><h6 id="1：若左子树不为空，则左子树所有节点的值均小于它的根节点"><a href="#1：若左子树不为空，则左子树所有节点的值均小于它的根节点" class="headerlink" title="1：若左子树不为空，则左子树所有节点的值均小于它的根节点"></a>1：若左子树不为空，则左子树所有节点的值均小于它的根节点</h6><h6 id="2：若右子树不为空，则右子树所有节点的值均大于它的根节点"><a href="#2：若右子树不为空，则右子树所有节点的值均大于它的根节点" class="headerlink" title="2：若右子树不为空，则右子树所有节点的值均大于它的根节点"></a>2：若右子树不为空，则右子树所有节点的值均大于它的根节点</h6><h6 id="3：子节点的树左右也为排序"><a href="#3：子节点的树左右也为排序" class="headerlink" title="3：子节点的树左右也为排序"></a>3：子节点的树左右也为排序</h6></li>
</ol>
<p>​    </p>
<h2 id="链表二叉树"><a href="#链表二叉树" class="headerlink" title="链表二叉树"></a>链表二叉树</h2><ol>
<li><h5 id="二叉树的第i层至多有2-i-1节点"><a href="#二叉树的第i层至多有2-i-1节点" class="headerlink" title="二叉树的第i层至多有2^i-1节点"></a>二叉树的第i层至多有2^i-1节点</h5></li>
<li><h5 id="深度为k的二叉树至多与2-k-1个节点"><a href="#深度为k的二叉树至多与2-k-1个节点" class="headerlink" title="深度为k的二叉树至多与2^k-1个节点"></a>深度为k的二叉树至多与2^k-1个节点</h5></li>
</ol>
<h2 id="二叉树的广度优先遍历"><a href="#二叉树的广度优先遍历" class="headerlink" title="二叉树的广度优先遍历"></a>二叉树的广度优先遍历</h2><h5 id="深度优先：深度优先，选择一个路直达找到终点"><a href="#深度优先：深度优先，选择一个路直达找到终点" class="headerlink" title="深度优先：深度优先，选择一个路直达找到终点"></a>深度优先：深度优先，选择一个路直达找到终点</h5><h5 id="广度优先：可以找到最短的路径，先选择一条路找一层，没有再选择一条路径进行找，这一层没有就要从新选路走两层，再换直达找到。"><a href="#广度优先：可以找到最短的路径，先选择一条路找一层，没有再选择一条路径进行找，这一层没有就要从新选路走两层，再换直达找到。" class="headerlink" title="广度优先：可以找到最短的路径，先选择一条路找一层，没有再选择一条路径进行找，这一层没有就要从新选路走两层，再换直达找到。"></a>广度优先：可以找到最短的路径，先选择一条路找一层，没有再选择一条路径进行找，这一层没有就要从新选路走两层，再换直达找到。</h5><h2 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h2><h5 id="先序遍历：根左右，先写根，然后再靠左边的数值都写出来，写到底，然后在写最后叶节点的右边"><a href="#先序遍历：根左右，先写根，然后再靠左边的数值都写出来，写到底，然后在写最后叶节点的右边" class="headerlink" title="先序遍历：根左右，先写根，然后再靠左边的数值都写出来，写到底，然后在写最后叶节点的右边"></a>先序遍历：根左右，先写根，然后再靠左边的数值都写出来，写到底，然后在写最后叶节点的右边</h5><h5 id="中序遍历：左根右，左边开始，要从最左边的叶节点开始写"><a href="#中序遍历：左根右，左边开始，要从最左边的叶节点开始写" class="headerlink" title="中序遍历：左根右，左边开始，要从最左边的叶节点开始写"></a>中序遍历：左根右，左边开始，要从最左边的叶节点开始写</h5><h5 id="后序遍历：左右根，从叶节点开始先左右再跟"><a href="#后序遍历：左右根，从叶节点开始先左右再跟" class="headerlink" title="后序遍历：左右根，从叶节点开始先左右再跟"></a>后序遍历：左右根，从叶节点开始先左右再跟</h5><h2 id="遍历的结果反推处理二叉树的是什么结构"><a href="#遍历的结果反推处理二叉树的是什么结构" class="headerlink" title="遍历的结果反推处理二叉树的是什么结构"></a>遍历的结果反推处理二叉树的是什么结构</h2><h5 id="知道中序遍历，和先序遍历就可以找到规律"><a href="#知道中序遍历，和先序遍历就可以找到规律" class="headerlink" title="知道中序遍历，和先序遍历就可以找到规律"></a>知道中序遍历，和先序遍历就可以找到规律</h5>]]></content>
      <categories>
        <category>算法，树</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>再议分割</title>
    <url>/2019/01/04/%E5%86%8D%E8%AE%AE%E5%88%86%E5%89%B2/</url>
    <content><![CDATA[<h1 id="1：再议分割"><a href="#1：再议分割" class="headerlink" title="1：再议分割"></a>1：再议分割</h1><h3 id="方法的使用：数据量多的时候运用留出法，数据量中等：交叉验证法，数据量小时：运用自助法"><a href="#方法的使用：数据量多的时候运用留出法，数据量中等：交叉验证法，数据量小时：运用自助法" class="headerlink" title="方法的使用：数据量多的时候运用留出法，数据量中等：交叉验证法，数据量小时：运用自助法"></a>方法的使用：数据量多的时候运用留出法，数据量中等：交叉验证法，数据量小时：运用自助法</h3><ul>
<li>当我们<strong>数据量足够</strong>时，选择<strong>留出法</strong>简单省时，在牺牲很小的准确度的情况下，换取计算的简便；</li>
<li>当我们的<strong>数据量较小</strong>时，我们应该选择<strong>交叉验证法</strong>，因为此时划分样本集将会使训练数据过少；<ul>
<li>当我们的<strong>数据量特别少</strong>的时候，我们可以考虑<strong>留一法</strong>。</li>
</ul>
</li>
</ul>
<h4 id="分层采样：保留类别比例的采样方式通常称为“分层采样，确保训练集，测试集中，各类别样本的比例是和原始数据集中的一致"><a href="#分层采样：保留类别比例的采样方式通常称为“分层采样，确保训练集，测试集中，各类别样本的比例是和原始数据集中的一致" class="headerlink" title="分层采样：保留类别比例的采样方式通常称为“分层采样，确保训练集，测试集中，各类别样本的比例是和原始数据集中的一致"></a><strong>分层采样</strong>：保留类别比例的采样方式通常称为<strong>“分层采样</strong>，确保训练集，测试集中，各类别样本的比例是和原始数据集中的一致</h4><h2 id="1-1：留出法"><a href="#1-1：留出法" class="headerlink" title="1.1：留出法"></a>1.1：留出法</h2><h4 id="留出法训练和测试集：将数据集随机划分成两个互斥的集合，训练-测试集的划分要尽可能保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响，重复进行实验评估后取平均值作为留出法的评估结果。"><a href="#留出法训练和测试集：将数据集随机划分成两个互斥的集合，训练-测试集的划分要尽可能保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响，重复进行实验评估后取平均值作为留出法的评估结果。" class="headerlink" title="留出法训练和测试集：将数据集随机划分成两个互斥的集合，训练/测试集的划分要尽可能保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响，重复进行实验评估后取平均值作为留出法的评估结果。"></a>留出法训练和测试集：将数据集随机划分成两个互斥的集合，<strong>训练/测试集的划分要尽可能保持数据分布的一致性，避免因数据划分过程引入额外的偏差而对最终结果产生影响</strong>，<strong>重复进行实验评估后取平均值作为留出法的评估结果。</strong></h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.model_selection import   <strong>train_test_split</strong>（）</td>
<td><strong>留出法：数据量最大的时候选用</strong>                                                                   <strong>划分数据集</strong>，划分训练集和测试集</td>
</tr>
<tr>
<td><strong>train_test_split</strong>(train_data,train_target,test_size=,random_state=)</td>
<td><strong>train_data</strong>：待划分样本数据<strong>train_target</strong>：待划分样本数据的结果（标签）                              <strong>test_size</strong>：测试数据占样本数据的比例，若整数则样本数量<strong>random_state</strong>：<strong>设置随机数种子</strong>，保证每次都是同一个随机数。若为0或不填，则每次得到数据都不一样</td>
</tr>
<tr>
<td><strong>留一法每次去一个样本作为测试集，不受随机样本划分的影响</strong></td>
<td></td>
</tr>
<tr>
<td>from sklearn.model_selection import <strong>LeaveOneOut</strong></td>
<td><strong>留一法：</strong> <strong>适合小数据的放法</strong>：每次抽取一个样本做为测试集。                          显然，留一法不受随机样本划分方式的影响，因为m个样本只有唯一的方式划分为m个子集一每个子集包含个样本；</td>
</tr>
<tr>
<td>承接留一法的变量.split（数据变量）</td>
<td>可以的得出：train, test</td>
</tr>
<tr>
<td><strong>split()</strong></td>
<td>通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串</td>
</tr>
</tbody></table>
<h3 id="留一法优缺点："><a href="#留一法优缺点：" class="headerlink" title="留一法优缺点："></a>留一法优缺点：</h3><p><strong>优点</strong>：</p>
<ul>
<li>留一法使用的训练集与初始数据集相比只少了一个样本，这就使得在绝大多数情况下，留一法中被实际评估的模型与期望评估的用D训练出的模型很相似。因此，<strong>留一法的评估结果往往被认为比较准确</strong>。</li>
</ul>
<p><strong>缺点</strong>：</p>
<ul>
<li>留一法也有其缺陷:在数据集比较大时，训练m个模型的计算开销可能是难以忍受的(例如数据集包含1百万个样本，则需训练1百万个模型，而这还是在未考虑算法调参的情况下。</li>
</ul>
<h2 id="1-2：交叉验证法"><a href="#1-2：交叉验证法" class="headerlink" title="1.2：交叉验证法"></a>1.2：交叉验证法</h2><h4 id="去分训练集和测试集：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集；从而可进行k次训练和测试，最终返回的是这k个测试结果的均值。"><a href="#去分训练集和测试集：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集；从而可进行k次训练和测试，最终返回的是这k个测试结果的均值。" class="headerlink" title="去分训练集和测试集：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集；从而可进行k次训练和测试，最终返回的是这k个测试结果的均值。"></a><strong>去分训练集和测试集</strong>：每次用k-1个子集的并集作为训练集，余下的那个子集作为测试集；从而可进行k次训练和测试，最终返回的是这k个测试结果的均值。</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%8D%E8%AE%AE%E5%88%86%E5%89%B2/1613894405417.png' height=px >

<h3 id="KFold，StratifiedKFold-：两种不同性质的交叉验证分类法，优先使用：StratifiedKFold"><a href="#KFold，StratifiedKFold-：两种不同性质的交叉验证分类法，优先使用：StratifiedKFold" class="headerlink" title="KFold，StratifiedKFold ：两种不同性质的交叉验证分类法，优先使用：StratifiedKFold"></a>KFold，StratifiedKFold ：两种不同性质的交叉验证分类法，优先使用：StratifiedKFold</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.model_selection import <strong>KFold</strong>,<strong>StratifiedKFold，</strong> <strong>StratifiedShuffleSplit（这个是有放回的采样形成了随机）</strong></td>
<td><strong>交叉验证法：</strong>将训练/测试数据集划分n_splits个互斥子集，每次用其中一个子集当作验证集，剩下的n_splits-1个作为训练集，进行n_splits次训练和测试，得到n_splits个结果</td>
</tr>
<tr>
<td><strong>KFold</strong>：当Y值同种类别连续分到一起时候，同种类别没有进行分开，把同种类别都提取成的验证集，其他的称为了训练集，导致类别分配平衡了，样本正负类别的分布不均匀，</td>
<td>没有分层（有可能分到了同种的类型）,没有关注标签值</td>
</tr>
<tr>
<td><strong>KFold：</strong>（n_splits= ,random_state = ,shuffle=）</td>
<td><strong>n_splits</strong>=数值：表示划分几等份                       <strong>random_state</strong>=数值：表示分割类别的间隔数                                                               <strong>shuffle=T（一般为T）或F：</strong>等于F：表示不按照random_state进行间隔取值进行分割重写洗牌，T相反</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>StratifiedKFold：</strong>自动查找到不同的类别进行分配，达到测试集平衡分配，样本正负类别分到测试集中的分布的均衡；数据大循环<strong>标签值不会重复</strong></td>
<td>关注了标签值了：经行的分层（可以抽样分层了不同的类型，达到了平衡的分配）</td>
</tr>
<tr>
<td><strong>StratifiedKFold</strong>（n_splits= ,random_state = ,shuffle=）</td>
<td><strong>n_splits</strong>=数值：表示划分几等份                       <strong>random_state</strong>=数值：表示分割类别的间隔数                                                                  <strong>shuffle=T（一般为T）或F：</strong>等于F：表示不按照random_state进行间隔取值进行分割重写洗牌数据打乱，T相反</td>
</tr>
<tr>
<td><strong>KFold,</strong> <strong>StratifiedKFold</strong></td>
<td><strong>StratifiedKFold</strong>的用法和<strong>KFold</strong>的区别是：SKFold是分层采样，确保训练集，测试集中，各类别样本的比例是和原始数据集中的一致。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>from sklearn.model_selection import <strong>StratifiedShuffleSplit</strong>（(test_size=分的占比这个要传入进去小数生成）标签值有放回的抽样（中等偏小的时候选用）</td>
<td>关注到了标签值没有把相同标签（同属性如1,1）分到一起                                           可以做到严格的数据形成1:1                                                    提供分层抽样功能，确保每个标签对应的样本的比例，</td>
</tr>
</tbody></table>
<h2 id="1-3：自助法：0-368的未被采集"><a href="#1-3：自助法：0-368的未被采集" class="headerlink" title="1.3：自助法：0.368的未被采集"></a>1.3：自助法：0.368的未被采集</h2><p><strong>自助法</strong>：随机采取又有放回的方法，经过的m次有随机采出又放回的，最终有0.368的未被采集，于是将这0.368的数据作为测试集</p>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%8D%E8%AE%AE%E5%88%86%E5%89%B2/2.png' height=px >

<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><strong>优点</strong>：<ul>
<li>自助法在<strong>数据集较小</strong>、难以有效划分训练/测试集时很有用；</li>
<li>此外，自助法能从初始数据集中产生多个不同的训练集，这对<strong>集成学习</strong>等方法有很大的好处。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>自助法产生的数据集改变了初始数据集的分布，这会引入估计偏差。因此，在初始数据量足够时；留出法和交叉验证法更常用一些。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>机器学习，算法</category>
      </categories>
      <tags>
        <tag>机器学习，算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线程任务</title>
    <url>/2020/02/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="多线程任务"><a href="#多线程任务" class="headerlink" title="多线程任务"></a>多线程任务</h2><h3 id="一：多线程"><a href="#一：多线程" class="headerlink" title="一：多线程"></a>一：多线程</h3><table>
<thead>
<tr>
<th>函数名</th>
<th>使用的方法</th>
</tr>
</thead>
<tbody><tr>
<td>导入的函数包import multiprocessing</td>
<td>创建的进程导入的包名</td>
</tr>
<tr>
<td>multiprocessing.Process([group [, target [, name [, args：传入指定形参 [, kwargs：以字典的类型进行传参]]]]])</td>
<td>导入进程函数说明</td>
</tr>
<tr>
<td>target=方法名</td>
<td>执行的目标任务名（函数名，线程名）</td>
</tr>
<tr>
<td>name=进程的名字</td>
<td>进程名字</td>
</tr>
<tr>
<td>对象名=multiprocessing.Process(target=方法名)</td>
<td>启动进程的方法</td>
</tr>
<tr>
<td>子进程对象.start()</td>
<td>对象.start（）：启动子进程实例（创建子进程）</td>
</tr>
<tr>
<td>os.getpid</td>
<td>print(os.getpid)查看子进程编号</td>
</tr>
<tr>
<td>os.getppid</td>
<td>print(os.getppid)查看父进程编号</td>
</tr>
<tr>
<td>multiprocessing.current_process().name进程名字</td>
<td>查看当前进程编号</td>
</tr>
<tr>
<td>子进程对象.join()</td>
<td>加入jojn后主线程会等待子线程执行后再结束主线程，让线程可以形成串行，形成有顺序的，线性和进程的也可进行串行，结束前一个，进行下一个执行</td>
</tr>
<tr>
<td>子进程对象.terminate()</td>
<td>不管任务是否完成，立即终止子进程</td>
</tr>
<tr>
<td>子进程对象.daemom = True</td>
<td>不管任务是否完成，立即终止子进程</td>
</tr>
<tr>
<td>进程在ubuntu中 ps -aux|grep 要查找的线程的名字</td>
<td>过滤需要的进程来查看ID</td>
</tr>
<tr>
<td>os.kill(os.getpid(),9)  进程的id</td>
<td>强制杀死进程</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>1：进程是操作系统资源分配的最小单位</p>
<p>2：进程之间执行也是无序的，它是由操作系统调度决定的，操作系统调度哪个进程，哪个进程就先执行，没有调度的进程不能执行</p>
<p>3：进程不共享全局变量</p>
<h3 id="二：线程和进程有什么区别："><a href="#二：线程和进程有什么区别：" class="headerlink" title="二：线程和进程有什么区别："></a>二：线程和进程有什么区别：</h3><p>1：进程是操作系统资源分配的最小单位，线程是cpu调度的最小单位</p>
<p>2：线程依附于进程，没有进程就没有线程，一个进程默认创造一个主线程，一个进程可以创造多个线程</p>
<p>3：进程不共享全局变量，而同一个进程的线程可以共享进程的全局变量</p>
<p>4：进程开销比较大，可以利用多核（并行），线程开销比较小不能利用多核（并发）</p>
<h3 id="三：什么是主进程："><a href="#三：什么是主进程：" class="headerlink" title="三：什么是主进程："></a>三：什么是主进程：</h3><p>主进程是：程序执行的入口，一个进程里默认带一个线程，主进程可以创建多个子线程，</p>
<h3 id="四：写出创造进程的步骤："><a href="#四：写出创造进程的步骤：" class="headerlink" title="四：写出创造进程的步骤："></a>四：写出创造进程的步骤：</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：导入进程包：

​        <span class="token keyword">import</span>  multiprocessing

<span class="token number">2</span>：创建进程函数（方法）

​        <span class="token keyword">def</span> num（）：

​                <span class="token keyword">pass</span>

<span class="token number">3</span>：创建进程，调用进程函数（方法）

​        变量 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target <span class="token operator">=</span> num<span class="token punctuation">)</span>

<span class="token number">4</span><span class="token punctuation">:</span>启动进程

        变量<span class="token punctuation">.</span>start（）

</code></pre>
<h3 id="五：怎么获得进程的pid"><a href="#五：怎么获得进程的pid" class="headerlink" title="五：怎么获得进程的pid"></a>五：怎么获得进程的pid</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：improre  os 

<span class="token number">2</span>：os<span class="token punctuation">.</span>getppid <span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">)</span>查看父进程id编号

<span class="token number">3</span>：os<span class="token punctuation">.</span>getpid  ：   <span class="token keyword">print</span>（os<span class="token punctuation">.</span>getpid）查看当前进程id编号

<span class="token number">4</span>：multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name进程（线程）名字   ：查看当前进程（线程）的id编号    
</code></pre>
<h3 id="六：怎么给进程函数传递参数："><a href="#六：怎么给进程函数传递参数：" class="headerlink" title="六：怎么给进程函数传递参数："></a>六：怎么给进程函数传递参数：</h3><p>1：通过元组进程传递参数</p>
<pre><code>multiprocessing.Process(target = coding , args = （参数，）)
传入的是一个元组需要加上，传入的参数要保持一致
</code></pre>
<h3 id="2：通过字典进程传参："><a href="#2：通过字典进程传参：" class="headerlink" title="2：通过字典进程传参："></a>2：通过字典进程传参：</h3><pre><code>multiprocessing.Process(target = coding , kwargs = &#123;传递的进程变量名：传入的参数&#125;)
因为用的是字典的要与进程参数对住
</code></pre>
<h3 id="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"><a href="#七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行" class="headerlink" title="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"></a>七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行</h3><p>1：把join加入到子进程中，子进程变量.join，形成串联运行完子进程在运行主线线程</p>
<p>八：Process创建的实例对象的常用的方法有什么？</p>
<p>1：start（）：启动子进程实例（创建子进程）</p>
<p>2：join（）：等待子进程执行结束，形成串联</p>
<p>3：terminate（）：不管任务是否完成，立即终止子进程</p>
<p>八《一》：    Process常用的属性：</p>
<p>1：name：当前进程的别名，默认为Process - n ，n为从1开始递增的整数</p>
<p>2：pid：当前进程的id</p>
<p>九：编写一个程序，实现创建一个子进程，子进程每一秒打印一次：这是子进程，循环的第n次，打印 的次数是由主进程传递给子进程。</p>
<pre><code>1：#利用args和kwargs传参
import multiprocessing
import time
def ness(num):
    for i in range(num):
        time.sleep(1)
        print(&quot;这个是一个线程&quot;)
if __name__ == &#39;__main__&#39;:
    # mues = multiprocessing.Process(target= ness,args=(6,))
    mues = multiprocessing.Process(target=ness, kwargs=&#123;&quot;num&quot;:6&#125;)
    mues.start()

2：#利用类方法实现线程
import multiprocessing
import time
class nees():
    def __init__(self,name):
        super(nees, self).__init__()
        self.name = name
    def num(self):
        for i in range(self.name):
            time.sleep(1)
            print(&quot;这个是一个子进程&quot;)
if __name__ == &#39;__main__&#39;:
    num_process = multiprocessing.Process(target=nees)
    A=nees(3)
    A.num()
</code></pre>
<p>：线程资源竞争问题：</p>
<p>1：100万次加法，线程1和线程2谁先执行完</p>
<p>2：线程1计算的结果一定比线程2小吗？</p>
<p>3：某个线程计算的结果有没有可能小于100万？为什么：</p>
<p>​            1：不一定谁先执行完，因为线程是由cpu进行调度的，没有执行顺序那个先执行完都是不一定的</p>
<p>​            2：不一定，因为没办法知道那个线程能先执行完，所有没有办法知道执行的时间，没有办法知道执行的大小</p>
<p>​            3：有的，因为多线程共享全局变量，再赋予全局变量的时候，线程一和线程二计算的先后没有办法确定下来，当线程一计算的多时，线程二计算的少时，线程一又把线程二中的值共享过来这时就不安之前的顺序的，会小于100万</p>
]]></content>
      <categories>
        <category>python高级</category>
      </categories>
      <tags>
        <tag>python高级</tag>
      </tags>
  </entry>
  <entry>
    <title>支持向量机SVM</title>
    <url>/2019/06/26/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/</url>
    <content><![CDATA[<h2 id="SVM：可以用于分类（二分类，多分类），也可以用于回归和异常检测值，检测"><a href="#SVM：可以用于分类（二分类，多分类），也可以用于回归和异常检测值，检测" class="headerlink" title="SVM：可以用于分类（二分类，多分类），也可以用于回归和异常检测值，检测"></a>SVM：可以用于分类（二分类，多分类），也可以用于回归和异常检测值，检测</h2><h4 id="支持向量机分类有三个方法：SVC，NuSVC，LinearSVC"><a href="#支持向量机分类有三个方法：SVC，NuSVC，LinearSVC" class="headerlink" title="支持向量机分类有三个方法：SVC，NuSVC，LinearSVC"></a>支持向量机分类有三个方法：SVC，NuSVC，LinearSVC</h4><h4 id="支持向量机回归的三个方法：SVR，NuSVR，LinearSVR"><a href="#支持向量机回归的三个方法：SVR，NuSVR，LinearSVR" class="headerlink" title="支持向量机回归的三个方法：SVR，NuSVR，LinearSVR"></a>支持向量机回归的三个方法：SVR，NuSVR，LinearSVR</h4><h4 id="支持向量机（SVM）：即寻找到一个超平面使样本分成两类，并且间隔最大。"><a href="#支持向量机（SVM）：即寻找到一个超平面使样本分成两类，并且间隔最大。" class="headerlink" title="支持向量机（SVM）：即寻找到一个超平面使样本分成两类，并且间隔最大。"></a>支持向量机（SVM）：<strong>即寻找到一个超平面使样本分成两类，并且间隔最大。</strong></h4><h3 id="作用：能够执行线性或非线性分类、回归，甚至是异常值检测任务，适用于中小型复杂数据集的分类。"><a href="#作用：能够执行线性或非线性分类、回归，甚至是异常值检测任务，适用于中小型复杂数据集的分类。" class="headerlink" title="作用：能够执行线性或非线性分类、回归，甚至是异常值检测任务，适用于中小型复杂数据集的分类。"></a>作用：能够执行线性或非线性分类、回归，甚至是异常值检测任务，适用于中小型复杂数据集的分类。</h3><h3 id="支持向量机作用：SVM就是试图分来的最佳位置，试图让两边的的间隙更大。"><a href="#支持向量机作用：SVM就是试图分来的最佳位置，试图让两边的的间隙更大。" class="headerlink" title="支持向量机作用：SVM就是试图分来的最佳位置，试图让两边的的间隙更大。"></a>支持向量机作用：<strong>SVM就是试图分来的最佳位置，试图让两边的的间隙更大。</strong></h3><ul>
<li>SVM的优点：<ul>
<li>在高维空间中非常高效；</li>
<li>即使在数据维度比样本数量大的情况下仍然有效；</li>
<li>在决策函数（称为支持向量）中使用训练集的子集,因此它也是高效利用内存的；</li>
<li>通用性：不同的核函数与特定的决策函数一一对应；</li>
</ul>
</li>
<li>SVM的缺点：<ul>
<li>如果特征数量比样本数量大得多，在选择核函数时要避免过拟合；</li>
<li>对缺失数据敏感;</li>
<li>对于核函数的高维映射解释力不强</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn import <strong>svm</strong></td>
<td>支持向量机</td>
</tr>
<tr>
<td>svm.SVC()</td>
<td>运用这个才能构建模型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="1：支持向量机的分类方法：SVC、NuSVC、LinearSVC"><a href="#1：支持向量机的分类方法：SVC、NuSVC、LinearSVC" class="headerlink" title="1：支持向量机的分类方法：SVC、NuSVC、LinearSVC"></a>1：支持向量机的分类方法：SVC、NuSVC、LinearSVC</h2><ul>
<li><h3 id="分类型：SVC，NuSVC、LinearSVC："><a href="#分类型：SVC，NuSVC、LinearSVC：" class="headerlink" title="分类型：SVC，NuSVC、LinearSVC："></a>分类型：SVC，NuSVC、LinearSVC：</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>class sklearn.<strong>svm.SVC</strong>(C=1.0, kernel=’rbf’, degree=3,coef0=0.0,random_state=None)</td>
<td><strong>C</strong>: 惩罚系数，用来控制损失函数的惩罚系数，类似于线性回归中的正则化系数。  C越大，相当于惩罚松弛变量，希望松弛变量接近0，即<strong>对误分类的惩罚增大</strong>，趋向于对训练集全分对的情况，这样会出现训练集测试时准确率很高，但泛化能力弱，容易导致过拟合。  C值小，<strong>对误分类的惩罚减小</strong>，容错能力增强，泛化能力较强，但也可能欠拟合。                                                                                               <strong>kernel</strong>: 算法中采用的核函数类型，核函数是用来将非线性问题转化为线性问题的一种方法。  参数选择有RBF, Linear, Poly, Sigmoid或者自定义一个核函数。  默认的是”RBF”，即径向基核，也就是高斯核函数； 而Linear指的是线性核函数， Poly指的是多项式核， Sigmoid指的是双曲正切函数tanh核；。                                                             <strong>degree:</strong>  当指定kernel为’poly’时，表示选择的多项式的最高次数，默认为三次多项式； 若指定kernel不是’poly’，则忽略，即该参数只对’poly’有用。  多项式核函数是将低维的输入空间映射到高维的特征空间。                             <strong>coef0:</strong> 核函数常数值(y=kx+b中的b值)，  只有‘poly’和‘sigmoid’核函数有，默认值是0。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>NuSVC</strong></td>
<td></td>
</tr>
<tr>
<td>class sklearn.<strong>svm.NuSVC</strong>(nu=0.5)</td>
<td><strong>nu：</strong> 训练误差部分的上限和支持向量部分的下限，取值在（0，1）之间，默认是0.5</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>确定要用线性分类就会用到：<strong>LinearSVC</strong></td>
<td></td>
</tr>
<tr>
<td>class sklearn.<strong>svm.LinearSVC</strong>(penalty=’l2’, loss=’squared_hinge’, dual=True, C=1.0)</td>
<td><strong>penalty：</strong>正则化参数，  L1和L2两种参数可选，仅LinearSVC有。                                                                           **loss:**损失函数，  有hinge和squared_hinge两种可选，前者又称L1损失，后者称为L2损失，默认是squared_hinge， 其中hinge是SVM的标准损失，squared_hinge是hinge的平方 ，优化的平滑一些       **dual:**是否转化为对偶问题求解，默认是True。                                                                             **C:**惩罚系数，  用来控制损失函数的惩罚系数，类似于线性回归中的正则化系数。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<p>程序流程：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/1.png' height=400px ></p>
<p>球—— <strong>「data」数据</strong></p>
<p>棍子—— <strong>「classifier」分类</strong></p>
<p>最大间隙——<strong>「optimization」最优化</strong></p>
<p>拍桌子——<strong>「kernelling」核方法</strong></p>
<p>纸——<strong>「hyperplane」超平面</strong></p>
<h3 id="1-13-硬间隔和软间隔：一个决定分对，一个可以有错误"><a href="#1-13-硬间隔和软间隔：一个决定分对，一个可以有错误" class="headerlink" title="1.13 硬间隔和软间隔：一个决定分对，一个可以有错误"></a>1.13 硬间隔和软间隔：一个决定分对，一个可以有错误</h3><ul>
<li><h5 id="硬间隔：严格地让所有实例都不在最大间隔之间，并且位于正确的一边，这就是硬间隔分类。"><a href="#硬间隔：严格地让所有实例都不在最大间隔之间，并且位于正确的一边，这就是硬间隔分类。" class="headerlink" title="硬间隔：严格地让所有实例都不在最大间隔之间，并且位于正确的一边，这就是硬间隔分类。"></a>硬间隔：严格地让所有实例都不在最大间隔之间，并且位于正确的一边，这就是硬间隔分类。</h5><ul>
<li>数据是线性的时候可以有效</li>
<li>特别受异常值影响</li>
</ul>
</li>
<li><p><strong>软间隔：目标是尽可能在保持最大间隔宽阔和限制间隔违例（即位于最大间隔之上，甚至在错误的一边的实例）之间找到良好的平衡</strong>，这就是软间隔分类，通过c值确定</p>
<ul>
<li><h4 id="C：惩罚因子：调节超平面宽度"><a href="#C：惩罚因子：调节超平面宽度" class="headerlink" title="C：惩罚因子：调节超平面宽度"></a>C：惩罚因子：调节超平面宽度</h4><ul>
<li>c值越小，间隔越大，反之，越大，间隔越小</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-1线性支持向量机公式："><a href="#2-1线性支持向量机公式：" class="headerlink" title="2.1线性支持向量机公式："></a>2.1线性支持向量机公式：</h3><h4 id="支持向量：在虚线上的点就是支持向量"><a href="#支持向量：在虚线上的点就是支持向量" class="headerlink" title="支持向量：在虚线上的点就是支持向量"></a>支持向量：在虚线上的点就是支持向量</h4><h4 id="超平面：的划分是被法向量（w）和位移（b）所确定：记者（w，b）"><a href="#超平面：的划分是被法向量（w）和位移（b）所确定：记者（w，b）" class="headerlink" title="超平面：的划分是被法向量（w）和位移（b）所确定：记者（w，b）"></a>超平面：的划分是被法向量（w）和位移（b）所确定：记者（w，b）</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/2.png' height=400px >

<ul>
<li><p>上面的公式x（为向量）</p>
</li>
<li><h4 id="超平面公式：线性可分训练集，间隔最大得到超平面通过这个式子求出w和b"><a href="#超平面公式：线性可分训练集，间隔最大得到超平面通过这个式子求出w和b" class="headerlink" title="超平面公式：线性可分训练集，间隔最大得到超平面通过这个式子求出w和b"></a><strong>超平面公式</strong>：线性可分训练集，间隔最大得到超平面<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/3.png' height=px >通过这个式子求出w和b</h4><ul>
<li>x：为样本</li>
<li>w：为法向量决定超平面的方向，</li>
<li>b：为位移项，决定了超平面和原点之间的距离。</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/4.png' height=px >这个核函数，核方法，这个可以从低维升到高维，达到分割的内容</li>
</ul>
</li>
<li><h4 id="分类的公式：这个进行分类，上面的-1，下面的1"><a href="#分类的公式：这个进行分类，上面的-1，下面的1" class="headerlink" title="分类的公式：这个进行分类，上面的-1，下面的1"></a><strong>分类的公式：</strong><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/5.png' height=px >这个进行分类，上面的-1，下面的1</h4><ul>
<li><strong>膜</strong>：x样本到超平面的距离：下面为计算公式<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/6.png' height=px ></li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/7.png' height=px ></li>
<li>目的：上式进行的判断：让-1的样本都在上边，1的样本都在下边</li>
<li><strong>上下样本画曲线的距离：</strong>：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/8.png' height=px >根据上式的yi等于1或-1，就形成这式的分子2</li>
</ul>
</li>
<li><h4 id="要找出最大间隔划分超平面：就是要满足下式的约束的参数w和b，使得γ最大"><a href="#要找出最大间隔划分超平面：就是要满足下式的约束的参数w和b，使得γ最大" class="headerlink" title="要找出最大间隔划分超平面：就是要满足下式的约束的参数w和b，使得γ最大"></a><strong>要找出最大间隔划分超平面</strong>：就是要满足下式的约束的参数w和b，使得γ最大<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/9.png' height=px ></h4><ul>
<li><strong>目标函数</strong>：上式相乘<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/10.png' height=px >永远大于1，<strong>变形为</strong><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/11.png' height=px >在这个式子大于等于1时能取到<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/12.png' height=px >最大，让这个式子得到了最大，就是要把分子最小，转化为<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/13.png' height=px >这是目标函数但是要被约束<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/14.png' height=px >这样就确定的下来了。</li>
</ul>
</li>
<li><h3 id="有了式求最小值再进行求出w，b数，就要用到拉格朗日和对偶问题："><a href="#有了式求最小值再进行求出w，b数，就要用到拉格朗日和对偶问题：" class="headerlink" title="有了式求最小值再进行求出w，b数，就要用到拉格朗日和对偶问题："></a>有了式求最小值再进行求出w，b数，就要用到拉格朗日和对偶问题：</h3><ul>
<li><strong>拉格朗日</strong>：就是把上面的目标函数和约束式进行组到一起形成拉格朗日<ul>
<li>就是形成<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/15.png' height=px ><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/16.png' height=px ></li>
<li>第一个减：为什么式减是因为求的式最小值，第二节式子最小值也就是0:因为它一直也是大于等于1的<ul>
<li>把第二的式子为极小中的极大问题，调用对偶来进行求解</li>
</ul>
</li>
<li><strong>对偶问题：</strong>就是一个转化问题，就是要把极大值里面的极小值等价为极小值里面的极大值</li>
<li>下面推到公式演算</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/17.png' height=px ><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/18.png' height=px >这是式子有两个约束的条件：等于0，和ai大于等于0</li>
<li>上式变成：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/19.png' height=px >与上式进行去负号就形成的极小值</li>
<li>求出式子α*代入计算w，b<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/20.png' height=px ><ul>
<li>求出超平面<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/21.png' height=px ></li>
<li>求得分类决策函数：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/22.png' height=px ></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="举个例子："><a href="#举个例子：" class="headerlink" title="举个例子："></a>举个例子：</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/23.png' height=px >

<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/24.png' height=px >



<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/25.png' height=px >

<p>![1614779383937]<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/26.png' height=px ></p>
<h3 id="支持向量机损失函数"><a href="#支持向量机损失函数" class="headerlink" title="支持向量机损失函数"></a>支持向量机损失函数</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/27.png' height=px >

<ul>
<li><p><strong>0，1损失</strong>：分对了不管多近都是正确的，分错了不管多近就是错误</p>
</li>
<li><p><strong>主要为：蓝色：SVM Hinge损失函数</strong>：落在y=1时：误差为0，落在y=0上误差为1，落在上面为负时0.5，误差为1.5</p>
</li>
<li><p><strong>红色：Logistic损失函数</strong>别人家的孩子：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/28.png' height=px >yi=0损失为1，损失过了（0,1）点</p>
<ul>
<li>让它越来越好，泛化性就不好了，形成了过拟合、</li>
</ul>
<h2 id="3-0：核函数：是将原始输入空间映射到新的特征空间，从而，使得原本线性不可分的样本可能在核空间可分"><a href="#3-0：核函数：是将原始输入空间映射到新的特征空间，从而，使得原本线性不可分的样本可能在核空间可分" class="headerlink" title="3.0：核函数：是将原始输入空间映射到新的特征空间，从而，使得原本线性不可分的样本可能在核空间可分"></a>3.0：核函数：是将原始输入空间映射到新的特征空间，从而，使得原本线性不可分的样本可能在核空间可分</h2></li>
</ul>
<p>核函数：把低维的数据映射到高维中把样本分割出来</p>
<p>核函数作用：一个从低维空间到高维空间的映射，这种映射可以把低维空间中线性不可分的两类点变成线性可分的。</p>
<p>核函数的转变</p>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/29.png' height=px >

<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/30.png' height=px >

<h3 id="3-1常见的核函数："><a href="#3-1常见的核函数：" class="headerlink" title="3.1常见的核函数："></a>3.1常见的核函数：</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/31.png' height=px >

<h4 id="3-12：线性核和多项式核："><a href="#3-12：线性核和多项式核：" class="headerlink" title="3.12：线性核和多项式核："></a>3.12：线性核和多项式核：</h4><h4 id="样本点就是支持向量点就是虚线上的点，这里的该点是虚线外的点"><a href="#样本点就是支持向量点就是虚线上的点，这里的该点是虚线外的点" class="headerlink" title="样本点就是支持向量点就是虚线上的点，这里的该点是虚线外的点"></a>样本点就是支持向量点就是虚线上的点，这里的该点是虚线外的点</h4><p>找最大的距离!<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/32.png' height=px >)</p>
<h4 id=""><a href="#" class="headerlink" title=""></a><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BASVM/33.png' height=px ></h4><ul>
<li>这两种核的作用也是首先在属性空间中找到一些点，把这些点当做base，核函数的作用就是找与该点距离和角度满足某种关系的样本点。</li>
<li>样本点与该点的夹角近乎垂直时，欧式长度必须非常长才能保证满足线性核函数大于0，当样本点与base点的方向相同时，长度就不必很长；而当方向相反时，核函数值就是负的，被判为反类。即，它在空间上划分出一个梭形，按照梭形来进行正反类划分</li>
</ul>
<h3 id="3-13：最常用RBF核：RBF核参数多，分类结果非常依赖于参数，需要交叉验证或网格搜索最佳参数，比较耗时；"><a href="#3-13：最常用RBF核：RBF核参数多，分类结果非常依赖于参数，需要交叉验证或网格搜索最佳参数，比较耗时；" class="headerlink" title="3.13：最常用RBF核：RBF核参数多，分类结果非常依赖于参数，需要交叉验证或网格搜索最佳参数，比较耗时；"></a>3.13：最常用RBF核：RBF核参数多，分类结果非常依赖于参数，需要交叉验证或网格搜索最佳参数，比较耗时；</h3><ul>
<li>高斯核函数就是在属性空间中找到一些点，这些点可以是也可以不是样本点，把这些点当做base，以这些base为圆心向外扩展，扩展半径即为带宽，即可划分数据。</li>
<li>换句话说，在属性空间中找到一些超圆，用这些超圆来判定正反类。</li>
</ul>
<h4 id="3-14：sigmoid核："><a href="#3-14：sigmoid核：" class="headerlink" title="3.14：sigmoid核："></a>3.14：sigmoid核：</h4><ul>
<li>同样地是定义一些base，</li>
<li>核函数就是将线性核函数经过一个tanh函数进行处理，把值域限制在了-1到1上。</li>
</ul>
<p>总之，都是在定义距离，大于该距离，判为正，小于该距离，判为负。至于选择哪一种核函数，要根据具体的样本分布情况来确定。</p>
<h4 id="核函数的应用"><a href="#核函数的应用" class="headerlink" title="核函数的应用"></a>核函数的应用</h4><table>
<thead>
<tr>
<th></th>
<th>特征数量少</th>
<th>特征数一般</th>
<th><strong>特征数量大</strong></th>
</tr>
</thead>
<tbody><tr>
<td>**样本少 **</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>样本一般</strong></td>
<td>选用RBF核；</td>
<td></td>
<td>线性可分，这时选用LR或者线性核Linear；</td>
</tr>
<tr>
<td><strong>样本多</strong></td>
<td>手动添加一些特征，使得线性可分，然后选用LR或者线性核Linear；</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="4：SVM回归：就是让更多的点落在间隔之间：是让尽可能多的实例位于预测线上，同时限制间隔违例"><a href="#4：SVM回归：就是让更多的点落在间隔之间：是让尽可能多的实例位于预测线上，同时限制间隔违例" class="headerlink" title="4：SVM回归：就是让更多的点落在间隔之间：是让尽可能多的实例位于预测线上，同时限制间隔违例"></a>4：SVM回归：就是让更多的点落在间隔之间：是让尽可能多的实例位于预测线上，同时限制间隔违例</h2><p>线距的宽度由超参数ε控制：这个值越大就越宽，越小就越窄</p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>朴素贝叶斯算法，拉普拉斯平滑</title>
    <url>/2020/01/04/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95%EF%BC%8C%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%B9%B3%E6%BB%91/</url>
    <content><![CDATA[<h2 id="朴素贝叶斯算法：通过概率判断属于哪个类别"><a href="#朴素贝叶斯算法：通过概率判断属于哪个类别" class="headerlink" title="朴素贝叶斯算法：通过概率判断属于哪个类别"></a>朴素贝叶斯算法：通过概率判断属于哪个类别</h2><h4 id="朴素贝叶斯：是生成式模型，逻辑回归是判别模型"><a href="#朴素贝叶斯：是生成式模型，逻辑回归是判别模型" class="headerlink" title="朴素贝叶斯：是生成式模型，逻辑回归是判别模型"></a>朴素贝叶斯：是生成式模型，逻辑回归是判别模型</h4><h4 id="朴素贝叶斯适用于数据集少的情景"><a href="#朴素贝叶斯适用于数据集少的情景" class="headerlink" title="朴素贝叶斯适用于数据集少的情景"></a>朴素贝叶斯适用于数据集少的情景</h4><h4 id="1-2：联合概率，条件概率与相互独立"><a href="#1-2：联合概率，条件概率与相互独立" class="headerlink" title="1.2：联合概率，条件概率与相互独立"></a>1.2：联合概率，条件概率与相互独立</h4><ul>
<li>联合概率：包含多个条件，且所有相同成立的概率：记作：P(A,B)</li>
<li>条件概率：就是事件A在另外一个事件B已经发生条件下的发生概率记作：P(A|B)</li>
<li>相互独立：如果P(A, B) = P(A)P(B)，则称事件A与事件B相互独立。</li>
<li>朴素贝叶斯，简单理解，就是<strong>假定了特征与特征之间相互独立的贝叶斯公式</strong>。</li>
<li>也就是说，朴素贝叶斯，<strong>之所以朴素，就在于假定了特征与特征相互独立。</strong></li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.naive_bayes.<strong>MultinomialNB</strong>(alpha = 1.0)</td>
<td><strong>朴素贝叶斯分类</strong>：                                                    alpha：拉普拉斯平滑系数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="1-31：如果样本过少的话，没有取到值有可能会有数值为0，可以用拉普拉斯平滑系数解决"><a href="#1-31：如果样本过少的话，没有取到值有可能会有数值为0，可以用拉普拉斯平滑系数解决" class="headerlink" title="1.31：如果样本过少的话，没有取到值有可能会有数值为0，可以用拉普拉斯平滑系数解决"></a>1.31：如果样本过少的话，没有取到值有可能会有数值为0，可以用拉普拉斯平滑系数解决</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%AE%97%E6%B3%95.png' height=px >



<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%85%AC%E5%BC%8F.png' height=px >

<img src='https://boes.oss-cn-beijing.aliyuncs.com/1614756866727.png' height=px >

<h3 id="1-32：如果运用的是运用的数据类型的案例：计算测试属于哪个类别"><a href="#1-32：如果运用的是运用的数据类型的案例：计算测试属于哪个类别" class="headerlink" title="1.32：如果运用的是运用的数据类型的案例：计算测试属于哪个类别"></a>1.32：如果运用的是运用的数据类型的案例：计算测试属于哪个类别</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%AE%A1%E7%AE%97%E6%AD%A5%E9%AA%A4.png' height=px >



<h3 id="1-4：拉普拉斯平滑系数：系数加上1"><a href="#1-4：拉普拉斯平滑系数：系数加上1" class="headerlink" title="1.4：拉普拉斯平滑系数：系数加上1"></a>1.4：拉普拉斯平滑系数：系数加上1</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%B9%B3%E6%BB%91%E5%85%AC%E5%BC%8F.png' height=px >

<h2 id="朴素贝叶斯优缺点"><a href="#朴素贝叶斯优缺点" class="headerlink" title="朴素贝叶斯优缺点"></a>朴素贝叶斯优缺点</h2><ul>
<li>优点：<ul>
<li>朴素贝叶斯模型发源于古典数学理论，<strong>有稳定的分类效率</strong></li>
<li>对<strong>缺失数据不太敏感</strong>，算法也比较简单，<strong>常用于文本分类</strong></li>
<li>分类准确度高，速度快</li>
</ul>
</li>
<li>缺点：<ul>
<li>由于使用了样本属性独立性的假设，所以<strong>如果特征属性有关联时其效果不好</strong></li>
<li>需要计算先验概率，而先验概率很多时候取决于假设，假设的模型可以有很多种，因此<strong>在某些时候会由于假设的先验模型的原因导致预测效果不佳</strong>；</li>
</ul>
</li>
</ul>
<h2 id="朴素贝叶斯与逻辑回归的区别？"><a href="#朴素贝叶斯与逻辑回归的区别？" class="headerlink" title="朴素贝叶斯与逻辑回归的区别？"></a><strong>朴素贝叶斯与逻辑回归的区别？</strong></h2><p>朴素贝叶斯是生成模型，</p>
<ul>
<li>根据已有样本进行贝叶斯估计学习出先验概率P(Y)和条件概率P(X|Y)，</li>
<li>进而求出联合分布概率P(XY),</li>
<li>最后利用贝叶斯定理求解P(Y|X)， </li>
</ul>
<p>而逻辑回归是判别模型，</p>
<ul>
<li>根据极大化对数似然函数直接求出条件概率P(Y|X)；</li>
</ul>
<p><strong>前者是生成式模型，后者是判别式模型</strong>，二者的区别就是生成式模型与判别式模型的区别。</p>
<ul>
<li>首先，Navie Bayes通过已知样本求得先验概率P(Y), 及条件概率P(X|Y), 对于给定的实例，计算联合概率，进而求出后验概率。也就是说，它尝试去找到底这个数据是怎么生成的（产生的），然后再进行分类。哪个类别最有可能产生这个信号，就属于那个类别。<ul>
<li>优点： 样本容量增加时，收敛更快；隐变量存在时也可适用。</li>
<li>缺点：时间长；需要样本多；浪费计算资源</li>
</ul>
</li>
<li>相比之下，Logistic回归不关心样本中类别的比例及类别下出现特征的概率，它直接给出预测模型的式子。设每个特征都有一个权重，训练样本数据更新权重w，得出最终表达式。</li>
</ul>
<img src='' height=px >]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>神经网络--猫狗分类</title>
    <url>/2020/02/10/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%8C%AB%E7%8B%97%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="读取猫狗的图片矩阵数据，自实现神经元神经网络进行二分类"><a href="#读取猫狗的图片矩阵数据，自实现神经元神经网络进行二分类" class="headerlink" title="读取猫狗的图片矩阵数据，自实现神经元神经网络进行二分类"></a>读取猫狗的图片矩阵数据，自实现神经元神经网络进行二分类</h2><p>1：读取数据集<br>2：实现前向传播与反向传播<br>3：模型预测函数实现</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> h5py<span class="token comment" spellcheck="true">#这个读取</span>


<span class="token keyword">def</span> <span class="token function">load_dataset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_dataset <span class="token operator">=</span> h5py<span class="token punctuation">.</span>File<span class="token punctuation">(</span><span class="token string">'datasets/train_catvnoncat.h5'</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#从datasets中读取，从训练和测试两个文件中</span>
    train_set_x_orig <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_dataset<span class="token punctuation">[</span><span class="token string">"train_set_x"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># your train set features</span>
    train_set_y_orig <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_dataset<span class="token punctuation">[</span><span class="token string">"train_set_y"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># your train set labels</span>

    test_dataset <span class="token operator">=</span> h5py<span class="token punctuation">.</span>File<span class="token punctuation">(</span><span class="token string">'datasets/test_catvnoncat.h5'</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>
    test_set_x_orig <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_dataset<span class="token punctuation">[</span><span class="token string">"test_set_x"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># your test set features</span>
    test_set_y_orig <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_dataset<span class="token punctuation">[</span><span class="token string">"test_set_y"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># your test set labels</span>

    classes <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_dataset<span class="token punctuation">[</span><span class="token string">"list_classes"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># the list of classes</span>
    <span class="token comment" spellcheck="true">#对应的类别分别通过下边返回了</span>

    train_set_y_orig <span class="token operator">=</span> train_set_y_orig<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> train_set_y_orig<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    test_set_y_orig <span class="token operator">=</span> test_set_y_orig<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> test_set_y_orig<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> train_set_x_orig<span class="token punctuation">,</span> train_set_y_orig<span class="token punctuation">,</span> test_set_x_orig<span class="token punctuation">,</span> test_set_y_orig<span class="token punctuation">,</span> classes
    
主体函数

导入相关包

<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> data <span class="token keyword">import</span> load_dataset<span class="token comment" spellcheck="true">#数据结构的包</span>

主体逻辑

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token comment" spellcheck="true"># 1、读取样本数据</span>
    train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">,</span> classes <span class="token operator">=</span> load_dataset<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true">#读出训练集，测试集和训练的类别</span>

<span class="token comment" spellcheck="true">#打印出形状</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集的样本数: "</span><span class="token punctuation">,</span> train_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集的样本数: "</span><span class="token punctuation">,</span> test_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train_x形状: "</span><span class="token punctuation">,</span> train_x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"train_y形状: "</span><span class="token punctuation">,</span> train_y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_x形状: "</span><span class="token punctuation">,</span> test_x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"test_x形状: "</span><span class="token punctuation">,</span> test_y<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>



    <span class="token comment" spellcheck="true"># 输入数据的形状修改以及归一化</span>
    train_x <span class="token operator">=</span> train_x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>train_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T
    test_x <span class="token operator">=</span> test_x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>test_x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T
    train_x <span class="token operator">=</span> train_x <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>
    test_x <span class="token operator">=</span> test_x <span class="token operator">/</span> <span class="token number">255</span><span class="token punctuation">.</span>



    <span class="token comment" spellcheck="true"># 2、模型训练以及预测，封装到model的中</span>
    d <span class="token operator">=</span> model<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span> train_y<span class="token punctuation">,</span> test_x<span class="token punctuation">,</span> test_y<span class="token punctuation">,</span> num_iterations<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#训练和测试的数据集还有迭代的步骤步数还有学习率</span>



<span class="token number">2</span>、模型预测函数实现

模型函数

<span class="token keyword">def</span> <span class="token function">model</span><span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> Y_test<span class="token punctuation">,</span> num_iterations<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    """</span>
<span class="token comment" spellcheck="true">#先初始模型的参数，初始化单个的神经元一个逻辑回归,wb是某个神经元的参数</span>
    <span class="token comment" spellcheck="true"># 初始化参数</span>
    w<span class="token punctuation">,</span> b <span class="token operator">=</span> initialize_with_zeros<span class="token punctuation">(</span>X_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#下面进行优化通过optimize去实现模型的整个梯度下降的过程，每一次更新都要通过optimize函数去做</span>
<span class="token comment" spellcheck="true">#模型训练得出来的都是参数，损失的列表，每一次更新损失降了多少个，驯良的结果返回出来</span>
    <span class="token comment" spellcheck="true"># 梯度下降</span>
    <span class="token comment" spellcheck="true"># params:更新后的网络参数</span>
    <span class="token comment" spellcheck="true"># grads:最后一次梯度</span>
    <span class="token comment" spellcheck="true"># costs:每次更新的损失列表</span>
    params<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> costs <span class="token operator">=</span> optimize<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> Y_train<span class="token punctuation">,</span> num_iterations<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#参数，每一次的梯度，损失</span>

    <span class="token comment" spellcheck="true"># 获取训练的参数</span>
    <span class="token comment" spellcheck="true"># 预测结果</span>
    w <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">]</span>
    b <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true">#用你输出的进行预测</span>
    <span class="token comment" spellcheck="true">#用你测试的进行预测得到测试集的效果</span>
    Y_prediction_train <span class="token operator">=</span> predict<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X_train<span class="token punctuation">)</span>
    Y_prediction_test <span class="token operator">=</span> predict<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X_test<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#预测出来的都是0,1的结果</span>



    <span class="token comment" spellcheck="true"># 打印准确率</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练集准确率: &amp;#123;&amp;#125; "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>Y_prediction_train <span class="token operator">-</span> Y_train<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>#预测结果与真正的结果进行相减，abs：绝对值，mean：再求平均值，平均结果就是错误率，乘<span class="token number">100</span>，得到了多少，再用<span class="token number">100</span>减去就是准确率
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集准确率: &amp;#123;&amp;#125; "</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>Y_prediction_test <span class="token operator">-</span> Y_test<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>



    d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"costs": costs,</span>
         <span class="token string">"Y_prediction_test"</span><span class="token punctuation">:</span> Y_prediction_test<span class="token punctuation">,</span>
         <span class="token string">"Y_prediction_train"</span><span class="token punctuation">:</span> Y_prediction_train<span class="token punctuation">,</span>
         <span class="token string">"w"</span><span class="token punctuation">:</span> w<span class="token punctuation">,</span>
         <span class="token string">"b"</span><span class="token punctuation">:</span> b<span class="token punctuation">,</span>
         <span class="token string">"learning_rate"</span><span class="token punctuation">:</span> learning_rate<span class="token punctuation">,</span>
         <span class="token string">"num_iterations"</span><span class="token punctuation">:</span> num_iterations<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
 <span class="token comment" spellcheck="true">#把预测的结果损失，还有权重参数，学习率，迭代的次数，返回出去</span>


    <span class="token keyword">return</span> d







其中涉及两个函数一个是sigmoid另一个是初始化函数：

<span class="token keyword">def</span> <span class="token function">basic_sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    计算sigmoid函数
    """</span>

    s <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> s


<span class="token keyword">def</span> <span class="token function">initialize_with_zeros</span><span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    创建一个形状为 (shape, 1) 的w参数和b=0.
    return:w, b
    """</span>

    w <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>shape<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    b <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">return</span> w<span class="token punctuation">,</span> b





<span class="token number">3</span>、前向传播与反向传播实现

<span class="token keyword">def</span> <span class="token function">optimize</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> num_iterations<span class="token punctuation">,</span> learning_rate<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    参数：
    w:权重,b:偏置,X特征,Y目标值,num_iterations总迭代次数,learning_rate学习率
    Returns:
    params:更新后的参数字典
    grads:梯度
    costs:损失结果
    """</span>

    costs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>


<span class="token comment" spellcheck="true">#每一次循环多少次，步数的迭代，计算出每一次更新的我w，b</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num_iterations<span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token comment" spellcheck="true"># 梯度更新计算函数</span>
        grads<span class="token punctuation">,</span> cost <span class="token operator">=</span> propagate<span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 取出两个部分参数的梯度</span>
        dw <span class="token operator">=</span> grads<span class="token punctuation">[</span><span class="token string">'dw'</span><span class="token punctuation">]</span>
        db <span class="token operator">=</span> grads<span class="token punctuation">[</span><span class="token string">'db'</span><span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># 按照梯度下降公式去计算</span>
        w <span class="token operator">=</span> w <span class="token operator">-</span> learning_rate <span class="token operator">*</span> dw
        b <span class="token operator">=</span> b <span class="token operator">-</span> learning_rate <span class="token operator">*</span> db

        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            costs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cost<span class="token punctuation">)</span>
        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"损失结果 %i: %f"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

    params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"w": w,</span>
              <span class="token string">"b"</span><span class="token punctuation">:</span> b<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>

    grads <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"dw": dw,</span>
             <span class="token string">"db"</span><span class="token punctuation">:</span> db<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>
<span class="token comment" spellcheck="true">#更新出来的参数结果</span>



    <span class="token keyword">return</span> params<span class="token punctuation">,</span> grads<span class="token punctuation">,</span> costs

<span class="token keyword">def</span> <span class="token function">propagate</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#反向传播的过程</span>
    <span class="token triple-quoted-string string">"""
    参数：w,b,X,Y：网络参数和数据
    Return:
    损失cost、参数W的梯度dw、参数b的梯度db
    """</span>
    m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 前向传播，计算</span>
    <span class="token comment" spellcheck="true"># w (n,1), x (n, m)</span>
    A <span class="token operator">=</span> basic_sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">.</span>T<span class="token punctuation">,</span> X<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 计算损失</span>
    cost <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">/</span> m <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>Y <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>A<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> Y<span class="token punctuation">)</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> A<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 反向传播</span>
    dz <span class="token operator">=</span> A <span class="token operator">-</span> Y
    dw <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> m <span class="token operator">*</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> dz<span class="token punctuation">.</span>T<span class="token punctuation">)</span>
    db <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> m <span class="token operator">*</span> np<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>dz<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#这一次更新的梯度</span>
    grads <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"dw": dw,</span>
             <span class="token string">"db"</span><span class="token punctuation">:</span> db<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>

    <span class="token keyword">return</span> grads<span class="token punctuation">,</span> cost





预测函数为：

<span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> b<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    利用训练好的参数预测

    return：预测结果
    '''</span>

    m <span class="token operator">=</span> X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    Y_prediction <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>
    w <span class="token operator">=</span> w<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 计算结果</span>
    A <span class="token operator">=</span> basic_sigmoid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">.</span>T<span class="token punctuation">,</span> X<span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>A<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

        <span class="token keyword">if</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0.5</span><span class="token punctuation">:</span>
            Y_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            Y_prediction<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>

    <span class="token keyword">assert</span> <span class="token punctuation">(</span>Y_prediction<span class="token punctuation">.</span>shape <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> Y_prediction

运行结果显示：

训练集的样本数<span class="token punctuation">:</span>  <span class="token number">209</span>
测试集的样本数<span class="token punctuation">:</span>  <span class="token number">50</span>
train_x形状<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
train_y形状<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">)</span>
test_x形状<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
test_x形状<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>
损失结果 <span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0.693147</span>
<span class="token operator">-</span><span class="token number">0.000777511961722488</span>
损失结果 <span class="token number">100</span><span class="token punctuation">:</span> <span class="token number">0.584508</span>
<span class="token operator">-</span><span class="token number">0.004382762341768198</span>
损失结果 <span class="token number">200</span><span class="token punctuation">:</span> <span class="token number">0.466949</span>
<span class="token operator">-</span><span class="token number">0.006796745374030192</span>
损失结果 <span class="token number">300</span><span class="token punctuation">:</span> <span class="token number">0.376007</span>
<span class="token operator">-</span><span class="token number">0.008966216045043067</span>
损失结果 <span class="token number">400</span><span class="token punctuation">:</span> <span class="token number">0.331463</span>
<span class="token operator">-</span><span class="token number">0.010796335272035083</span>
损失结果 <span class="token number">500</span><span class="token punctuation">:</span> <span class="token number">0.303273</span>
<span class="token operator">-</span><span class="token number">0.012282447313396519</span>
损失结果 <span class="token number">600</span><span class="token punctuation">:</span> <span class="token number">0.279880</span>
<span class="token operator">-</span><span class="token number">0.013402386273819053</span>
损失结果 <span class="token number">700</span><span class="token punctuation">:</span> <span class="token number">0.260042</span>
<span class="token operator">-</span><span class="token number">0.014245091216970799</span>
损失结果 <span class="token number">800</span><span class="token punctuation">:</span> <span class="token number">0.242941</span>
<span class="token operator">-</span><span class="token number">0.014875420165524832</span>
损失结果 <span class="token number">900</span><span class="token punctuation">:</span> <span class="token number">0.228004</span>
<span class="token operator">-</span><span class="token number">0.015341288386626626</span>
损失结果 <span class="token number">1000</span><span class="token punctuation">:</span> <span class="token number">0.214820</span>
<span class="token operator">-</span><span class="token number">0.015678788375442378</span>
损失结果 <span class="token number">1100</span><span class="token punctuation">:</span> <span class="token number">0.203078</span>
<span class="token operator">-</span><span class="token number">0.015915536343924556</span>
损失结果 <span class="token number">1200</span><span class="token punctuation">:</span> <span class="token number">0.192544</span>
<span class="token operator">-</span><span class="token number">0.01607292624287493</span>
损失结果 <span class="token number">1300</span><span class="token punctuation">:</span> <span class="token number">0.183033</span>
<span class="token operator">-</span><span class="token number">0.016167692508505707</span>
损失结果 <span class="token number">1400</span><span class="token punctuation">:</span> <span class="token number">0.174399</span>
<span class="token operator">-</span><span class="token number">0.016213022073676534</span>
损失结果 <span class="token number">1500</span><span class="token punctuation">:</span> <span class="token number">0.166521</span>
<span class="token operator">-</span><span class="token number">0.016219364232163875</span>
损失结果 <span class="token number">1600</span><span class="token punctuation">:</span> <span class="token number">0.159305</span>
<span class="token operator">-</span><span class="token number">0.01619503271238927</span>
损失结果 <span class="token number">1700</span><span class="token punctuation">:</span> <span class="token number">0.152667</span>
<span class="token operator">-</span><span class="token number">0.016146661324349904</span>
损失结果 <span class="token number">1800</span><span class="token punctuation">:</span> <span class="token number">0.146542</span>
<span class="token operator">-</span><span class="token number">0.01607955397736277</span>
损失结果 <span class="token number">1900</span><span class="token punctuation">:</span> <span class="token number">0.140872</span>
<span class="token operator">-</span><span class="token number">0.015997956805040348</span>
训练集准确率<span class="token punctuation">:</span> <span class="token number">99.04306220095694</span> 
测试集准确率<span class="token punctuation">:</span> <span class="token number">70.0</span>
</code></pre>
]]></content>
      <categories>
        <category>神经网络案例</category>
      </categories>
      <tags>
        <tag>猫狗分类</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑回归</title>
    <url>/2019/07/04/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="1：逻辑回归：属于2分类模型"><a href="#1：逻辑回归：属于2分类模型" class="headerlink" title="1：逻辑回归：属于2分类模型"></a>1：逻辑回归：属于2分类模型</h2><h4 id="1-1：逻辑回归性质：通过属于某个类别的概率值判断是否属于某个类别，1位正例，0为反例"><a href="#1-1：逻辑回归性质：通过属于某个类别的概率值判断是否属于某个类别，1位正例，0为反例" class="headerlink" title="1.1：逻辑回归性质：通过属于某个类别的概率值判断是否属于某个类别，1位正例，0为反例"></a>1.1：逻辑回归性质：通过属于某个类别的概率值判断是否属于某个类别，1位正例，0为反例</h4><h3 id="似然损失的意义：通过对数似然损失来衡量来与真实是进行"><a href="#似然损失的意义：通过对数似然损失来衡量来与真实是进行" class="headerlink" title="似然损失的意义：通过对数似然损失来衡量来与真实是进行"></a>似然损失的意义：通过对数似然损失来衡量来与真实是进行</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.linear_model import  <strong>LogisticRegression</strong></td>
<td><strong>逻辑回归</strong></td>
</tr>
<tr>
<td><strong>.LogisticRegression</strong>(solver=’liblinear’, penalty=‘l2’, C = 1.0)</td>
<td><strong>solver</strong>：可选参数:{‘liblinear’, ‘sag’, ‘saga’,’newton-cg’, ‘lbfgs’}，                                        ●默认: ‘liblinear’；用于优化问题的算法。                                                   ●对于小数据集来说，“liblinear”是个不错的选择，而“sag”和’saga’                                                      ●对于大型数据集会更快。 对于多类问题，只有’newton-cg’， ‘sag’， ‘saga’和’lbfgs’可以处理多项损失;“liblinear”仅限于“one-versus-rest”分类。                                                                                          <strong>penalty</strong>：正则化的种类                                                                                              <strong>C</strong>：正则化力度</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><strong>LogisticRegression方法相当于 SGDClassifier(loss=”log”, penalty=” “),SGDClassifier实现了一个普通的随机梯度下降学习。而使用LogisticRegression(实现了SAG)</strong></p>
<h4 id="1-21：输入公式："><a href="#1-21：输入公式：" class="headerlink" title="1.21：输入公式："></a>1.21：输入公式：</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/9.png' height=px ></h4><h4 id="1-22：输出：基于阈值进行判断，进行分类"><a href="#1-22：输出：基于阈值进行判断，进行分类" class="headerlink" title="1.22：输出：基于阈值进行判断，进行分类"></a>1.22：输出：基于阈值进行判断，进行分类</h4><h4 id="1-3：激活函数：把上面的公式通过导入激活函数中把数据变成了（0-1）之前的数据形成，大于0-5判断为A类，小于0-5为B类），以0-5为阈值"><a href="#1-3：激活函数：把上面的公式通过导入激活函数中把数据变成了（0-1）之前的数据形成，大于0-5判断为A类，小于0-5为B类），以0-5为阈值" class="headerlink" title="1.3：激活函数：把上面的公式通过导入激活函数中把数据变成了（0,1）之前的数据形成，大于0.5判断为A类，小于0.5为B类），以0.5为阈值"></a>1.3：激活函数：把上面的公式通过导入激活函数中把数据变成了（0,1）之前的数据形成，大于0.5判断为A类，小于0.5为B类），以0.5为阈值</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/1.png' height=px >

<h4 id="1-4：似然损失："><a href="#1-4：似然损失：" class="headerlink" title="1.4：似然损失："></a>1.4：似然损失：</h4><ul>
<li><p>似然损失的公式：就是用预测值经过激活函数变成（0，1）范围值，当真实函数为0时那么综合函数中的前半部分为0，只计算后半部分中的值，如果为1时，后半部分也为0了，只计算前半部分中的综合值<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/2.png' height=px ></p>
</li>
<li><p>无论何时，我们都希望<strong>损失函数值，越小越好</strong></p>
<p>分情况讨论，对应的损失函数值：</p>
<ul>
<li><strong>当y（真实值）=1时，我们希望hθ(x)（预测值）值越大越好；</strong></li>
<li><strong>当y=0（真实值）时，我们希望hθ(x)（预测值）值越小越好</strong></li>
</ul>
</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/3.png' height=px ></li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/4.png' height=px ></li>
<li><p>，<strong>提升原本属于1类别的概率是1类别的提升log（）里面的数值，降低原本是0类别的概率，减少log（）里面的数值。</strong></p>
</li>
</ul>
<h2 id="2：类别不平衡数据集"><a href="#2：类别不平衡数据集" class="headerlink" title="2：类别不平衡数据集"></a>2：类别不平衡数据集</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td><strong>生成不均衡样本数据集</strong></td>
<td></td>
</tr>
<tr>
<td>from sklearn.datasets import **make_classification **</td>
<td><strong>生成不均衡样本数据集</strong></td>
</tr>
<tr>
<td><strong>make_classification</strong>()</td>
<td>X, y = <strong>make_classification</strong>(                                               **n_samples=**数值： 生成多少个数据                                                   <strong>n_features=数值</strong>：生成多少和特征数  # 特征个数= n_informative（） + n_redundant + n_repeated                                                                                      n_informative=2， 多信息特征的个数                                                                     <strong>n_redundant=0</strong>：冗余信息，informative特征的随机线性组合                                                                             <strong>n_repeated=0</strong>,  # 重复信息，随机提取n_informative和n_redundant 特征                                                              **n_classes=**数值： 分类类别数量                                                                                <strong>n_clusters_per_class=1</strong>,  # 某一个类别是由几个cluster构成的                                                                                          <strong>weights=</strong>[0.01, 0.05, 0.94]：列表类型，权重比 相加等于1，这个是3个类别，里面的数值是每一个类别的占比多少                                                                                 <strong>random_state=0</strong>)</td>
</tr>
<tr>
<td><strong>查看数据样本</strong></td>
<td></td>
</tr>
<tr>
<td>from collections import <strong>Counter</strong></td>
<td>Counter(y)：查看数据样本</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>解决样本不均衡问题</strong></td>
<td><strong>过采样方法</strong>，<strong>欠采样方法</strong></td>
</tr>
<tr>
<td><strong>过采样方法</strong></td>
<td></td>
</tr>
<tr>
<td>from imblearn.over_sampling import <strong>RandomOverSampler</strong></td>
<td><strong>过采样方法</strong></td>
</tr>
<tr>
<td>用法：<strong>RandomOverSampler</strong>(random_state=0)</td>
<td></td>
</tr>
<tr>
<td><strong>过采样代表性算法-SMOTE</strong></td>
<td>随机过采样方法</td>
</tr>
<tr>
<td>from imblearn.over_sampling import <strong>SMOTE</strong></td>
<td>使用<strong>过采样代表性算法-SMOTE</strong>用k近邻中的线随机点</td>
</tr>
<tr>
<td>用法：<strong>SMOTE</strong>().fit_resample(X, y)</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>欠采样方法</strong></td>
<td></td>
</tr>
<tr>
<td>from imblearn.under_sampling import <strong>RandomUnderSampler</strong></td>
<td>去<strong>除一些多数类中的样本使得正例、反例数目接近，然后再进行学习。</strong></td>
</tr>
<tr>
<td>用法：<strong>RandomUnderSampler</strong>(random_state=0)</td>
<td></td>
</tr>
</tbody></table>
<h3 id="2-1：解决办法"><a href="#2-1：解决办法" class="headerlink" title="2.1：解决办法"></a>2.1：解决办法</h3><ul>
<li><h3 id="过采样方法"><a href="#过采样方法" class="headerlink" title="过采样方法"></a>过采样方法</h3><ul>
<li>增加数量较少那一类样本的数量，使得正负样本比例均衡。</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/6.png' height=px ></li>
<li><strong>缺点</strong>：<ul>
<li>对于随机过采样，由于需要对少数类样本进行复制来扩大数据集，<strong>造成模型训练复杂度加大</strong>。</li>
<li>容易<strong>造成模型的过拟合问题</strong>，因为随机过采样是简单的对初始样本进行复制采样，这就使得学习器学得的规则过于具体化，不利于学习器的泛化性能，造成过拟合问题。</li>
<li><strong>解决随机过采样中造成模型过拟合问题</strong>:<ul>
<li>过采样法代表性的算法<strong>SMOTE算法</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><strong>SMOTE算法是为了解决随机过采样造成的拟合</strong>：和最近邻中随机一个点进行连线，在连线上在随机选一个点进行提取形成少数类样</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/7.png' height=px ></li>
</ul>
</li>
<li><p><strong>欠采样方法</strong>：去<strong>除一些多数类中的样本使得正例、反例数目接近，然后再进行学习。</strong></p>
<ul>
<li>减少数量较多那一类样本的数量，使得正负样本比例均衡。</li>
</ul>
</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/8.png' height=px >

<ul>
<li><strong>缺点</strong>：<ul>
<li><strong>多数类样本删除有可能会导致分类器丢失有关多数类的重要信息。</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3：分类评估方法："><a href="#3：分类评估方法：" class="headerlink" title="3：分类评估方法："></a>3：分类评估方法：</h2><p><strong>准确率</strong>：是指有在所有的判断中有多少判断正确的，即把正的判断为正的，还有把负的判断为负的；总共有 TP + FN + FP + TN 个，所以准确率：Acc = (TP+TN) / (TP+TN+FN+FP)</p>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/5.png' height=px >

<p><strong>准确率</strong>：                                                           （TP+TN）/  (TP+FN+FP+TN),全部的加起来，与预测对的占比了多少</p>
<p><strong>精确率</strong>   准不准：                                               (TP)  /  (TP+FP),   真正例与伪正例占比</p>
<p><strong>召回率</strong>（TPR）:预测对的曲线，全不全：      （TP）/  (TP+FN)  真实值里面预测的占比</p>
<p>FPR <strong>预测错的曲线</strong>                                                FP / (FP + TN):所有真实类别为0的样本中，预测类别为1的比例</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from  sklearn.metrics  import    <strong>classification_report</strong></td>
<td><strong>精确率召回率等分类评估</strong></td>
</tr>
<tr>
<td>sklearn.metrics.<strong>classification_report</strong>(y_true, y_pred, labels=[数值，数值], target_names=（“名字1，名字2”） )</td>
<td><strong>精确率召回率等指标</strong>                                                                             <strong>y_true</strong>：真实目标值                                                                             <strong>y_pred</strong>：估计器预测目标值                                                             <strong>labels</strong>:指定类别对应的数字,目标值里面对应的类别划分 ： 数值（）对应的名字1，数值（）对应的名字2.                                                         <strong>target_names</strong>：目标类别名称，如良品和不良品                                                       <strong>return</strong>：每个类别精确率与召回率</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="AUC评估只能评估二分类问题，遇到不均衡的数据时用这种检测更好："><a href="#AUC评估只能评估二分类问题，遇到不均衡的数据时用这种检测更好：" class="headerlink" title="AUC评估只能评估二分类问题，遇到不均衡的数据时用这种检测更好："></a>AUC评估只能评估二分类问题，遇到不均衡的数据时用这种检测更好：</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.metrics import <strong>roc_auc_score</strong></td>
<td><strong>AUC</strong>评估：5左右的就是瞎说，没有什么</td>
</tr>
<tr>
<td>klearn.metrics.<strong>roc_auc_score</strong>(y_true, y_score)</td>
<td>计算ROC曲线面积，即AUC值                                                                                y_true：每个样本的真实类别，必须为0(反例),1(正例)标记                                                                            y_score：预测得分，可以是正类的估计概率、置信值或者分类器方法的返回值</td>
</tr>
<tr>
<td>y_test = np.where(y_test &gt; 2.5, 1, 0)  print(“AUC指标：”, <strong>roc_auc_score</strong>(y_test,预测值)</td>
<td>先进行分类的转换，转换值与预测值形成AUC指标</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>聚类算法,降维</title>
    <url>/2020/10/04/%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95-%E9%99%8D%E7%BB%B4/</url>
    <content><![CDATA[<h2 id="聚类算法：使用不同的聚类准则，产生的聚类结果不同"><a href="#聚类算法：使用不同的聚类准则，产生的聚类结果不同" class="headerlink" title="聚类算法：使用不同的聚类准则，产生的聚类结果不同"></a>聚类算法：使用不同的聚类准则，产生的聚类结果不同</h2><h3 id="概念：一种典型的无监督算法，主要用于将相似的样本自动归到一个类别中。"><a href="#概念：一种典型的无监督算法，主要用于将相似的样本自动归到一个类别中。" class="headerlink" title="概念：一种典型的无监督算法，主要用于将相似的样本自动归到一个类别中。"></a>概念：一种典型的无监督算法，主要用于将相似的样本自动归到一个类别中。</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.datasets.samples_generator import <strong>make_blobs</strong></td>
<td>**生成的聚类的数据集 **                                                                         n_samples:表示数据样本点个数,默认值100  n_features:表示数据的维度，默认值是2  centers:产生数据的中心点，默认值3  cluster_std：数据集的标准差，浮点数或者浮点数序列，默认值1.0  center_box：中心确定之后的数据边界，默认值(-10.0, 10.0)  shuffle ：洗乱，默认值是True  random_state:官网解释是随机生成器的种子</td>
</tr>
<tr>
<td>from sklearn.metrics import <strong>calinski_harabaz_score</strong></td>
<td><strong>评价聚类效果</strong></td>
</tr>
<tr>
<td>sklearn.cluster.KMeans(n_clusters=8)</td>
<td><strong>聚类算法模型</strong>：参数:                                                                                                             n_clusters:开始的聚类中心数量  整型，缺省值=8，生成的聚类数，即产生的质心（centroids）数。</td>
</tr>
<tr>
<td>estimator.fit_predict(x)</td>
<td>计算聚类中心并预测每个样本属于哪个类别,相当于先调用fit(x),然后再调用predict(x)</td>
</tr>
<tr>
<td>estimator.predict(x)</td>
<td>输出的预测值</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="1-2：k-means："><a href="#1-2：k-means：" class="headerlink" title="1.2：k-means："></a><strong>1.2：k-means：</strong></h3><ul>
<li><h4 id="K-初始中心点个数（计划聚类数）"><a href="#K-初始中心点个数（计划聚类数）" class="headerlink" title="K : 初始中心点个数（计划聚类数）"></a>K : 初始中心点个数（计划聚类数）</h4></li>
<li><h4 id="means：求中心点到其他数据点距离的平均值"><a href="#means：求中心点到其他数据点距离的平均值" class="headerlink" title="means：求中心点到其他数据点距离的平均值"></a>means：求中心点到其他数据点距离的平均值</h4></li>
</ul>
<h3 id="1-3：模型评估："><a href="#1-3：模型评估：" class="headerlink" title="1.3：模型评估："></a>1.3：模型评估：</h3><h4 id="误差平方和：真实值和预测值的差，再进行平方，一起相加"><a href="#误差平方和：真实值和预测值的差，再进行平方，一起相加" class="headerlink" title="误差平方和：真实值和预测值的差，再进行平方，一起相加"></a>误差平方和：真实值和预测值的差，再进行平方，一起相加</h4><ul>
<li><h4 id="SSE：误差平方和的值越小越好："><a href="#SSE：误差平方和的值越小越好：" class="headerlink" title="SSE：误差平方和的值越小越好："></a>SSE：误差平方和的值越小越好：</h4></li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B1%BB/1.png' height=px ></li>
<li><p>ci：不同的族，p真实值：所有值的均值，</p>
</li>
<li><p>如果质心的初始值选择不好，sse只会达到局部最优解</p>
</li>
</ul>
<h3 id="2-1肘”方法-Elbow-method-—-K值确定：下降率突然变缓时即认为是最佳的k值。"><a href="#2-1肘”方法-Elbow-method-—-K值确定：下降率突然变缓时即认为是最佳的k值。" class="headerlink" title="2.1肘”方法 (Elbow method) — K值确定：下降率突然变缓时即认为是最佳的k值。"></a><strong>2.1肘”方法 (Elbow method)</strong> — K值确定：<strong>下降率突然变缓时即认为是最佳的k值</strong>。</h3><h4 id="在决定什么时候停止训练时，肘形判据同样有效，数据通常有更多的噪音，在增加分类无法带来更多回报时，我们停止增加类别。"><a href="#在决定什么时候停止训练时，肘形判据同样有效，数据通常有更多的噪音，在增加分类无法带来更多回报时，我们停止增加类别。" class="headerlink" title="在决定什么时候停止训练时，肘形判据同样有效，数据通常有更多的噪音，在增加分类无法带来更多回报时，我们停止增加类别。"></a>在决定什么时候停止训练时，肘形判据同样有效，数据通常有更多的噪音，在<strong>增加分类无法带来更多回报时，我们停止增加类别</strong>。</h4><h2 id="3-1：轮廓系数法：-作用：内部距离最小化，外部距离最大化"><a href="#3-1：轮廓系数法：-作用：内部距离最小化，外部距离最大化" class="headerlink" title="3.1：轮廓系数法：   作用：内部距离最小化，外部距离最大化"></a>3.1：轮廓系数法：   作用：内部距离最小化，外部距离最大化</h2><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B1%BB/2.png' height=px >

<p>平均轮廓系数的取值范围为[-1,1]，系数越大，聚类效果越好，但是合理的系数也好，</p>
<p>簇内样本的距离越近，簇间样本距离越远</p>
<h2 id="4-1：CH系数：类别内部数据的距离平方和越小越好，类别之间的距离平方和越大越好"><a href="#4-1：CH系数：类别内部数据的距离平方和越小越好，类别之间的距离平方和越大越好" class="headerlink" title="4.1：CH系数：类别内部数据的距离平方和越小越好，类别之间的距离平方和越大越好"></a>4.1：CH系数：类别内部数据的距离平方和越小越好，类别之间的距离平方和越大越好</h2><p><strong>CH：用尽量少的类别聚类尽量多的样本，同时获得较好的聚类效果。</strong></p>
<hr>
<ul>
<li><h3 id="CH系数公式："><a href="#CH系数公式：" class="headerlink" title="CH系数公式："></a>CH系数公式：</h3><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B1%BB/3.png' height=px ></li>
</ul>
</li>
<li><p>矩阵的迹：矩阵的对角线可以表示一个物体的相似性，获取矩阵的迹，就可以表示这一块数据的最重要的特征了，这样就可以把很多无关紧要的数据删除掉，达到简化数据，提高处理速度。</p>
</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B1%BB/4.png' height=px ></li>
</ul>
<h2 id="5：聚类的算法的优化"><a href="#5：聚类的算法的优化" class="headerlink" title="5：聚类的算法的优化"></a>5：聚类的算法的优化</h2><h3 id="5-1：Canopy算法配合初始聚类：算法中-T1、T2的确定问题-，依旧可能落入局部最优解-，"><a href="#5-1：Canopy算法配合初始聚类：算法中-T1、T2的确定问题-，依旧可能落入局部最优解-，" class="headerlink" title="5.1：Canopy算法配合初始聚类：算法中 T1、T2的确定问题 ，依旧可能落入局部最优解 ，"></a>5.1：Canopy算法配合初始聚类：算法中 T1、T2的确定问题 ，依旧可能落入局部最优解 ，</h3><p>通过圆进行找到质心</p>
<ul>
<li><h3 id="Canopy粗聚类配合kmeans"><a href="#Canopy粗聚类配合kmeans" class="headerlink" title="Canopy粗聚类配合kmeans"></a>Canopy粗聚类配合kmeans</h3></li>
<li><p><strong>随机选取1个质心</strong>，以这个为质心进行画圆T1圆，T2圆，分别标注里面圆的颜色。</p>
</li>
<li><p>再选择质心点是<strong>尽可能的选择远一点的，在T1,T2圆外</strong>，<strong>半径</strong>是随机指定的，在这些之外再进行画标注颜色，重复进行，所有点包含进去才进行终止</p>
</li>
</ul>
<h3 id="5-2：K-means-：让选择的质心尽可能的分散"><a href="#5-2：K-means-：让选择的质心尽可能的分散" class="headerlink" title="5.2：K-means++：让选择的质心尽可能的分散"></a>5.2：K-means++：让选择的质心尽可能的分散</h3><p>通过距离找到质心</p>
<h3 id="5-3：二分k-means，所有点作为一个簇，选择能最大限度降低聚类代价函数（也就是误差平方和）的簇划分为两个簇。"><a href="#5-3：二分k-means，所有点作为一个簇，选择能最大限度降低聚类代价函数（也就是误差平方和）的簇划分为两个簇。" class="headerlink" title="5.3：二分k-means，所有点作为一个簇，选择能最大限度降低聚类代价函数（也就是误差平方和）的簇划分为两个簇。"></a>5.3：二分k-means，所有点作为一个簇，选择能最大限度降低聚类代价函数（也就是误差平方和）的簇划分为两个簇。</h3><p>想树的过程</p>
<ul>
<li>拆除SSE最大的簇</li>
</ul>
<h3 id="5-4：k-medoids：对异常值的处理很好，小样本起作用"><a href="#5-4：k-medoids：对异常值的处理很好，小样本起作用" class="headerlink" title="5.4：k-medoids：对异常值的处理很好，小样本起作用"></a>5.4：k-medoids：对异常值的处理很好，小样本起作用</h3><ul>
<li><strong>K-medoids中</strong>，将从当前cluster 中选取到其他所有（当前cluster中的）点的距离之和最小的点作为中心点。</li>
<li><strong>k-medoids</strong>只能对小样本起作用，样本大，速度就太慢了，当样本多的时候，少数几个噪音对k-means的质心影响也没有想象中的那么重，所以k-means的应用明显比k-medoids多。</li>
</ul>
<h2 id="进行了解"><a href="#进行了解" class="headerlink" title="进行了解"></a>进行了解</h2><h3 id="5-5：Kernel-k-means：映射到高维空间"><a href="#5-5：Kernel-k-means：映射到高维空间" class="headerlink" title="5.5：Kernel k-means：映射到高维空间"></a>5.5：Kernel k-means：映射到高维空间</h3><h3 id="就是将每个样本进行一个投射到高维空间的处理，然后再将处理后的数据使用普通的k-means算法思想进行聚类。"><a href="#就是将每个样本进行一个投射到高维空间的处理，然后再将处理后的数据使用普通的k-means算法思想进行聚类。" class="headerlink" title="就是将每个样本进行一个投射到高维空间的处理，然后再将处理后的数据使用普通的k-means算法思想进行聚类。"></a>就是将每个样本进行一个投射到高维空间的处理，然后再将处理后的数据使用普通的k-means算法思想进行聚类。</h3><h3 id="5-6：ISODATA：动态聚类，可以更改K值大小"><a href="#5-6：ISODATA：动态聚类，可以更改K值大小" class="headerlink" title="5.6：ISODATA：动态聚类，可以更改K值大小"></a>5.6：ISODATA：动态聚类，可以更改K值大小</h3><ul>
<li><p>对类别数会进行合并，分裂，</p>
<p>“合并”：（当聚类结果某一类中样本数太少，或两个类间的距离太近时）</p>
<p>“分裂”：（当聚类结果中某一类的类内方差太大，将该类进行分裂）</p>
</li>
</ul>
<h3 id="5-7：Mini-Batch-K-Means：大数据集分批聚类"><a href="#5-7：Mini-Batch-K-Means：大数据集分批聚类" class="headerlink" title="5.7：Mini Batch K-Means：大数据集分批聚类"></a>5.7：Mini Batch K-Means：大数据集分批聚类</h3><p>也是可以落到局部最优解的，但是效率是最快的</p>
<ul>
<li><p>(1)从数据集中随机抽取一些数据形成小批量，把他们分配给最近的质心</p>
<p>(2)更新质心</p>
<p>​        与Kmeans相比，数据的更新在每一个小的样本集上。对于每一个小批量，通过计算平均值得到更新质心，并把小批量里的数据分配给该质心，随着迭代次数的增加，这些质心的变化是逐渐减小的，直到质心稳定或者达到指定的迭代次数，停止计算。</p>
</li>
</ul>
<h2 id="6：特征降维，特征处理"><a href="#6：特征降维，特征处理" class="headerlink" title="6：特征降维，特征处理"></a>6：特征降维，特征处理</h2><h3 id="6-1：降维：是指在某些限定条件下，降低随机变量-特征-个数，得到一组“不相关”主变量的过程"><a href="#6-1：降维：是指在某些限定条件下，降低随机变量-特征-个数，得到一组“不相关”主变量的过程" class="headerlink" title="6.1：降维：是指在某些限定条件下，降低随机变量(特征)个数，得到一组“不相关”主变量的过程"></a>6.1：降维：是指在某些限定条件下，<strong>降低随机变量(特征)个数</strong>，得到<strong>一组“不相关”主变量</strong>的过程</h3><ul>
<li>降低随机变量个数    </li>
<li>相关特征(correlated feature)<ul>
<li>相对湿度与降雨量之间的相关</li>
</ul>
</li>
</ul>
<h3 id="6-2：降维的两种方式"><a href="#6-2：降维的两种方式" class="headerlink" title="6.2：降维的两种方式"></a>6.2：降维的两种方式</h3><ul>
<li><h4 id="特征选择：数据中包含冗余或无关变量（或称特征、属性、指标等），旨在从"><a href="#特征选择：数据中包含冗余或无关变量（或称特征、属性、指标等），旨在从" class="headerlink" title="特征选择：数据中包含冗余或无关变量（或称特征、属性、指标等），旨在从"></a>特征选择：数据中包含<strong>冗余或无关变量（或称特征、属性、指标等）</strong>，旨在从</h4><p><strong>原有特征中找出主要特征</strong>。</p>
<h3 id="低方差过滤的API："><a href="#低方差过滤的API：" class="headerlink" title="低方差过滤的API："></a>低方差过滤的API：</h3></li>
<li><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.feature_selection.<strong>VarianceThreshold</strong>(threshold = 0.0)</td>
<td>**删除所有低方差特征，列的里面的数据删除掉了 **                                                                              <strong>threshold</strong> = 0.0：方差设置的大小</td>
</tr>
<tr>
<td><strong>Variance.fit_transform(X)</strong></td>
<td><strong>X</strong>:numpy array格式的数据[n_samples,n_features] 返回值：训练集差异低于threshold的特征将被删除。默认值是保留所有非零方差特征，即删除所有样本中具有相同值的特征。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><h3 id="ilter-过滤式-主要探究特征本身特点-特征与特征和目标值之间关联"><a href="#ilter-过滤式-主要探究特征本身特点-特征与特征和目标值之间关联" class="headerlink" title="ilter(过滤式):主要探究特征本身特点,特征与特征和目标值之间关联"></a>ilter(过滤式):主要探究特征本身特点,特征与特征和目标值之间关联</h3><ul>
<li><h4 id="方差选择法：低方差特征过滤"><a href="#方差选择法：低方差特征过滤" class="headerlink" title="方差选择法：低方差特征过滤"></a><strong>方差选择法：低方差特征过滤</strong></h4></li>
<li><p><strong>低方差过滤</strong>：删除低方差的一些特征</p>
<ul>
<li><strong>删除特征方差小</strong>：某个特征大多样本的值比较相近</li>
<li><strong>保留特征方差大</strong>：某个特征很多样本的值都有差别</li>
</ul>
</li>
<li><h3 id="相关系数：让低方差可控制"><a href="#相关系数：让低方差可控制" class="headerlink" title="相关系数：让低方差可控制"></a><strong>相关系数</strong>：让低方差可控制</h3><ul>
<li><h4 id="皮尔逊相关系数：反映变量之间相关关系密切程度的统计指标"><a href="#皮尔逊相关系数：反映变量之间相关关系密切程度的统计指标" class="headerlink" title="皮尔逊相关系数：反映变量之间相关关系密切程度的统计指标,"></a><strong>皮尔逊相关系数：</strong>反映变量之间相关关系密切程度的统计指标,</h4></li>
<li><h4 id="通过具体值的大小进行计算"><a href="#通过具体值的大小进行计算" class="headerlink" title="通过具体值的大小进行计算"></a>通过具体值的大小进行计算</h4></li>
<li><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a><strong>特点：</strong></h5><p><strong>相关系数的值介于–1与+1之间，即–1≤ r ≤+1</strong>。其性质如下：</p>
<ul>
<li><p><strong>当r&gt;0时，表示两变量正相关，r&lt;0时，两变量为负相关</strong></p>
</li>
<li><p>当|r|=1时，表示两变量为完全相关，当r=0时，表示两变量间无相关关系</p>
</li>
<li><p><strong>当0&lt;|r|&lt;1时，表示两变量存在一定程度的相关。且|r|越接近1，两变量间线性关系越密切；|r|越接近于0，表示两变量的线性相关越弱</strong></p>
</li>
<li><p><strong>一般可按三级划分：|r|&lt;0.4为低度相关；0.4≤|r|&lt;0.7为显著性相关；0.7≤|r|&lt;1为高度线性相关</strong></p>
</li>
<li><p><strong>API</strong>：</p>
<ul>
<li><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from scipy.stats import **pearsonr **</td>
<td><strong>皮尔逊相关系数</strong>：变量之间相关关系密切程度的统计指标                                                                                            x : (N,) array_like                                                                                         y : (N,) array_like Returns: (Pearson’s correlation coefficient, p-value)</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>列如：</p>
</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E8%81%9A%E7%B1%BB/5.png' height=px ></li>
</ul>
</li>
<li><h4 id="斯皮尔曼相关系数：反映变量之间相关关系密切程度的统计指标"><a href="#斯皮尔曼相关系数：反映变量之间相关关系密切程度的统计指标" class="headerlink" title="斯皮尔曼相关系数：反映变量之间相关关系密切程度的统计指标"></a><strong>斯皮尔曼相关系数：</strong>反映变量之间相关关系密切程度的统计指标</h4></li>
<li><p>通过等级差进行计算</p>
<ul>
<li><p>特点：相关系数的值介于–1与+1之间，即–1≤ r ≤+1，和上面的一样</p>
</li>
<li><p><strong>API</strong></p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from scipy.stats import <strong>spearmanr</strong></td>
<td><strong>斯皮尔曼相关系数</strong>：反映变量之间相关关系密切程度的统计指标</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><h3 id="Embedded-嵌入式-：算法自动选择特征（特征与目标值之间的关联）"><a href="#Embedded-嵌入式-：算法自动选择特征（特征与目标值之间的关联）" class="headerlink" title="Embedded (嵌入式)：算法自动选择特征（特征与目标值之间的关联）"></a>Embedded (嵌入式)：算法自动选择特征（特征与目标值之间的关联）</h3></li>
<li><p>以下这些都可以进行降维</p>
<ul>
<li><strong>决策树:信息熵、信息增益</strong></li>
<li><strong>正则化：L1、L2</strong></li>
<li><strong>深度学习：卷积等</strong></li>
</ul>
</li>
</ul>
</li>
<li><h4 id="主成分分析（可以理解一种特征提取的方式）"><a href="#主成分分析（可以理解一种特征提取的方式）" class="headerlink" title="主成分分析（可以理解一种特征提取的方式）"></a><strong>主成分分析（可以理解一种特征提取的方式）</strong></h4></li>
</ul>
<h2 id="5：主成分分析：高维数据转换为低维数据，然后产生了新的变量"><a href="#5：主成分分析：高维数据转换为低维数据，然后产生了新的变量" class="headerlink" title="5：主成分分析：高维数据转换为低维数据，然后产生了新的变量"></a>5：主成分分析：高维数据转换为低维数据，然后产生了新的变量</h2><ul>
<li>定义：<strong>高维数据转化为低维数据的过程</strong>，在此过程中<strong>可能会舍弃原有数据、创造新的变量</strong></li>
<li>作用：<strong>是数据维数压缩，尽可能降低原数据的维数（复杂度），损失少量信息。</strong></li>
<li>应用：回归分析或者聚类分析当中</li>
</ul>
<table>
<thead>
<tr>
<th><strong>函数</strong></th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.decomposition.<strong>PCA</strong>(n_components=None)</td>
<td><strong>将数据分解为较低维数空间</strong>，                                <strong>n_components:</strong>                                                         <strong>小数：表示保留百分之多少的信息</strong>                                        <strong>整数：降低到几维</strong></td>
</tr>
<tr>
<td>PCA.fit_transform(X) X:numpy array格式的数据[n_samples,n_features]</td>
<td>返回值：转换后指定维度的array</td>
</tr>
<tr>
<td>pca.explained_variance_ratio_</td>
<td>每一维元素的表示信息，数据占比的可解释情况</td>
</tr>
</tbody></table>
<h2 id="维度爆炸：当维度太多比特征数还要多的时候就会出现维度爆炸"><a href="#维度爆炸：当维度太多比特征数还要多的时候就会出现维度爆炸" class="headerlink" title="维度爆炸：当维度太多比特征数还要多的时候就会出现维度爆炸"></a>维度爆炸：当维度太多比特征数还要多的时候就会出现维度爆炸</h2>]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>集成学习lightGBM</title>
    <url>/2021/11/04/%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0lightGBM/</url>
    <content><![CDATA[<h1 id="lightGBM"><a href="#lightGBM" class="headerlink" title="lightGBM"></a>lightGBM</h1><h3 id="1：基于Histogram（直方图）的决策树算法"><a href="#1：基于Histogram（直方图）的决策树算法" class="headerlink" title="1：基于Histogram（直方图）的决策树算法"></a>1：基于Histogram（直方图）的决策树算法</h3><p>优点：<strong>最明显就是内存消耗的降低</strong>，<strong>在计算上的代价也大幅降低，因为普通的每遍历一个特征值就需要计算一次分裂的增益，而lightGBM把连续的浮点特征值离散化成k个整数，只计算k次</strong></p>
<ul>
<li>先把连续的浮点特征值离散化成k个整数，同时构造一个宽度为k的直方图。</li>
<li>在遍历数据的时候，根据离散化后的值作为索引在直方图中累积统计量，当遍历一次数据后，直方图累积了需要的统计量，然后根据直方图的离散值，遍历寻找最优的分割点。</li>
</ul>
<h3 id="2-Lightgbm-的Histogram（直方图）做差加速"><a href="#2-Lightgbm-的Histogram（直方图）做差加速" class="headerlink" title="2 Lightgbm 的Histogram（直方图）做差加速"></a>2 Lightgbm 的Histogram（直方图）做差加速</h3><p>一个叶子的直方图：父亲节点的直方图与它兄弟的直方图做差得到。</p>
<h3 id="3-带深度限制的Leaf-wise的叶子生长策略"><a href="#3-带深度限制的Leaf-wise的叶子生长策略" class="headerlink" title="3 带深度限制的Leaf-wise的叶子生长策略"></a>3 带深度限制的Leaf-wise的叶子生长策略</h3><p><strong>Level-wise</strong>便利一次数据可以同时分裂同一层的叶子，容易进行多线程优化，也好控制模型复杂度，不容易过拟合。</p>
<p><strong>Leaf-wise</strong>则是一种更为高效的策略，每次从当前所有叶子中，找到分裂增益最大的一个叶子，然后分裂，如此循环，只单独可以一个分到底，Leaf-wise之上增加了一个最大深度的限制，在保证高效率的同时防止过拟合。</p>
<h3 id="4：-直接支持类别特征"><a href="#4：-直接支持类别特征" class="headerlink" title="4： 直接支持类别特征"></a>4： 直接支持类别特征</h3><p>LightGBM优化了对类别特征的支持，可以直接输入类别特征，不需要额外的0/1展开。并在决策树算法上增加了类别特征的决策规则。</p>
<h3 id="5-直接支持高效并行"><a href="#5-直接支持高效并行" class="headerlink" title="5 直接支持高效并行"></a>5 直接支持高效并行</h3><p>LightGBM原生支持并行学习，目前支持特征并行和数据并行的两种。</p>
<ul>
<li>特征并行的主要思想是在不同机器在不同的特征集合上分别寻找最优的分割点，然后在机器间同步最优的分割点。</li>
<li>数据并行则是让不同的机器先在本地构造直方图，然后进行全局的合并，最后在合并的直方图上面寻找最优分割点。</li>
<li>**基于投票的数据并行(Voting Parallelization)**则进一步优化数据并行中的通信代价，使通信代价变成常数级别。在数据量很大的时候，使用投票并行可以得到非常好的加速效果。</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>import <strong>lightgbm</strong> as lgb</td>
<td><strong>lightGBM</strong>模型方法</td>
</tr>
<tr>
<td>lgb.LGBMRegressor（objective,）</td>
<td>生成的模型的方法</td>
</tr>
<tr>
<td>objective [缺省值=reg:linear]</td>
<td><strong>reg:linear</strong>” – 线性回归                                                                                             “reg:logistic<strong>” – 逻辑回归                                                                           “</strong>binary:logistic<strong>” – 二分类逻辑回归，输出为概率                                                                                        “</strong>multi:softmax<strong>” – 使用softmax的多分类器，返回预测的类别(不是概率)。在这种情况下，你还需要多设一个参数：num_class(类别数目)                                                                        “</strong>multi:softprob**” – 和multi:softmax参数一样，但是返回的是每个数据属于各个类别的概率。</td>
</tr>
<tr>
<td>learning_rate</td>
<td>学习率</td>
</tr>
<tr>
<td><strong>gbm.fit</strong>(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric=’L1’, early_stopping_rounds=值)</td>
<td><strong>eval_set</strong>：评价的数据集                                                                             <strong>eval_metric</strong>：依据目标函数选择评估指标这个用上了L1正则化，L1正则化值越小越好：                                                                      <strong>early_stopping_rounds</strong>：激活早停止，当验证的L1的L2中的错误率设置的数值轮数未下降，则停止训练。</td>
</tr>
<tr>
<td>gbm.dest_params_</td>
<td>c选择出最优的学习率和跌代次数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>lightGBM：AIP里面的参数</th>
<th>含义</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>max_depth</td>
<td>树的最大深度</td>
<td>当模型过拟合时,可以考虑首先降低 max_depth</td>
</tr>
<tr>
<td>min_data_in_leaf</td>
<td>叶子可能具有的最小记录数</td>
<td>默认20，过拟合时用</td>
</tr>
<tr>
<td>feature_fraction</td>
<td>例如 为0.8时，意味着在每次迭代中随机选择80％的参数来建树</td>
<td>boosting 为 random forest 时用</td>
</tr>
<tr>
<td>bagging_fraction</td>
<td>每次迭代时用的数据比例</td>
<td>用于加快训练速度和减小过拟合</td>
</tr>
<tr>
<td>early_stopping_round</td>
<td>如果一次验证数据的一个度量在最近的early_stopping_round 回合中没有提高，模型将停止训练</td>
<td>加速分析，减少过多迭代</td>
</tr>
<tr>
<td>lambda</td>
<td>指定正则化</td>
<td>0～1</td>
</tr>
<tr>
<td>min_gain_to_split</td>
<td>描述分裂的最小 gain</td>
<td>控制树的有用的分裂</td>
</tr>
<tr>
<td>max_cat_group</td>
<td>在 group 边界上找到分割点</td>
<td>当类别数量很多时，找分割点很容易过拟合时</td>
</tr>
<tr>
<td>n_estimators</td>
<td>最大迭代次数</td>
<td>最大迭代数不必设置过大，可以在进行一次迭代后，根据最佳迭代数设置</td>
</tr>
</tbody></table>
<h4 id="核心参数，选择的算法"><a href="#核心参数，选择的算法" class="headerlink" title="核心参数，选择的算法"></a>核心参数，选择的算法</h4><table>
<thead>
<tr>
<th>Core Parameters</th>
<th>含义</th>
<th>用法</th>
</tr>
</thead>
<tbody><tr>
<td>Task</td>
<td>数据的用途</td>
<td>选择 train（训练） 或者 predict（预测）</td>
</tr>
<tr>
<td>application</td>
<td>模型的用途</td>
<td>选择 regression: 回归时， binary: 二分类时， multiclass: 多分类时</td>
</tr>
<tr>
<td>boosting</td>
<td>要用的算法</td>
<td>gbdt，                                                                                              rf: random forest，                                                                                                        dart: Dropouts meet Multiple Additive Regression Trees，                                                                                           goss: Gradient-based One-Side Sampling</td>
</tr>
<tr>
<td>num_boost_round</td>
<td>迭代次数</td>
<td>通常 100+</td>
</tr>
<tr>
<td>learning_rate</td>
<td>学习率</td>
<td>常用 0.1, 0.001, 0.003…</td>
</tr>
<tr>
<td>num_leaves</td>
<td>叶子数量</td>
<td>默认 31</td>
</tr>
<tr>
<td>device</td>
<td></td>
<td>cpu 或者 gpu</td>
</tr>
<tr>
<td>metric</td>
<td></td>
<td>mae: mean absolute error ，  mse: mean squared error ，  binary_logloss: loss for binary classification ， multi_logloss: loss for multi classification</td>
</tr>
</tbody></table>
<h3 id="保存的方式"><a href="#保存的方式" class="headerlink" title="保存的方式"></a>保存的方式</h3><table>
<thead>
<tr>
<th>IO parameter</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>max_bin</td>
<td>表示 feature 将存入的 bin 的最大数量</td>
</tr>
<tr>
<td>categorical_feature</td>
<td>如果 categorical_features = 0,1,2， 则列 0，1，2是 categorical 变量</td>
</tr>
<tr>
<td>ignore_column</td>
<td>与 categorical_features 类似，只不过不是将特定的列视为categorical，而是完全忽略</td>
</tr>
<tr>
<td>save_binary</td>
<td>这个参数为 true 时，则数据集被保存为二进制文件，下次读数据时速度会变快</td>
</tr>
</tbody></table>
<h2 id="3-调参建议"><a href="#3-调参建议" class="headerlink" title="3 调参建议"></a>3 调参建议</h2><table>
<thead>
<tr>
<th>IO parameter</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>num_leaves</code></td>
<td align="left">取值应 &lt;= 2(max_depth)2^{(max_depth)}2(max_depth)， 超过此值会导致过拟合</td>
</tr>
<tr>
<td><code>min_data_in_leaf</code></td>
<td align="left">将它设置为较大的值可以避免生长太深的树，但可能会导致 underfitting，在大型数据集时就设置为数百或数千</td>
</tr>
<tr>
<td><code>max_depth</code></td>
<td align="left">这个也是可以限制树的深度（集成学习的时候设置的小些）</td>
</tr>
</tbody></table>
<p>下表对应了 Faster Speed ，better accuracy ，over-fitting 三种目的时，可以调的参数</p>
<table>
<thead>
<tr>
<th>Faster Speed（设置的快一些）</th>
<th align="left">better accuracy（更好的准确度）</th>
<th align="left">over-fitting（过拟合）</th>
</tr>
</thead>
<tbody><tr>
<td>将 <code>max_bin</code> 设置小一些</td>
<td align="left">用较大的 <code>max_bin</code></td>
<td align="left"><code>max_bin</code> 小一些</td>
</tr>
<tr>
<td></td>
<td align="left"><code>num_leaves</code> 大一些</td>
<td align="left"><code>num_leaves</code> 小一些</td>
</tr>
<tr>
<td>用 <code>feature_fraction</code>来做 <code>sub-sampling</code></td>
<td align="left"></td>
<td align="left">用 <code>feature_fraction</code></td>
</tr>
<tr>
<td>用 <code>bagging_fraction 和 bagging_freq</code>【bagging的次数，0表示禁用，bagging，非零表示执行k次bagging】</td>
<td align="left"></td>
<td align="left">设定 <code>bagging_fraction 和 bagging_freq</code></td>
</tr>
<tr>
<td></td>
<td align="left">training data 多一些</td>
<td align="left">training data 多一些</td>
</tr>
<tr>
<td>用 <code>save_binary</code>来加速数据加载（用二进制能加快一些）</td>
<td align="left">直接用 categorical feature（0，1,2,3）</td>
<td align="left">用 <code>gmin_data_in_leaf （叶节点的数据量限制）和 min_sum_hessian_in_leaf</code>（最叶节点的权重值来控制整体内容）【和xgboost中min_child_weight类似】</td>
</tr>
<tr>
<td>用 parallel learning（并行）</td>
<td align="left">用 dart【DART利用了深度学习中的dropout中的技巧，随机丢弃生成的决策树，然后再从剩下的决策树集中迭代优化提升树】</td>
<td align="left">用 <code>lambda_l1, lambda_l2 ，min_gain_to_split</code>（信息增益值来做限制） 做正则化</td>
</tr>
<tr>
<td></td>
<td align="left"><code>num_iterations</code> （迭代次数的大小）大一些，<code>learning_rate</code>小一些</td>
<td align="left">用 <code>max_depth</code> 控制树的深度</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch架构基础</title>
    <url>/2020/02/10/pytorch%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="pytorch架构基础"><a href="#pytorch架构基础" class="headerlink" title="pytorch架构基础"></a>pytorch架构基础</h2><h4 id="创建固定，"><a href="#创建固定，" class="headerlink" title="创建固定，"></a>创建固定，</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>torch.tensor([],[])</td>
<td>创建固定张量      类型为torch.float32类型</td>
</tr>
<tr>
<td>toch.tensor(np.array([]))</td>
<td>用np创建张量</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>张量进行拼接</strong></td>
<td></td>
</tr>
<tr>
<td>torch.cat((变量张量1,变量张量2, 变量张量3), 0)</td>
<td>张量进行拼接：                                                                                             张量拼接，                                                                                                                    0：代表竖列拼接，1代表横向拼接</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>numpy.mgrid（）</td>
<td>回一个密集的多维“ meshgrid”，以便每个返回的参数具有相同的形状。  输出数组的尺寸和数量等于索引尺寸的数量。  如果步长不是复数，则停止不包括在内</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>np.<strong>dstack</strong>()</td>
<td>沿深度方向（沿第三轴）按顺序堆叠数组。                                                                              阵列的序列: 除第三个轴外，所有阵列的形状都必须相同。  一维或二维阵列必须具有相同的形状。</td>
</tr>
<tr>
<td><strong>创建64的类型</strong></td>
<td></td>
</tr>
<tr>
<td>torch.set_default_tensor_type(torch.DoubleTensor)</td>
<td>创建64的类型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>恢复32的类型</strong></td>
<td></td>
</tr>
<tr>
<td>torch.set_default_tensor_type(torch.FloatTensor)</td>
<td>创建32的类型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>mgrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5j</span><span class="token punctuation">]</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span> <span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>


np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

np<span class="token punctuation">.</span>dstack<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="np-vstack-和np-hstack"><a href="#np-vstack-和np-hstack" class="headerlink" title="np.vstack()和np.hstack()"></a>np.vstack()和np.hstack()</h4><p>在这里我们介绍两个拼接数组的方法：</p>
<p>np.vstack():在竖直方向上堆叠</p>
<p>np.hstack():在水平方向上平铺</p>
<pre><code>import numpy as np
arr1=np.array([1,2,3])
arr2=np.array([4,5,6])
print np.vstack((arr1,arr2))
 
print np.hstack((arr1,arr2))
 
a1=np.array([[1,2],[3,4],[5,6]])
a2=np.array([[7,8],[9,10],[11,12]])
print a1
print a2
print np.hstack((a1,a2))
</code></pre>
<p>结果如下：</p>
<pre><code>[[1 2 3]
 [4 5 6]]
[1 2 3 4 5 6]
[[1 2]
 [3 4]
 [5 6]]
[[ 7  8]
 [ 9 10]
 [11 12]]
[[ 1  2  7  8]
 [ 3  4  9 10]
 [ 5  6 11 12]]
</code></pre>
<h4 id="数组创建"><a href="#数组创建" class="headerlink" title="数组创建"></a>数组创建</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>numpy.<strong>eye</strong>(<em>N</em>, <em>M=None</em>, <em>k=0</em>, <em>dtype=&lt;class ‘float’&gt;</em>, <em>order=’C’</em>, ***, <em>like=None</em>)</td>
<td><strong>参数                                                                                                                                                                             N：</strong>int：输出中的行数                                                                                                                                 <strong>M</strong>：int：输出中的列数。 如果没有，默认为 <em>N</em> 。                                                                                                   <strong>k</strong>：int ：对角线的索引：0（默认）是指主对角线，正值表示上对角线，负值表示到较低的对角线。</td>
</tr>
<tr>
<td><strong>返回</strong>：</td>
<td>返回一个二维数组，对角线上为 1，其他地方为 0。</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>int<span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>torch.LongTensor（）</td>
<td>构建一个多少*多少的 <code>Long</code>类型的张量，</td>
</tr>
<tr>
<td>Variable(torch.LongTensor([2, 1, 0]))</td>
<td>加上Variable后可以表示标签</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>torch.Variable（）</td>
<td>int变量，required_grad=True是会更新参数，默认为False它是一种可以变化的变量，这正好就符合了反向传播，参数更新的属性。<code>Variable API</code> 几乎和 <code>Tensor API</code>一致 (除了一些<code>in-place</code>方法，这些<code>in-place</code>方法会修改 <code>required_grad=True</code>的 <code>input</code> 的值)。多数情况下，将<code>Tensor</code>替换为<code>Variable</code>，代码一样会正常的工作。由于这个原因，我们不会列出<code>Variable</code>的所有方法，你可以通过<code>torch.Tensor</code>的文档来获取相关知识。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>.long()</td>
<td>形成torch.int64</td>
</tr>
<tr>
<td>.int()</td>
<td>形成torch.32</td>
</tr>
<tr>
<td>.float()</td>
<td>形成float32</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>获取默认的数据类型</strong></td>
<td></td>
</tr>
<tr>
<td>torch.get_default_dtype()</td>
<td>默认的数据类型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>扩展数组</strong></td>
<td></td>
</tr>
<tr>
<td>np.expand_dims(<em>a</em>, <em>axis</em>)</td>
<td><strong>参数</strong>                                                                                                                          a：输入数组。                                                                                                       axis ：在第几维度增加一维，axis=0，就在第1维增加，axis=-1就在最后一维增加，可以为（第几维，第几维）一次增加2个</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="创建张量"><a href="#创建张量" class="headerlink" title="创建张量"></a>创建张量</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质.</th>
</tr>
</thead>
<tbody><tr>
<td>.shape（）</td>
<td>张量的维度</td>
</tr>
<tr>
<td>.size()</td>
<td>得到张量的尺寸，几行几列</td>
</tr>
<tr>
<td>.dim()</td>
<td>得到是张量的阶数</td>
</tr>
<tr>
<td>.view(行，列)</td>
<td>不改变内存里面的顺序的，改变形状，如2行,3列，可以转换为3行，2列</td>
</tr>
<tr>
<td>torch.rand（行，列）</td>
<td>创建一个<strong>有初始化</strong>的矩阵，</td>
</tr>
<tr>
<td>torch.empty(行，列)</td>
<td>创建一个<strong>没有初始化</strong>的矩阵，<strong>float32</strong></td>
</tr>
<tr>
<td>torch.tensor（[数据1，数据2]）</td>
<td>直接通过数据创建张量</td>
</tr>
<tr>
<td>变量.new_ones（行，列，dtype=torch.double）</td>
<td>通过已有的一个张量创建相同尺寸的新张量，<strong>float64</strong></td>
</tr>
<tr>
<td>torch.randn_like(变量,dtype = torch.float)</td>
<td>利用randn_like方法得到相同张量尺寸的一个新张量, 并且采用随机初始化来对其赋值，<strong>float32</strong></td>
</tr>
<tr>
<td>torch.ones()</td>
<td>创建全为1的张量</td>
</tr>
<tr>
<td>torch.zeros（行，列，dtype=torch.long）</td>
<td>创建一个全0矩阵并可指定数据元素的类型为long，<strong>int64</strong></td>
</tr>
<tr>
<td>torch.long</td>
<td>将此存储空间转换为 长 型</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>创建一定范围的序列张量</strong></td>
<td></td>
</tr>
<tr>
<td>torch.<strong>ones_like</strong>(tensor)</td>
<td></td>
</tr>
<tr>
<td>torch.arange（起始，末尾，步长）</td>
<td>创建以步长等差，为开始结束的张量</td>
</tr>
<tr>
<td>torch.logspace()</td>
<td>等比数列</td>
</tr>
<tr>
<td>torch.rand(行，列)</td>
<td>创建以范围（0到1）的区间的随机张量</td>
</tr>
<tr>
<td>torch.randint（范围1，范围2，（行，列））</td>
<td>在这范围的进行随机生成几行几列</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="pytorch中tensor的属性，"><a href="#pytorch中tensor的属性，" class="headerlink" title="pytorch中tensor的属性，"></a>pytorch中tensor的属性，</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>torch.tensor(np.array(1))</td>
<td>创建为tensor(1, dtype=torch.int32)</td>
</tr>
<tr>
<td>.item()</td>
<td>把上面的tensor(1, dtype=torch.int32)创建的数值提取出来</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="类型转换-1"><a href="#类型转换-1" class="headerlink" title="类型转换"></a>类型转换</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>numpy.ascontiguousarray( <em>a</em> , <em>dtype=None</em> , *** , <em>like=None</em> )</td>
<td>参数</td>
</tr>
<tr>
<td><strong>返回：</strong>内存中的连续数组（ndim &gt;= 1）（C 顺序）。</td>
<td><strong>一个</strong> array_like 输入数组。   <strong>dtype</strong> str 或 dtype 对象，可选 返回数组的数据类型。   <strong>像</strong> array_like 允许创建非数组的引用对象  NumPy 数组。  如果一个类似数组的传入作为 <code>like</code>支持  这 <code>__array_function__</code>协议，结果将被定义  通过它。  在这种情况下，它确保创建一个数组对象  与通过此参数传入的兼容。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="pytorch基本的运算操作"><a href="#pytorch基本的运算操作" class="headerlink" title="pytorch基本的运算操作"></a>pytorch基本的运算操作</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>torch.add（变量1，变量2，alpha=10）先用alpha数值去乘于变量2在变量1相加</td>
<td>加法操作</td>
</tr>
<tr>
<td>变量2.add_(变量1)</td>
<td>加法方式:把和的总数给了变量2</td>
</tr>
<tr>
<td>torch.add(变量1, 变量2, out=空张量)</td>
<td>将空的张量作为加法的结果存储张量</td>
</tr>
<tr>
<td>torch.randn（【行，列】）</td>
<td>创建均值为0方差为1的随机数列（高斯分布）</td>
</tr>
<tr>
<td>变量2.sub(变量1)</td>
<td>进行相减</td>
</tr>
<tr>
<td>变量1.mm(变量2)</td>
<td>进行矩阵相乘，矩阵相乘法则，</td>
</tr>
<tr>
<td>变量1.max()</td>
<td>找到最大的值</td>
</tr>
<tr>
<td>变量.max(dim=可以写0,1,2)</td>
<td>在那个维度上上找到最大的值</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>特殊张量运算</td>
<td></td>
</tr>
<tr>
<td>torch.bmm（变量1张量3维，变量2张量3维）</td>
<td>进后两维进行运算</td>
</tr>
<tr>
<td># 如果参数1形状是(b × n × m), 参数2形状是(b × m × p), 则输出为(b × n × p) &gt;&gt;&gt; input = torch.randn(10, 3, 4) &gt;&gt;&gt; mat2 = torch.randn(10, 4, 5) &gt;&gt;&gt; res = torch.bmm(input, mat2) &gt;&gt;&gt; res.size() torch.Size([10, 3, 5])</td>
<td></td>
</tr>
</tbody></table>
<h4 id="pytorch改变性状-转置，正加（填充）维度，减少（压缩）维度"><a href="#pytorch改变性状-转置，正加（填充）维度，减少（压缩）维度" class="headerlink" title="pytorch改变性状,转置，正加（填充）维度，减少（压缩）维度"></a>pytorch改变性状,转置，正加（填充）维度，减少（压缩）维度</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>.view(行，列)</td>
<td>不改变内存里面的顺序的，改变形状，如2行,3列，可以转换为3行，2列</td>
</tr>
<tr>
<td>变量1.view(-1, 一行多少个)</td>
<td>-1代表自动匹配个数，改变行列</td>
</tr>
<tr>
<td>.t()</td>
<td>进制转置</td>
</tr>
<tr>
<td>.transpose(第几维度,第几维度)</td>
<td>维度颠倒，内存也进行的乱序，第几维度与另一个设置的第几维度可以进行转置</td>
</tr>
<tr>
<td>.transpose</td>
<td>经过这个来进行转置的时候还原原来的维度需要进行.contiguous()函数的操作</td>
</tr>
<tr>
<td>.permute(维度几,维度几,维度几)</td>
<td>可以让多个维度（不只是3维是多维）进行互换转置</td>
</tr>
<tr>
<td>.squeeze(数值)</td>
<td>压缩维度，可以添加数值，压缩第数值上的维度，</td>
</tr>
<tr>
<td>.unsqueeze(数值)</td>
<td>增加维度，增添数值的维度</td>
</tr>
<tr>
<td>.reshape(几行,几列)</td>
<td>改变形状</td>
</tr>
<tr>
<td>.sum()</td>
<td>求和</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="方向翻转"><a href="#方向翻转" class="headerlink" title="方向翻转"></a>方向翻转</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>numpy.<strong>fliplr</strong>( <em>m</em> )</td>
<td>参数：<strong>m</strong> 数组类似 输入数组，必须至少是二维的。</td>
</tr>
<tr>
<td>返回：例子</td>
<td><strong>原来数组</strong>：A = [[1.,  0.,  0.],        [0.,  2.,  0.],        [0.,  0.,  3.]                                                                                         np.<strong>fliplr</strong>(A)                                                                                                                                                <strong>打印</strong>：array([[0.,  0.,  1.],        [0.,  2.,  0.],        [3.,  0.,  0.]])</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>diag<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
A
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
np<span class="token punctuation">.</span>fliplr<span class="token punctuation">(</span>A<span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h3 id="关于Torch-Tensor和Numpy-array之间的相互转换"><a href="#关于Torch-Tensor和Numpy-array之间的相互转换" class="headerlink" title="关于Torch Tensor和Numpy array之间的相互转换"></a>关于Torch Tensor和Numpy array之间的相互转换</h3><p>Torch Tensor和Numpy array共享底层的内存空间, 因此改变其中一个的值, 另一个也会随之被改变.</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>torch.from_numpy(变量1)</td>
<td>将Numpy array转换为Torch Tensor</td>
</tr>
<tr>
<td>b = 变量1.numpy()</td>
<td>将Torch Tensor转换为Numpy array</td>
</tr>
<tr>
<td>【：，取数值竖列的数字】</td>
<td></td>
</tr>
<tr>
<td>tensor.detach().numpy()</td>
<td>require_grad=True不能够直接转换，调用，tensor.detach().numpy()才能进行转换</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>torch.<strong>FloatTensor</strong>()</td>
<td>类型转换, 将list ,numpy转化为tensor。 以list -&gt; tensor为例</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="autograd-package-自动求导工具包"><a href="#autograd-package-自动求导工具包" class="headerlink" title="autograd package(自动求导工具包)"></a>autograd package(自动求导工具包)</h4><ul>
<li>autograd package提供了一个对Tensors上所有的操作进行自动微分的功能.</li>
<li></li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td><strong>torch.Tensor</strong></td>
<td><strong>package中的核心类</strong></td>
</tr>
<tr>
<td>.grad</td>
<td>在这个Tensor上的所有梯度将被累加</td>
</tr>
<tr>
<td>.detach()</td>
<td>可以将该Tensor从计算图中撤下, 在未来的回溯计算中也不会再计算该Tensor.</td>
</tr>
<tr>
<td>with torch.no_grad()</td>
<td>非常适用于对模型进行预测的时候, 因为预测阶段不再需要对梯度进行计算.</td>
</tr>
<tr>
<td><strong>torch.Function</strong></td>
<td><strong>和Tensor类同等重要的一个核心类</strong></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>torch.rand([行，列])</td>
<td>定义数据</td>
</tr>
<tr>
<td>tensor.detach().numpy()</td>
<td>require_grad=True不能够直接转换，调用，tensor.detach().numpy()</td>
</tr>
<tr>
<td>(变量,requires_grad=True)</td>
<td>加上这个来运算，后面对它进行加减乘除的时候都可以来执行自动求导，与后面的都进行了关联，将追踪在这个类上定义的所有操作</td>
</tr>
<tr>
<td>.requires_grad_()</td>
<td>该方法可以原地改变Tensor的属性.requires_grad的值. 如果没有主动设定默认为False.</td>
</tr>
<tr>
<td>变量1.requires_grad_=True</td>
<td>这个也可以进行就地加上，等于True的时候加入了求导的运行</td>
</tr>
<tr>
<td>.grad_fn</td>
<td>每次计算都会修改其grad_fn属性，用来记录做过的操作</td>
</tr>
<tr>
<td>optim.<strong>SGD</strong>(model.parameters(), lr=1e-3)</td>
<td>实现：SGD优化参数</td>
</tr>
<tr>
<td>nn.<strong>MSELoss</strong>()</td>
<td>损失函数</td>
</tr>
<tr>
<td><strong>net.zero_grad()</strong></td>
<td>Pytorch中执行梯度清零的代码</td>
</tr>
<tr>
<td><strong>loss</strong>.<strong>backward</strong>()：反向传播的时候要先进行上一步的操作梯度清零：net.zero_grad()，所有的属性都为：requires_grad=True时就参与梯度求导的运算</td>
<td>计算图可以通过链式法则求导。计算梯度，反向传播实现的.</td>
</tr>
<tr>
<td>optimizer.step（）</td>
<td>进行单次优化 (参数更新).</td>
</tr>
<tr>
<td>with torch.no_gard():</td>
<td>不进行求导的这个是在测试集上进行</td>
</tr>
<tr>
<td>.data()：直接提取里面的数字（浅拷贝）</td>
<td>在tensor的require_grad=False，tensor.data和tensor等价 require_grad=True时，tensor.data仅仅是获取tensor中的数据</td>
</tr>
<tr>
<td>net.<strong>parameters</strong>()</td>
<td>模型中所有的可训练参数, 可以通过net.parameters()来获得.equire_grad=True时的参数取出</td>
</tr>
<tr>
<td><strong>在训练和评估模型中进行写入</strong></td>
<td></td>
</tr>
<tr>
<td>model.train()：在训练模块中进行写入</td>
<td>启用 BatchNormalization 和 Dropout，将BatchNormalization和Dropout置为True</td>
</tr>
<tr>
<td>model.eval()：在评估（或测试）模块进行写入</td>
<td>不启用 BatchNormalization 和 Dropout，将BatchNormalization和Dropout置为False，在评估测试中进行使用</td>
</tr>
<tr>
<td>x.data.numpy()：</td>
<td>直接进行提取数值在进行转换成np类型，可以进行绘图</td>
</tr>
<tr>
<td>.datach</td>
<td>直接提取里面的数字（深拷贝）</td>
</tr>
<tr>
<td><strong>创建模型</strong></td>
<td></td>
</tr>
<tr>
<td>import torch.nn as nn</td>
<td>创建的神经网络的包</td>
</tr>
<tr>
<td>import torch.nn.<strong>functional</strong> as F</td>
<td>创建</td>
</tr>
<tr>
<td>nn.Conv2d（）</td>
<td>创建一个卷积</td>
</tr>
<tr>
<td>F.max_pool2d(F.relu(self.conv2(x)), 2)</td>
<td>创建最大池化</td>
</tr>
<tr>
<td>nn.Linear（<code>in_features</code>，<code>out_features</code>）</td>
<td><strong>可以进行定义对象，在括号内进行输入变量： **  <strong>in_features</strong>：指的是输入的二维张量的大小，即</strong>输入的**<code>[batch_size, size]</code>中的size  <strong>out_features</strong>:指的是输出的二维张量的大小，即<strong>输出的</strong>二维张量的形状为<code>[batch_size，output_size]</code>，当然，它也代表了<strong>该全连接层的神经元个数</strong>。</td>
</tr>
<tr>
<td><strong>nn.Sequential</strong>（nn.Linear,(),nn.Linear()）</td>
<td>构建模型可以创建多个全连接层可以自动完成forward函数来创建</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>创建优化器</strong></td>
<td><strong>torch.optim</strong>函数下的：</td>
</tr>
<tr>
<td>torch.optim.SGD(参数，学习率)</td>
<td>以SGD优化器执行</td>
</tr>
<tr>
<td>torch.optim.Adam(参数，学习率)</td>
<td>以Adam优化器来执行</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>nn.<strong>functional</strong>.avg_pool1d</td>
<td>在由多个输入平面组成的输入信号上应用一维平均池。</td>
</tr>
<tr>
<td>`torch.nn.functional.<strong>avg_pool1d</strong>（<em>输入</em>，<em>kernel_size</em>，<em>stride = None</em>，<em>padding = 0</em>，<em>ceil_mode = False</em>，<em>count_include_pad = True</em> ）</td>
<td><strong>输入</strong>–输入张量的形状（\ text {minibatch}，\ text {in \ _channels}，iW）（小批量，in_channels，<em>我**W</em> ） <strong>kernel_size</strong> –窗口的大小。可以是单个数字或元组（kW，） <strong>步幅</strong>–窗口的步幅。可以是单个数字或元组 （sW，）。默认：<code>kernel_size</code> <strong>padding</strong> –输入两侧的隐式零填充。可以是一个数字或一个元组（padW，）。默认值：0 <strong>ceil_mode</strong> –为True时，将使用ceil而不是floor来计算输出形状。默认：<code>False</code> <strong>count_include_pad</strong> –为True时，将在平均计算中包括零填充。默认：<code>True</code></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="保存模型"><a href="#保存模型" class="headerlink" title="保存模型"></a>保存模型</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
<th>函数解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>state_dict</code>（ ）</td>
<td>将缩放器的状态返回为  <a href="https://docs.python.org/3/library/stdtypes.html#dict"><code>dict</code></a>。  它包含五个条目：                                             <code>&quot;scale&quot;</code> -包含当前比例的Python浮点数                                    <code>&quot;growth_factor&quot;</code> -包含当前增长因子的Python浮点数                               <code>&quot;backoff_factor&quot;</code> -包含当前退避因子的Python浮点数                                                                          <code>&quot;growth_interval&quot;</code> -包含当前增长间隔的Python int                                                                <code>&quot;_growth_tracker&quot;</code> -包含最近连续未跳过步骤数的Python int。                                                                                                                            如果未启用此实例，则返回一个空字典。</td>
<td>如果您希望在特定迭代后检查定标器的状态，  <a href="https://pytorch.org/docs/stable/amp.html?highlight=state_dict#torch.cuda.amp.GradScaler.state_dict"><code>state_dict()</code></a><br/>应该在之后  <a href="https://pytorch.org/docs/stable/amp.html?highlight=state_dict#torch.cuda.amp.GradScaler.update"><code>update()</code></a>.</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首先设定模型的保存路径</span>
PATH <span class="token operator">=</span> <span class="token string">'./cifar_net.pth'</span>
<span class="token comment" spellcheck="true"># 保存模型的状态字典</span>
torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>模型名字<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> PATH<span class="token punctuation">)</span>
</code></pre>
<h4 id="优化器的创建"><a href="#优化器的创建" class="headerlink" title="优化器的创建"></a>优化器的创建</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 首先导入优化器的包, optim中包含若干常用的优化算法, 比如SGD, Adam等</span>
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>optim <span class="token keyword">as</span> optim

<span class="token comment" spellcheck="true"># 通过optim创建优化器对象</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 将优化器执行梯度清零的操作</span>
optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>

output <span class="token operator">=</span> net<span class="token punctuation">(</span>input<span class="token punctuation">)</span>
loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 对损失值执行反向传播的操作</span>
loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 参数的更新通过一行标准代码来执行</span>
optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="损失函数系列"><a href="#损失函数系列" class="headerlink" title="损失函数系列"></a>损失函数系列</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>zero_grad()</td>
<td>把梯度置零，也就是把loss关于weight的导数变成0，就是每一批次进行清零操作</td>
</tr>
<tr>
<td>nn.MSELoss</td>
<td>均方误差：常用于回归问题</td>
</tr>
<tr>
<td>nn.CrassEntropyLoss(，预测值，真实值)</td>
<td>交叉熵损失：分类问题，</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>class torch.nn.Parameter()</td>
<td>模型中所有的可训练参数,</td>
</tr>
<tr>
<td>view(1, -1)</td>
<td>view()函数作用是将一个多行的Tensor,拼接成一行。返回一个有相同数据但大小不同的tensor。返回的tensor必须有与原tensor相同的数据和相同数目的元素，但可以有不同的大小。一个tensor必须是连续的<code>contiguous()</code>才能被查看。</td>
</tr>
</tbody></table>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> torch
<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn
<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt

<span class="token comment" spellcheck="true"># 1. 定义数据</span>

x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">0.8</span>

<span class="token comment" spellcheck="true">#2 .定义模型</span>
<span class="token keyword">class</span> <span class="token class-name">Lr</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    super<span class="token punctuation">(</span>Lr<span class="token punctuation">,</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span>）

<span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> out

                            
<span class="token comment" spellcheck="true"># 2. 实例化模型，损失loss，和优化器，</span>
model <span class="token operator">=</span> Lr<span class="token punctuation">(</span><span class="token punctuation">)</span>
criterion <span class="token operator">=</span> nn<span class="token punctuation">.</span>MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span>里面的参数都进行固定不动<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">#3. 训练模型</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    out <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.1 获取预测值</span>
    loss <span class="token operator">=</span> criterion<span class="token punctuation">(</span>y<span class="token punctuation">,</span>out<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.2 计算损失</span>
    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.3 梯度归零</span>
    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#3.4 计算梯度</span>
    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3.5 更新梯度</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">20</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Epoch[&amp;#123;&amp;#125;/&amp;#123;&amp;#125;], loss: &amp;#123;:.6f&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">30000</span><span class="token punctuation">,</span>loss<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">#4. 模型评估</span>
model<span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#设置模型为评估模式，即预测模式，将model.parameters()里面的参数都进行固定不动，预测的时候固定不变，才能预测，就把requires_grad=False了</span>
predict <span class="token operator">=</span> model<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#把x进去得到我们的预测</span>
predict <span class="token operator">=</span> predict<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#真实的值拿出来</span>
plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">"r"</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>predict<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>



</code></pre>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>决策树</title>
    <url>/2021/11/04/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    <content><![CDATA[<h2 id="1：决策树："><a href="#1：决策树：" class="headerlink" title="1：决策树："></a>1：决策树：</h2><h4 id="计算的步骤：先算出总体的信息熵，再算出部分属性的信息熵，再进行计算信息的增益，再进属性信息度量，再进行信息增益率："><a href="#计算的步骤：先算出总体的信息熵，再算出部分属性的信息熵，再进行计算信息的增益，再进属性信息度量，再进行信息增益率：" class="headerlink" title="计算的步骤：先算出总体的信息熵，再算出部分属性的信息熵，再进行计算信息的增益，再进属性信息度量，再进行信息增益率："></a>计算的步骤：先算出总体的信息熵，再算出部分属性的信息熵，再进行计算信息的增益，再进属性信息度量，再进行信息增益率：</h4><h3 id="共有5个名词："><a href="#共有5个名词：" class="headerlink" title="共有5个名词："></a>共有5个名词：</h3><ol>
<li>总体的信息熵：总体的与是否形成概率比进行计算</li>
<li>属性信息熵：    总属性与单属性进行的计算</li>
<li>信息增益：        总体信息熵  —  属性信息熵，ID3是用信息增益实现的：只能对离散属性数据集构成决策树。</li>
<li>属性信息度量：总体数与总属性数进行计算</li>
<li>信息增益率：    信息增益 / 属性信息度量 ，    C4.5是用信息增益率实现的：优化了ID3分支过程中总喜欢偏向选择值较多的属性</li>
<li>基尼值：       是为了不纯来计算的</li>
<li>基尼指数（实现2分类的问题）：     CART决策树：可以经行行分类和回归，可以处理离散属性，可以处理连续属性    </li>
</ol>
<p>遇到数字型时：要去两个值的中值经行分类</p>
<h4 id="总体信息熵-—-属性信息熵-信息增益"><a href="#总体信息熵-—-属性信息熵-信息增益" class="headerlink" title="总体信息熵  —    属性信息熵=信息增益"></a>总体信息熵  —    属性信息熵=信息增益</h4><h4 id="信息增益-属性信息度量-信息增益率"><a href="#信息增益-属性信息度量-信息增益率" class="headerlink" title="信息增益 / 属性信息度量 =  信息增益率"></a><strong>信息增益 / 属性信息度量 =  信息增益率</strong></h4><h4 id="性质：分支结构就是if-else结构，利用这类结构分割数据的一种分类学习方法"><a href="#性质：分支结构就是if-else结构，利用这类结构分割数据的一种分类学习方法" class="headerlink" title="性质：分支结构就是if-else结构，利用这类结构分割数据的一种分类学习方法"></a>性质：分支结构就是if-else结构，利用这类结构分割数据的一种分类学习方法</h4><h4 id="后剪枝：后剪枝防止过拟合"><a href="#后剪枝：后剪枝防止过拟合" class="headerlink" title="后剪枝：后剪枝防止过拟合"></a>后剪枝：后剪枝防止过拟合</h4><h3 id="决策树API："><a href="#决策树API：" class="headerlink" title="决策树API："></a>决策树API：</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>class sklearn.tree.<strong>DecisionTreeClassifier</strong>(criterion=’gini’, max_depth=None,random_state=None)</td>
<td><strong>criterion</strong>：  特征选择标准 “gini”或者”entropy”，前者代表基尼系数，后者代表信息增益。一默认”gini”，即CART算法。 min_samples_split  内部节点再划分所需最小样本数 这个值限制了子树继续划分的条件，如果某节点的样本数少于                               <strong>min_samples_split</strong>：则不会继续再尝试选择最优特征来进行划分。 默认是2.如果样本量不大，不需要管这个值。如果样本量数量级非常大，则推荐增大这个值。我之前的一个项目例子，有大概10万样本，建立决策树时，我选择了min_samples_split=10。可以作为参考。                                                             <strong>min_samples_leaf</strong>  叶子节点最少样本数 这个值限制了叶子节点最少的样本数，如果某叶子节点数目小于样本数，则会和兄弟节点一起被剪枝。 默认是1,可以输入最少的样本数的整数，或者最少样本数占样本总数的百分比。如果样本量不大，不需要管这个值。如果样本量数量级非常大，则推荐增大这个值。之前的10万样本项目使用min_samples_leaf的值为5，仅供参考。                                                                           <strong>max_depth</strong>  ：决策树最大深度 决策树的最大深度，默认可以不输入，如果不输入的话，决策树在建立子树的时候不会限制子树的深度。一般来说，数据少或者特征少的时候可以不管这个值。如果模型样本量多，特征也多的情况下，推荐限制这个最大深度，具体的取值取决于数据的分布。常用的可以取值10-100之间                                                                               <strong>random_state：</strong>  随机数种子</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="1-1：熵：系统越有序，熵值越低；系统越混乱或者分散，熵值越高。"><a href="#1-1：熵：系统越有序，熵值越低；系统越混乱或者分散，熵值越高。" class="headerlink" title="1.1：熵：系统越有序，熵值越低；系统越混乱或者分散，熵值越高。"></a>1.1：熵：<strong>系统越有序，熵值越低；系统越混乱或者分散，熵值越高</strong>。</h3><h4 id="用于处理离散型数据"><a href="#用于处理离散型数据" class="headerlink" title="用于处理离散型数据"></a><strong>用于处理离散型数据</strong></h4><p>熵的描述：是描述信息的混乱程度</p>
<ul>
<li><strong>从信息的完整性上进行的描述:</strong><ul>
<li>当<strong>系统的有序状态一致时</strong>，数据越集中的地方熵值越小，数据越分散的地方熵值越大。</li>
</ul>
</li>
<li><strong>从信息的有序性上进行的描述</strong>:<ul>
<li>当<strong>数据量一致时</strong>，<strong>系统越有序，熵值越低；系统越混乱或者分散，熵值越高</strong>。</li>
</ul>
</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/1.png' height=px ></li>
</ul>
<h3 id="1-2：决策树的划分依据一—-信息增益：最大值划分节点"><a href="#1-2：决策树的划分依据一—-信息增益：最大值划分节点" class="headerlink" title="1.2：决策树的划分依据一—-信息增益：最大值划分节点"></a>1.2：决策树的划分依据一—-信息增益：最大值划分节点</h3><ul>
<li><p><strong>信息增益：</strong>以某特征划分数据集前后的熵的差值。熵可以表示样本集合的不确定性，熵越大，样本的不确定性就越大。因此可以<strong>使用划分前后集合熵的差值来衡量使用当前特征对于样本集合D划分效果的好坏</strong>。</p>
</li>
<li><p><strong>信息增益 =  entroy(前) - entroy(后)</strong></p>
</li>
<li><p><strong>信息增益的公式</strong>：信息增益越大优先取最大的进行分支，优先排序：把最大的优先排到前面</p>
</li>
<li><p><strong>概率比值</strong>：通过是否进行操作，是否共涉及总数比值是的多少和否的多少，进行比值计算成信息熵</p>
</li>
<li><p><strong>计算的步骤</strong>：先算出总体的信息熵，再算出部分属性的信息熵，再进行计算信息的增益率</p>
<ul>
<li>分配的概率需要注意一下、</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/2.png' height=px ></li>
<li>接触的例子：</li>
</ul>
<h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/3.png' height=px ></li>
</ul>
</li>
</ul>
<p>上式中求出的信息增益越大影响越大，相反小影响越小。</p>
<h3 id="1-3：决策树的划分依据2–信息增益率C4-5：解决过拟合，缺失值"><a href="#1-3：决策树的划分依据2–信息增益率C4-5：解决过拟合，缺失值" class="headerlink" title="1.3：决策树的划分依据2–信息增益率C4.5：解决过拟合，缺失值"></a>1.3：决策树的划分依据2–信息增益率C4.5：解决过拟合，缺失值</h3><ul>
<li><p><strong>后剪枝：后剪枝防止过拟合</strong></p>
</li>
<li><p><strong>对于缺失值的处理</strong></p>
</li>
<li><p>公式</p>
<ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/4.png' height=px ></li>
<li>固有值：IV：以某个类别进行计算</li>
</ul>
<h3 id="信息增益率"><a href="#信息增益率" class="headerlink" title="信息增益率"></a>信息增益率</h3><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/5.png' height=px ></li>
</ul>
</li>
</ul>
<h3 id="2：基尼值基尼指数-，CART算法：评判分类的更进一步简化，如算法程度"><a href="#2：基尼值基尼指数-，CART算法：评判分类的更进一步简化，如算法程度" class="headerlink" title="2：基尼值基尼指数 ，CART算法：评判分类的更进一步简化，如算法程度"></a>2：基尼值基尼指数 ，CART算法：评判分类的更进一步简化，如算法程度</h3><h3 id="只能进行2分类"><a href="#只能进行2分类" class="headerlink" title="只能进行2分类"></a>只能进行2分类</h3><h4 id="2-1：基尼值：从数据集D中随机抽取两个样本，其类别标记不一致的概率。故，Gini（D）值越小，数据集D的纯度越高。"><a href="#2-1：基尼值：从数据集D中随机抽取两个样本，其类别标记不一致的概率。故，Gini（D）值越小，数据集D的纯度越高。" class="headerlink" title="2.1：基尼值：从数据集D中随机抽取两个样本，其类别标记不一致的概率。故，Gini（D）值越小，数据集D的纯度越高。"></a>2.1：基尼值：从数据集D中随机抽取两个样本，其类别标记不一致的概率。<strong>故，Gini（D）值越小，数据集D的纯度越高。</strong></h4><ul>
<li><strong>基尼的运算</strong>：用是否的是的数和是否的否的数经行计算，如下案例：</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/6.png' height=px ></li>
<li><strong>基尼值案例</strong></li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/7.png' height=px ></li>
<li></li>
<li><strong>基尼指数案例每一个属性就是一种基尼指数，基尼指数越小就用它划分结果</strong></li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/8.png' height=px ></li>
</ul>
<h3 id="3：预剪枝，后剪枝：剪掉是因为属性太多，形成噪声，错误的属性误导"><a href="#3：预剪枝，后剪枝：剪掉是因为属性太多，形成噪声，错误的属性误导" class="headerlink" title="3：预剪枝，后剪枝：剪掉是因为属性太多，形成噪声，错误的属性误导"></a>3：预剪枝，后剪枝：剪掉是因为属性太多，形成噪声，错误的属性误导</h3><ul>
<li>**预剪枝(局部最优解)**：是为了不让数据形成过拟合，内存占比较小，通过信息增益率找到影响数据样本的属性，把不能有泛化性的提升的其他的不必要的属性经行剪掉，没有得到提升就没有什么用</li>
<li><strong>后剪枝（）</strong>：先把整个数据的树形成，从最后的面叶节点上开始经行对比，找到影响较小的属性经行剪掉<ul>
<li>这个要占空间较大，形成的欠拟合更小一些，</li>
</ul>
</li>
</ul>
<h3 id="4：特征的提取，特征工程，特征处理："><a href="#4：特征的提取，特征工程，特征处理：" class="headerlink" title="4：特征的提取，特征工程，特征处理："></a>4：特征的提取，特征工程，特征处理：</h3><ul>
<li>将文本转换成数值</li>
<li>将类别转换成数值</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.<strong>feature_extraction</strong></td>
<td>特征提取等于小数时有百分之几做选择</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="4-1：字典提取：将字符串的类型转换成数值形式，对于特征当中存在类别信息做了one-hot编码处理"><a href="#4-1：字典提取：将字符串的类型转换成数值形式，对于特征当中存在类别信息做了one-hot编码处理" class="headerlink" title="4.1：字典提取：将字符串的类型转换成数值形式，对于特征当中存在类别信息做了one-hot编码处理"></a>4.1：字典提取：将字符串的类型转换成数值形式，<strong>对于特征当中存在类别信息</strong>做了<strong>one-hot编码处理</strong></h4><ul>
<li>节省空间，读取效率</li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.feature_extraction.<strong>DictVectorizer</strong>(sparse=True,…)</td>
<td><strong>字典特征提取</strong>：                                                        sparse：直接对应的参数，数值</td>
</tr>
<tr>
<td>DictVectorizer.<strong>fit_transform</strong>(X)</td>
<td>先拟合数据，在进行标准化，对部分数据先拟合fit，找到该part的整体指标，如均值、方差、最大值最小值等等（根据具体转换的目的），然后对该trainData进行转换transform，从而实现数据的标准化、归一化等等                                                                           X:字典或者包含字典的迭代器返回值 返回sparse矩阵</td>
</tr>
<tr>
<td>DictVectorizer.<strong>get_feature_names</strong>()</td>
<td>返回类别特征的名称</td>
</tr>
<tr>
<td>x_train和x_test.<strong>to_dict</strong>(orient=”records”)</td>
<td>数据进行字典类型的转换</td>
</tr>
</tbody></table>
<h4 id="4-2：文本的特征提取，经行英文词的统计的次数"><a href="#4-2：文本的特征提取，经行英文词的统计的次数" class="headerlink" title="4.2：文本的特征提取，经行英文词的统计的次数"></a>4.2：文本的特征提取，经行英文词的统计的次数</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td><strong>sklearn.feature_extraction.text.CountVectorizer(stop_words=[])</strong></td>
<td><strong>文本的特征提取</strong>                            stop_words=[]：没有用到词加入到里面就不进行提取</td>
</tr>
<tr>
<td>CountVectorizer.<strong>fit_transform</strong>(X)</td>
<td>X:文本或者包含文本字符串的可迭代对象  返回值:返回sparse矩阵</td>
</tr>
<tr>
<td>CountVectorizer.<strong>get_feature_names</strong>()</td>
<td>返回值:单词列表</td>
</tr>
<tr>
<td>已经转换成标准的变量.<strong>toarray</strong>()</td>
<td>形成可查看的数据形式</td>
</tr>
</tbody></table>
<p>【】里面的是：给出的数据是词频，对应着下边的词：出现一次为：1，出现多次是多个：</p>
<h4 id="4-3：中文的文本特征提取，统计次数，中文提取是因为经过了空格提取的"><a href="#4-3：中文的文本特征提取，统计次数，中文提取是因为经过了空格提取的" class="headerlink" title="4.3：中文的文本特征提取，统计次数，中文提取是因为经过了空格提取的"></a>4.3：中文的文本特征提取，统计次数，中文提取是因为经过了空格提取的</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>import  jieba</td>
<td></td>
</tr>
<tr>
<td>jieba.<strong>cut</strong>(变量,cut_all=False)</td>
<td>中文文本的提取</td>
</tr>
<tr>
<td>text = “ “.join(list(jieba.cut(text)))</td>
<td>经行从新的进行拼接          cut_all=False：不会对所有的值进行切割</td>
</tr>
</tbody></table>
<h4 id="4-4：Tf-idf文本特征提取个词或短语在一篇文章中出现的概率高，并且在其他文章中很少出现"><a href="#4-4：Tf-idf文本特征提取个词或短语在一篇文章中出现的概率高，并且在其他文章中很少出现" class="headerlink" title="4.4：Tf-idf文本特征提取个词或短语在一篇文章中出现的概率高，并且在其他文章中很少出现"></a>4.4：Tf-idf文本特征提取<strong>个词或短语在一篇文章中出现的概率高，并且在其他文章中很少出现</strong></h4><p><strong>词频概率的公式</strong>：某一个给定的词语在该文件中出现的频率                  出现的次数/总词数</p>
<p><strong>逆向文档频率</strong>：一个词语普遍重要性的度量                                              lg（总词数/出现的次数）× 词频概率</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.feature_extraction.text import <strong>TfidfVectorizer</strong></td>
<td><strong>Tf-idf文本特征提取</strong>个词或短语出现的概率</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="4-5：决策树的可视化："><a href="#4-5：决策树的可视化：" class="headerlink" title="4.5：决策树的可视化："></a>4.5：决策树的可视化：</h4><p><strong>可以生成树状图</strong>：形成DOT文件进行打开，复制里面内容，传入网址<a href="http://webgraphviz.com/">http://webgraphviz.com/</a>里面就能生成树</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.tree.<strong>export_graphviz</strong>()</td>
<td>该函数能够导出DOT（树图）格式</td>
</tr>
<tr>
<td>tree.<strong>export_graphviz</strong>(estimator,out_file=’tree.dot’,feature_names=[‘’,’’])</td>
<td><strong>estimator</strong>：那个训练模型，那个估计器                                         <strong>out_file=<strong>“地址.dot”：导入的那个文件夹</strong>feature_names</strong>：选择的特征有哪些名字</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="5：回归决策树：主要用于处理连续型数据。如果是分段处理的时候是用回归决策树，如果是不分段的是用线性回归，通过标签值来使用这两个哪一个"><a href="#5：回归决策树：主要用于处理连续型数据。如果是分段处理的时候是用回归决策树，如果是不分段的是用线性回归，通过标签值来使用这两个哪一个" class="headerlink" title="5：回归决策树：主要用于处理连续型数据。如果是分段处理的时候是用回归决策树，如果是不分段的是用线性回归，通过标签值来使用这两个哪一个"></a>5：回归决策树：<strong>主要用于处理连续型数据。</strong>如果是分段处理的时候是用回归决策树，如果是不分段的是用线性回归，通过标签值来使用这两个哪一个</h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.tree import <strong>DecisionTreeRegressor</strong></td>
<td><strong>max_depth</strong>: 树最大深度,可选，缺省None，                                   <strong>min_samples_split</strong> : 分割内部节点所需最少样本数,可选,缺省2 <strong>min_samples_leaf</strong> : 成为叶子节点所需最少样本, 可选, 缺省1 <strong>max_features</strong> : 寻找最佳分割时考虑的特征数目, 可选, 缺省None: float/比例, ‘sqrt’/sqrt(n_features), ‘log2’/log2(n_features)                   <strong>min_impurity_decrease</strong> : 如果节点分割导致不纯度减少超过此值，将进行分割，可选, 缺省0.0                                                                                            <strong>presort</strong> : 预排序，加速寻找最佳分割，可选，缺省False, 大数据集降低训练过程, 小训练集或受限深度，可加快训练                                             random_state: 缺省None; 若int, 随机数产生器seed, 若RandomStates实例, 随机数产生器, 若None, np.random</td>
</tr>
<tr>
<td><strong>函数调用</strong></td>
<td></td>
</tr>
<tr>
<td><strong>.fit(X,y)</strong></td>
<td>调用库函数决策树算法: 分类器y是整数或string;回归器y是浮点数</td>
</tr>
<tr>
<td><strong>.predict(X)</strong></td>
<td>预测样本类别或回归值，返回shape(n_samples)或(n_samples,n_outputs)</td>
</tr>
<tr>
<td><strong>.decision_path(X)</strong></td>
<td>返回决策路径，返回shape = [n_samples, n_nodes]</td>
</tr>
<tr>
<td><strong>.score(X_test, y_test)</strong></td>
<td>返回预测结果的R^2(1-u/v). u=((y_true - y_pred) ** 2).sum()                               v=((y_true - y_true.mean()) ** 2).sum()</td>
</tr>
<tr>
<td><strong>.apply(X</strong>)</td>
<td>返回每个样本预测为叶子的索引</td>
</tr>
<tr>
<td><strong>.n_features_</strong></td>
<td>执行’fit’时的特征数</td>
</tr>
<tr>
<td><strong>.n_outputs_</strong></td>
<td>执行’fit’时的输出数</td>
</tr>
<tr>
<td><strong>.tree_</strong></td>
<td>树对象</td>
</tr>
</tbody></table>
<h4 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/9.png' height=px >

<h4 id="5-1：在源于的数据上进行数据的处理：分成份，取平均"><a href="#5-1：在源于的数据上进行数据的处理：分成份，取平均" class="headerlink" title="5.1：在源于的数据上进行数据的处理：分成份，取平均"></a>5.1：在源于的数据上进行数据的处理：分成份，取平均</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/10.png' height=px >

<h4 id="5-2：取得计算取最小的值进行进行分组，下面6-5是最小的数，"><a href="#5-2：取得计算取最小的值进行进行分组，下面6-5是最小的数，" class="headerlink" title="5.2：取得计算取最小的值进行进行分组，下面6.5是最小的数，"></a>5.2：取得计算取最小的值进行进行分组，下面6.5是最小的数，</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/11.png' height=px >

<h4 id="5-3：循环进行划分"><a href="#5-3：循环进行划分" class="headerlink" title="5.3：循环进行划分"></a>5.3：循环进行划分</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/12.png' height=px >

<h4 id="5-4：形成回归树"><a href="#5-4：形成回归树" class="headerlink" title="5.4：形成回归树"></a>5.4：形成回归树</h4><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E5%86%B3%E7%AD%96%E6%A0%91/13.png' height=px >







]]></content>
      <categories>
        <category>算法，树</category>
      </categories>
      <tags>
        <tag>算法，树</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习，神经网络 -- 上</title>
    <url>/2020/02/10/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA--%E4%B8%8A/</url>
    <content><![CDATA[<h2 id="什么是机器学习"><a href="#什么是机器学习" class="headerlink" title="什么是机器学习"></a>什么是机器学习</h2><p>——-先观察后照做<br> ——-机器学习算法都试图以某种它可以的方式来模拟两个数据之间存在的模式，从而做到用一个数据集来预测另一个数据集<br> ——-机器学习的大部分工作都是训练某种监督分类器</p>
<ul>
<li>机器学习：<br> 机器学习是计算机科学的的一个分支，机器学习观察某个任务中存在的模式，并试图以某种直接或者间接的方式模仿它。</li>
</ul>
<h2 id="机器学习理论基础"><a href="#机器学习理论基础" class="headerlink" title="机器学习理论基础"></a>机器学习理论基础</h2><p><strong>机器学习工作流程的总结</strong></p>
<ul>
<li><p>获取数据集：<br> 要有多少的样本每个样本的特征，根据特征再进行归类成相应的目标值</p>
<pre><code> 1：数据要有代表性，否者会过拟合，（数据集尽量差异大，提取会更好）。
 2：对数据的分类问题，数据偏斜不能过严重，不同类别的数据数量不要有数量级的差距。
 3：对数据集的量级做一个评估，多少个样本，多少个特征，可以估算出内存的消耗，
     太大放不下就要考虑改进算法和做一些降维的技巧，如果数据集太大，就要考虑做分布式的处理方式。
</code></pre>
</li>
<li><p>数据集的基本处理：</p>
<pre><code> 1：数据的清洗很关键的一步，能够使算法效果和性能显著的提高：
     如归一化，离散化，因子化，缺失值的处理，去除共线性等，数据的挖掘过程就花在他们上面。
 2：数据的增强操作：翻转。
</code></pre>
</li>
<li><p>特征工程的提取：</p>
<pre><code> 1：良好的数据能过提取良好的特征才能发挥作用。
 2：筛选出显著的特征，放弃非显著的特征，非常简单的算法也能有不错的结果。
 3：需要运用有效性的分析相关的技术，相关的系数，卡方检验，平均互信息，条件熵，后验概率，逻辑回归权重等方法。
</code></pre>
</li>
<li><p>机器学习（构建模型训练）：<br> 训练的数据（70%-80%）测试数据集（20%-30%）</p>
<pre><code> 1：怎样才能把这些算法的（超参数）使得变得更加优良，理解越深才能更有效的提出优化的方案。
</code></pre>
</li>
<li><p>模型的评估：</p>
<pre><code> 没有达到要求，从新上面的步骤
 达到一定的要求，上线服务
</code></pre>
</li>
</ul>
<h2 id="机器学习的算法分类"><a href="#机器学习的算法分类" class="headerlink" title="机器学习的算法分类"></a>机器学习的算法分类</h2><p><strong>两种机器学习的主要类型：</strong><br> 数据集的组成不同，算法就有所不同</p>
<pre><code>    监督和无监督主要关注被学习的模式的类型
    无监督学习和监督学习都是将一个数据集转化为另一个数据集
</code></pre>
<ul>
<li><p>监督学习：你知道的—–》监督学习—-》你想知道的</p>
</li>
<li><p>监督机器学习：创建能接收可观察，可记录的，输入数据的方法，他能将转换为所需要再进行逻辑分析的有价值的输出数据。</p>
<pre><code> 他可以直接模仿两个数据集之间的模式，尝试获取一个输入数据集并将其转换为    
 对应的输出数据集：如使用像素来检测猫存在与否
</code></pre>
</li>
<li><p>监督学习对数据集进行转换</p>
</li>
<li><p>监督学习是一种将一个数据集转换为另一个数据集的方法</p>
<pre><code> 1：输入数据是由输入特征和目标值所组成的：
      （一）：函数的输出可以是一个连续的值（称为回归）
      （二）：或是输出是个有限的离散值（称为分类）
</code></pre>
</li>
<li><p>无监督学习：一系列的数据点—–》无监督学习—–》一系列的数据聚类标签。</p>
</li>
<li><p>将数据集进行聚类就是一种无监督学习： 聚类算法：将一系列数据点转换为对应的一系列类别的标签。</p>
</li>
<li><p>无监督学习对数据集进行分组</p>
<pre><code> 1：输入数据是由输入特征值组成，没有目标值：
     （一）：输入数据没有被标记，也没有确定的结果，数据类别未知
     （二）：需要根据样本间的相似性对样本进行类别的分类
</code></pre>
</li>
<li><p>半监督学习</p>
<pre><code> 1：训练集同时含有标记的数据和未标记的数据样本
</code></pre>
</li>
<li><p>强化学习：</p>
<pre><code> 1：实质是make decisions 问题，即自动进行决策，并且可以做练习决策
   （一）：五个元素：代理品，行动，奖励，环境，观察情况
   （二）：强化学习目标是获取最多的累计奖励
</code></pre>
<h2 id="四种不同类型的算法：监督或者无监督，参数或者无参数"><a href="#四种不同类型的算法：监督或者无监督，参数或者无参数" class="headerlink" title="四种不同类型的算法：监督或者无监督，参数或者无参数"></a>四种不同类型的算法：监督或者无监督，参数或者无参数</h2></li>
<li><p>监督和无监督的特性是：主要关注被学习的模式的类型</p>
</li>
<li><p>参数和非参数类型：主要关注存储学习参数的方式</p>
<h1 id="参数学习和非参数学习"><a href="#参数学习和非参数学习" class="headerlink" title="参数学习和非参数学习"></a>参数学习和非参数学习</h1></li>
<li><p>参数学习和非参数学习：试错学习和计数和概率<br> 参数是一种通用的术语，所指的仅是用于识别模式的-组数字–并不影响限制我们我们第一这些数字的正常使用，<br> 技术的参数权重是参数</p>
<pre><code> 主要关注存储学习参数的方式，更进一步说是关注学习的方法
 参数模型的特征是具有固定的数量的参数，而非参数的参数数量是无限的（由数据决定）
     1：参数模型倾向于试错法
     2：非参数模型倾向于计数法
</code></pre>
<h2 id="监督学习和强化学习的对比"><a href="#监督学习和强化学习的对比" class="headerlink" title="监督学习和强化学习的对比"></a>监督学习和强化学习的对比</h2><pre><code> 反馈映射:     
     监督学习：输出的是之间的关系，可以告诉算法什么样的输入对应着什么样的输出。     
     强化学习：输出的是给机器的反馈 reward function，即用来判断这个行为是好是坏。
 反馈时间     
     监督学习：做了比较坏的选择会立刻反馈给算法。     
     强化学习：结果反馈有延时，有时候可能需要走了很多步以后才知道以前的某一步的选择是好还是坏。
 输入特征     
     监督学习：输入是独立同分布的。     
     强化学习：面对的输入总是在变化，每当算法做出一个行为，它影响下一次决策的输入，一直在变化的
 
 拓展概念：什么是独立同分布：
</code></pre>
</li>
</ul>
<h2 id="监督参数学习：使用旋钮进行试错学习"><a href="#监督参数学习：使用旋钮进行试错学习" class="headerlink" title="监督参数学习：使用旋钮进行试错学习"></a>监督参数学习：使用旋钮进行试错学习</h2><ul>
<li>机器根据旋钮的角度对输入数据进行处理，并转换为预测结果</li>
</ul>
<p>预测—与真值进行比较—-学习模式<br> 通过调节参数来达到最好的预判结果</p>
<h2 id="无监督参数学习"><a href="#无监督参数学习" class="headerlink" title="无监督参数学习"></a>无监督参数学习</h2><p>无监督参数学习就是就是使用旋钮对数据经行分组，每个类别都设置了几个旋钮，每个旋钮都反映了输入数据到那个特等类别的相似度</p>
<h2 id="非参数学习：基于计数的方法"><a href="#非参数学习：基于计数的方法" class="headerlink" title="非参数学习：基于计数的方法"></a>非参数学习：基于计数的方法</h2><ul>
<li>参数算法有固定数量的参数，而非参数算法会根据数据集调整参数个数</li>
</ul>
<h2 id="神经网络：它将输入乘以权重，将输入“缩放”一定比例"><a href="#神经网络：它将输入乘以权重，将输入“缩放”一定比例" class="headerlink" title="神经网络：它将输入乘以权重，将输入“缩放”一定比例"></a>神经网络：它将输入乘以权重，将输入“缩放”一定比例</h2><p><strong>数据——-机器——预测</strong><br> <strong>预测——比较——学习—&gt;模式</strong><br> 神经网络做了：</p>
<pre><code> 将输入乘于权重
 将输入缩放一定比例
</code></pre>
<p><strong>神经网络的交互：</strong></p>
<pre><code>  接受输入变量，作为信息来源， 
  拥有权重变量，以此作为知识，
  然后融入信息和知识，输出预测结果
</code></pre>
<p><strong>理解神经网络权重：</strong></p>
<pre><code>是将它作为网络的输入和预测之间敏感度的度量，

权重非常的高，即使最小的输入也会对预测结果产生非常大的影响，权重非常小时再大的输入也只能对预测产生很小的扰动
</code></pre>
<p><strong>多种输入</strong></p>
<pre><code>将三个输入或更多输入乘于三项权重，并使他们求和得到加权后的权和
</code></pre>
<p><strong>加权和（点积）</strong></p>
<pre><code>将每个输入乘于其各自的权重，然后对所有的局部预测结果进行求和则成为输入的加权和，简称点积
</code></pre>
<p><strong>点积</strong></p>
<pre><code> 点积让你了解两个向量之间的相似性，
 最大的加权和：出现在完全相同的向量之间
 向量之间没有重合的权重，点积为0
 重合的权重值为负数，这个会抵消掉他们之间的正相似性
</code></pre>
<p><strong>点积的属性</strong></p>
<pre><code>点积的属性类比作逻辑上的AND（与）操作，向量中没有相同的，最终得分为0
负权重值往往意味着逻辑上的NOT（非）运算符，因为任何正权值与负权值配对都会导致得分下降，两个为负的就会得正值
</code></pre>
<p>OR（或）如果任何一行的权重不为0，分数就会受到影响</p>
<p><strong>简单的神经网络</strong></p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np存储的维度元素数组
weights <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数值为权重</span>
<span class="token comment" spellcheck="true">#array:为NP中的存储元组的维度</span>
<span class="token keyword">def</span> <span class="token function">neural_network</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>weights<span class="token punctuation">)</span>
    pred <span class="token operator">=</span> input<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>weights<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#dot:为Numpy中的乘</span>
    returu pred
toes <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8.5</span><span class="token punctuation">,</span><span class="token number">9.5</span><span class="token punctuation">,</span><span class="token number">9.9</span><span class="token punctuation">,</span><span class="token number">9.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#数值为输入信息数据</span>
wlrec <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.65</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
nfans <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.3</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
input <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>toes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>wlerc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>nfans<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pred <span class="token operator">=</span> neural_network<span class="token punctuation">(</span>input<span class="token punctuation">,</span>weights<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pred<span class="token punctuation">)</span>
</code></pre>
<h2 id="误差"><a href="#误差" class="headerlink" title="误差"></a>误差</h2><p>预测出来的结果与实际中的结果存在着多少的误差</p>
<ul>
<li>均方误差：是评估神经网络准确性的众多方法之一</li>
<li>比较是在逻辑上的输出是“冷/热”这一类信号</li>
<li>提升权重：up_prediction = input*(weight+step_amount)#step_amount=0.001(增加权重值)</li>
</ul>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li><strong>学习</strong>：就是告诉权重应该如何改变以及降低误差，深度学习最流行的方法为：梯度下降，在预测步骤结束时：学习这一步会为每项权重计算一个数字，这个数字告诉我们，减少误差，权重应该向那个方向变化，然后，我们根据这个数字对权重做出相应的调节，直到达到目的。</li>
<li><strong>学习</strong>：学习就是调整权重，将误差减小到0</li>
</ul>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p>这一步会让你知道自己的模型错了多少</p>
<ul>
<li>比较：你是的神经网络是否做好的预测</li>
</ul>
<h2 id="测量误差"><a href="#测量误差" class="headerlink" title="测量误差"></a>测量误差</h2><ul>
<li>训练神经网络的目的是做出正确的预测</li>
<li>纯误差：（（权重<em>输入数据）-  真实数据） -均方误差：（（权重</em>输入数据）-  真实数据）**2 将误差进行平方，进负数的误差进行正值，和将更大的误差更大，更小的误差更小（小于1的数更小，大于1的数更大）</li>
<li>冷热学习：就是通过扰动权重从新确定向那个方向调整可以使得误差的降低幅度最大，基于此将权重值向那个方向移动<br> 权重实际进行调节取决于那个方向所得到的误差更小</li>
<li>执行缩放，负值翻转和停止调节对纯误差进行修正以及更新权重（（权重*输入）- 真实数据）× 输入数据</li>
<li>缩放，停止，负值反转：三个属性作用进纯误差转换为我们需要的权重调节的绝对幅度</li>
</ul>
<pre class=" language-python"><code class="language-python">weight <span class="token operator">=</span> <span class="token number">0.5</span><span class="token comment" spellcheck="true">#权重</span>
input <span class="token operator">=</span> <span class="token number">0.5</span><span class="token comment" spellcheck="true">#数据</span>
goal_prediction <span class="token operator">=</span> <span class="token number">0.8</span><span class="token comment" spellcheck="true">#真实的值（goal_pred:真值）</span>
step_amount <span class="token operator">=</span> <span class="token number">0.001</span><span class="token comment" spellcheck="true">#权重增加的值</span>
<span class="token keyword">for</span> iteration <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1101</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#循环迭代预测</span>
predidction <span class="token operator">=</span> input <span class="token operator">*</span> weight <span class="token comment" spellcheck="true">#预测出来的值</span>
weight_delta<span class="token punctuation">(</span>误差增量就是你的导数<span class="token punctuation">)</span>
error <span class="token operator">=</span> <span class="token punctuation">(</span>predidction <span class="token operator">-</span> goal_prediction<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token comment" spellcheck="true">#误差值进行平方</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token operator">+</span> str<span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"predidction:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>predidction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#</span>
up_prediction <span class="token operator">=</span> input <span class="token operator">*</span> <span class="token punctuation">(</span>weight <span class="token operator">+</span> srep_amount<span class="token punctuation">)</span>
up_error <span class="token operator">=</span> goal_prediction <span class="token operator">-</span> up_prediction<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>
down_predicton <span class="token operator">=</span> input <span class="token operator">*</span> <span class="token punctuation">(</span>weight <span class="token operator">-</span> dtep_amount<span class="token punctuation">)</span>
down_error <span class="token operator">=</span><span class="token punctuation">(</span>goal_prediction <span class="token operator">-</span> down_prediction<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>down_error <span class="token operator">&lt;</span> up_error<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weight <span class="token operator">=</span> weight <span class="token operator">-</span> step_amount
<span class="token keyword">if</span> <span class="token punctuation">(</span>down_error <span class="token operator">></span> up_error<span class="token punctuation">)</span><span class="token punctuation">:</span>
    weight <span class="token operator">=</span> weight <span class="token operator">+</span> step_amount
</code></pre>
<h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降:"></a>梯度下降:</h2><h3 id="更新出来的新权重的值-weight-：（（（权重-×-输入）-真实数据）×-输入）×-训练之前确定的权重增量的值（alpha）"><a href="#更新出来的新权重的值-weight-：（（（权重-×-输入）-真实数据）×-输入）×-训练之前确定的权重增量的值（alpha）" class="headerlink" title="**更新出来的新权重的值(weight)**：（（（权重 × 输入）- 真实数据）× 输入）× 训练之前确定的权重增量的值（alpha）"></a>**更新出来的新权重的值(weight)**：（（（权重 × 输入）- 真实数据）× 输入）× 训练之前确定的权重增量的值（alpha）</h3><p><strong>alpha</strong>：调节控制网络学习的速度。<br> 测量误差，找出权重调节的方向和幅度，对方向和幅度的计算，对权重进行调整以减少错误<br> direction_and_amount = (pred - goal_pred) * input<br> #纯误差，<br> #与输入相乘，用于执行缩放，负值反转和停止调节，对纯误差进行修正以更新权重</p>
<ul>
<li><strong>预测的数据（pred）</strong>：权重*输入</li>
<li><strong>输出节点（delta）</strong>：（权重*输入）- 真实数据（delta）<br> ：当前节点的变化以便完美第预测结果</li>
<li><strong>误差的增量（weight_delta</strong>）：（（权重*输入）- 真实数据）× 输入数据：将权重的输出节点增加（delta）乘以权重的输入，进行权重缩放操作<br> ：基于导数对权重移动的方向和数量的估计</li>
<li>原始权重 - 权重的增量</li>
<li>**更新出来的新权重的值(weight)*<em>：（（（权重</em>输入）- 真实数据）× 输入）× 训练之前确定的权重增量的值（alpha）<br> <strong>纯误差</strong>：预测值和真实值的差值，表示当前的错误的原始方向和幅度，如果是一个正值，那么预测就太高了，反之亦然，如果很大的数字那么就错了很多<br> <strong>停止调节</strong>：例子CD碟片插入立体播放机，把音量调到最大，但是CD播放器是关着的，就是输入为0时，模型就不会进行学习，所有的权重值都会产生相同的误差，对其进行调节没有什么区别，预测的一直为0，<br> <strong>负值翻转</strong>：当输入为负值时纯误差也为负值，再进与输入相乘，权重向着正值方向前进<br> <strong>缩放</strong>：是对纯误差进行第三项修正，是输入引起，如果输入很大，则权重更新也会变得更大，就相当于副作用，进程可能失去控制，<br> <strong>权重修改</strong>：权重的修改，能够使预测的值之间的误差逐渐接近于0，达到预测值和真实值无限接近</li>
</ul>
<pre class=" language-python"><code class="language-python">weight<span class="token punctuation">,</span>goal_pred<span class="token punctuation">,</span>input <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.8</span><span class="token punctuation">,</span><span class="token number">1.1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#权重， 真实值，  输入</span>
<span class="token keyword">for</span> iteration <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----\nWeight:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pred <span class="token operator">=</span> input<span class="token operator">*</span>weight  <span class="token comment" spellcheck="true">#输入乘权重预测值</span>
    error <span class="token operator">=</span> <span class="token punctuation">(</span>pred <span class="token operator">-</span> goal_pred<span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token comment" spellcheck="true">#预测值-真实值的平方：均方误差</span>
    delta <span class="token operator">=</span> pred <span class="token operator">-</span> goal_pred<span class="token comment" spellcheck="true">#纯误差</span>
    weight_delta <span class="token operator">=</span> delta <span class="token operator">*</span> input<span class="token comment" spellcheck="true">#反转预测后的值数</span>
    weight <span class="token operator">=</span> weight <span class="token operator">-</span> weight_delta<span class="token comment" spellcheck="true">#节点delta值，实际误差与反转后判定的进行相互补</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"prediction:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>pred<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"delta:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>delta<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"weight delta:"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>weight_delta<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="误差减小"><a href="#误差减小" class="headerlink" title="误差减小"></a>误差减小</h2><p>为了使误差减小，我们尽力去寻求权重应该变化的方向和幅度，导数给出了函数中任意两个变量之间的关系，我们可以用导数来确定权重和误差之间的关系，然后把权重的值向导数的反方向移动，就能得到使误差更小的权重值。</p>
<h2 id="学习就是减少误差"><a href="#学习就是减少误差" class="headerlink" title="学习就是减少误差"></a>学习就是减少误差</h2><ol>
<li>可以修改权重减少误差：就是找到正确的方向和幅度来改变权重，使误差减小</li>
<li>原始权重 - 权重的增量</li>
<li>用斜率来帮助神经网络减少的误差：不管你在碗型曲线的那个位置，斜率都指向碗的底部（此时误差最小）</li>
</ol>
<h2 id="学习就是调整权重将误差减小到0"><a href="#学习就是调整权重将误差减小到0" class="headerlink" title="学习就是调整权重将误差减小到0"></a>学习就是调整权重将误差减小到0</h2><ol>
<li>改变权重值误差的变化就是变化量</li>
<li>给定一个函数，如果你改变其中一个变量，则它的导数代表了另一个变量发生变化的方向和幅度</li>
<li>导数是直线或者曲线上的一点斜率</li>
<li>画出U型曲线：曲线的斜率是正值，这个点就在右边，曲线的斜率为负值</li>
<li>斜率的符号表示方向，斜率的坡度表示量你可以使这两个方法来帮助我们找到目标权重</li>
<li>导数代表着，某个函数中两个变量之间的关系</li>
<li>误差的增量就是你的导数（weight_delta*<em>）：（（权重</em>输入）- 真实数据）× 输入数据：将权重的输出节点增加（delta）乘以权重的输入，进行权重缩放操作，</li>
<li>画出来的虚色直线是斜率，也是导数，当改变权重时误差会跟着变化多少，如果方向是朝下的，也就说斜率就是负的</li>
<li>直线或曲线的斜率总是与error最低点的方向相反，所以斜率是负的就增加weight寻求最小的error</li>
</ol>
<h2 id="深度学习的目标"><a href="#深度学习的目标" class="headerlink" title="深度学习的目标"></a>深度学习的目标</h2><ol>
<li>就是误差的减小，尽力寻求权重应该变化的方向和幅度，可以用导数来确定权重和误差之间的关系，然后再把权重的值再向导数的反方向移动，就能得到使误差更小的权重值</li>
</ol>
<h2 id="引用α"><a href="#引用α" class="headerlink" title="引用α"></a>引用α</h2><ol>
<li>α又名alpha：能够减少权重的增量，取值范围0到1之间<br> 把 weight_delta 变量名替换成derivative<br> 2.*更新出来的新权重的值： weight  = weight - (alpha * derivative)</li>
</ol>
<p><strong>引用α变量</strong></p>
<pre class=" language-bash"><code class="language-bash">weight <span class="token operator">=</span> 0.5<span class="token comment" spellcheck="true">#权重</span>
goal_pred <span class="token operator">=</span> 0.8<span class="token comment" spellcheck="true">#真实值</span>
input <span class="token operator">=</span> 2.0<span class="token comment" spellcheck="true">#输入值</span>
alpha <span class="token operator">=</span> 0.1<span class="token comment" spellcheck="true">#α值</span>
<span class="token keyword">for</span> iteration <span class="token keyword">in</span> range<span class="token punctuation">(</span>20<span class="token punctuation">)</span>:
    pred <span class="token operator">=</span> input * weight<span class="token comment" spellcheck="true">#预测值</span>
    error <span class="token operator">=</span> <span class="token punctuation">(</span>pred - goal_pred<span class="token punctuation">)</span>**2<span class="token comment" spellcheck="true">#误差值（均方误差）</span>
    derivative <span class="token operator">=</span> input * <span class="token punctuation">(</span>pred - goal_pred<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#误差增量:输入数据乘（预测值减去真实值）</span>
    weight <span class="token operator">=</span> weight - <span class="token punctuation">(</span>alpha * derivative <span class="token punctuation">)</span><span class="token comment" spellcheck="true">#更新后的权重：权重值减去（误差增量乘a值）</span>
    print<span class="token punctuation">(</span><span class="token string">"Error:"</span> +str<span class="token punctuation">(</span>error<span class="token punctuation">)</span> + <span class="token string">"Predicton:"</span> + str<span class="token punctuation">(</span>pred<span class="token punctuation">))</span>
</code></pre>
<h2 id="一直更新的权重值"><a href="#一直更新的权重值" class="headerlink" title="一直更新的权重值"></a>一直更新的权重值</h2><p>weight（一直更新权重值） =初始权重值   – [ {（【<strong>预测值：</strong>（输入值×权重值）】减去–【真实值】）×【输入值】} × 【α】]</p>
<ol>
<li>预测值 = 输入值×权重值</li>
<li>误差增量 = （预测值 – 真实值）× 输入值</li>
<li>更新权重值 = 权重值 - （α × 误差增量）</li>
</ol>
<pre class=" language-bash"><code class="language-bash">def w_sum<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span>:
    assert <span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>b<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#断言:assert:如不相等则抛出异常</span>
    output <span class="token operator">=</span> 0<span class="token comment" spellcheck="true">#建立一个空变量</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">))</span>:
        output +<span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * b <span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#权重与输入的数据</span>
        <span class="token keyword">return</span> output
weights <span class="token operator">=</span> <span class="token punctuation">[</span>0.1,0.2,-1<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#权重a</span>


def neural_network<span class="token punctuation">(</span>input,weights<span class="token punctuation">)</span>:
    pred <span class="token operator">=</span> w_sum<span class="token punctuation">(</span>input,weights<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用了上例的方法</span>
    <span class="token keyword">return</span> pred<span class="token comment" spellcheck="true">#返回了预测的值</span>

<span class="token comment" spellcheck="true">#预测和比较：做出预测，计算误差和增量</span>
toes <span class="token operator">=</span> <span class="token punctuation">[</span>8.5,9.5,9.9,9.0<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#踢进去的球</span>
wlrec <span class="token operator">=</span> <span class="token punctuation">[</span>0.65,0.8,0.8,0.9<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#胜率的百分比</span>
nfans <span class="token operator">=</span> <span class="token punctuation">[</span>1.2,1.3,0.5,1.0<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#粉丝的数量</span>
win_or_lose_binary <span class="token operator">=</span> <span class="token punctuation">[</span>1,1,0,1<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#四队的真实值</span>
<span class="token boolean">true</span> <span class="token operator">=</span> win_or_lose_binary<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#遍历调用列表值</span>
input <span class="token operator">=</span> <span class="token punctuation">[</span>toes<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,wlrec<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,nfans<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#输入遍历的值</span>
pred <span class="token operator">=</span>neural_network<span class="token punctuation">(</span>input,weights<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用方法</span>
error <span class="token operator">=</span> <span class="token punctuation">(</span>pred - true<span class="token punctuation">)</span> ** 2<span class="token comment" spellcheck="true">#误差值</span>
delta <span class="token operator">=</span> pred - <span class="token boolean">true</span><span class="token comment" spellcheck="true">#纯误差，预测值-真实值</span>

<span class="token comment" spellcheck="true">#学习计算权重增量，将它应用对应的权重上</span>

def ele_mul<span class="token punctuation">(</span>number,vector<span class="token punctuation">)</span>:<span class="token comment" spellcheck="true">#误差的增量，权重误差乘于输入值</span>
    output <span class="token operator">=</span> <span class="token punctuation">[</span>0,0,0<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#值的增量</span>
    assert <span class="token punctuation">(</span>len<span class="token punctuation">(</span>output<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>vector<span class="token punctuation">))</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>output<span class="token punctuation">))</span>:
        output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number * vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#更新权重的误差值，纯误差乘于输入值</span>
    <span class="token keyword">return</span> output

input <span class="token operator">=</span> <span class="token punctuation">[</span>toes<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,wlrec<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,nfans<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#输入值</span>
pred <span class="token operator">=</span><span class="token punctuation">(</span>pred - true<span class="token punctuation">)</span> ** 2<span class="token comment" spellcheck="true">#均方误差</span>
delta <span class="token operator">=</span> pred - <span class="token boolean">true</span><span class="token comment" spellcheck="true">#纯误差</span>
weight_deltas <span class="token operator">=</span> ele_mul<span class="token punctuation">(</span>delta,input<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#调用方法</span>

<span class="token comment" spellcheck="true">#学习:更新权重</span>

input <span class="token operator">=</span> <span class="token punctuation">[</span>toes<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,wlrec<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,nfans<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span>
pred <span class="token operator">=</span> neural_network<span class="token variable"><span class="token punctuation">((</span>input<span class="token punctuation">,</span>weights<span class="token punctuation">))</span></span>
error <span class="token operator">=</span> <span class="token punctuation">(</span>pred - true<span class="token punctuation">)</span> ** 2
delta <span class="token operator">=</span> pred - <span class="token boolean">true</span>
weight_deltas <span class="token operator">=</span> ele_mul<span class="token punctuation">(</span>delta,input<span class="token punctuation">)</span>
alpha <span class="token operator">=</span> 0.1<span class="token comment" spellcheck="true">#alpha防止权重过度修正</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>weights<span class="token punctuation">))</span>:
    weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> -<span class="token operator">=</span> alpha*weight_deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    print<span class="token punctuation">(</span><span class="token string">"weights:"</span>+str<span class="token punctuation">(</span>weights<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"weights Deltas:"</span>+str<span class="token punctuation">(</span>weight_deltas<span class="token punctuation">))</span>
<span class="token comment" spellcheck="true">#先用方法构成预测数值</span>
def neursl_network<span class="token punctuation">(</span>input,weights<span class="token punctuation">)</span>:
    out <span class="token operator">=</span> 0
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>input<span class="token punctuation">))</span>:
        out +<span class="token operator">=</span> <span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span>*weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#预测的值</span>
    <span class="token keyword">return</span> out

<span class="token comment" spellcheck="true">#预测值乘于输入值，</span>
def ele_mul<span class="token punctuation">(</span>scalar,vector<span class="token punctuation">)</span>:
    out <span class="token operator">=</span> <span class="token punctuation">[</span>0,0,0<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#有4队但是只有测出来的三个类型</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>out<span class="token punctuation">))</span>:
        out<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vector<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * scalar
    <span class="token keyword">return</span> out

<span class="token comment" spellcheck="true"># 输入数据</span>
toes <span class="token operator">=</span> <span class="token punctuation">[</span>8.5,9.5,9.9,9.0<span class="token punctuation">]</span>
wlrec <span class="token operator">=</span> <span class="token punctuation">[</span>0.65,0.8,0.8,0.9<span class="token punctuation">]</span>
nfans <span class="token operator">=</span> <span class="token punctuation">[</span>1.2,1.3,0.5,1.0<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 真实数据</span>
win_or_lose_binary <span class="token operator">=</span> <span class="token punctuation">[</span>1,1,0,1<span class="token punctuation">]</span>

<span class="token boolean">true</span> <span class="token operator">=</span> win_or_lose_binary <span class="token punctuation">[</span>0<span class="token punctuation">]</span>
alpha <span class="token operator">=</span> 0.01
weights <span class="token operator">=</span> <span class="token punctuation">[</span>0.1,0.2,-0.1<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#权重值</span>
input <span class="token operator">=</span> <span class="token punctuation">[</span>toes<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,wlrec<span class="token punctuation">[</span>0<span class="token punctuation">]</span>,nfans<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> iter <span class="token keyword">in</span> range<span class="token punctuation">(</span>3<span class="token punctuation">)</span>:
    pred <span class="token operator">=</span> neursl_network<span class="token punctuation">(</span>input,weights<span class="token punctuation">)</span>
    error <span class="token operator">=</span> <span class="token punctuation">(</span>pred - true<span class="token punctuation">)</span>**2<span class="token comment" spellcheck="true">#均方误差值</span>
    delta <span class="token operator">=</span> pred - <span class="token boolean">true</span><span class="token comment" spellcheck="true">#纯误差值</span>
    weight_deltas <span class="token operator">=</span> ele_mul<span class="token punctuation">(</span>delta,input<span class="token punctuation">)</span>
    print<span class="token punctuation">(</span><span class="token string">"Iteration:"</span> + str<span class="token punctuation">(</span>iter+1<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"pred:"</span>+ str<span class="token punctuation">(</span>pred<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"eeore"</span>+ str<span class="token punctuation">(</span>error<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"delta:"</span>+ str<span class="token punctuation">(</span>delta<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"weights:"</span>,str<span class="token punctuation">(</span>weights<span class="token punctuation">))</span>
    print<span class="token punctuation">(</span><span class="token string">"weight_deltas"</span>,weight_deltas<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">#更新权重值</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>weights<span class="token punctuation">))</span>:
        weights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> -<span class="token operator">=</span> alpha*weight_deltas<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
</code></pre>
<h2 id="具有多个输入和输出的梯度下降"><a href="#具有多个输入和输出的梯度下降" class="headerlink" title="具有多个输入和输出的梯度下降"></a>具有多个输入和输出的梯度下降</h2><h3 id="一次学习多个权重值"><a href="#一次学习多个权重值" class="headerlink" title="一次学习多个权重值"></a>一次学习多个权重值</h3><p>每个单独权重对于全局误差所产生的影响的度量，因此，因为误差是共享的，当一项权重达到U型曲线的底部时，所有的权重都会达到U型的底部</p>
<p>权重A可能对应着重要的数据，对预测有着举足轻重的影响，但如果网络在训练中意外的找到一种不需要它也可能准确推断预测的情况，那么权重A则不将对预测结果产生任何影响。</p>
<p>误差由训练数据决定，任何网络的权重都可以任意取值，但给定任意特定权重的设置后，则误差值百分百由数据决定。</p>
<h2 id="具有多输入的梯度下降学习"><a href="#具有多输入的梯度下降学习" class="headerlink" title="具有多输入的梯度下降学习"></a>具有多输入的梯度下降学习</h2><p><strong>神经网络也可以用一个输入做多个预测</strong></p>
<p>一张图片（28×28）的像素矩阵输入到一维的神经网络中—-》把图片的压成一个1×784的向量，抽出第一行的像素值，再首尾相连，得到一个一维的像素列表（784像素长）</p>
]]></content>
      <categories>
        <category>机器学习，神经网络</category>
      </categories>
      <tags>
        <tag>机器学习，神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2020/02/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BTC/</url>
    <content><![CDATA[<h2 id="网络编程TC"><a href="#网络编程TC" class="headerlink" title="网络编程TC"></a>网络编程TC</h2><p>[TOC]</p>
<h2 id="P客户端"><a href="#P客户端" class="headerlink" title="P客户端"></a>P客户端</h2><table>
<thead>
<tr>
<th align="center">变量名称</th>
<th>变量使用方法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ifconfig</td>
<td>查看网络的ip</td>
</tr>
<tr>
<td align="center">ping</td>
<td>查看网络是否连通</td>
</tr>
<tr>
<td align="center">socket</td>
<td>网络编程包</td>
</tr>
<tr>
<td align="center">socket.AF_INET</td>
<td>ip地址</td>
</tr>
<tr>
<td align="center">socket.SOCK_STREAM</td>
<td>端口</td>
</tr>
<tr>
<td align="center">tcp_clien_socket.connect</td>
<td>客户端：传入ip和端口，用于建立与指定指定socket的连接</td>
</tr>
<tr>
<td align="center">tcp_clien_socket.send（字符串.encode(encoding=”utf-8”)）</td>
<td>send（）：把数据组转换成二进制，encode：写入编辑的字符串和要转成数据组的函数：encode（encoding = “”）</td>
</tr>
<tr>
<td align="center">字符串.encode(encoding=”utf-8”)）</td>
<td>encode：把字符串转换成数据组</td>
</tr>
<tr>
<td align="center">tcp_clien_socket.recv(数值)</td>
<td>套接字最大传入数据数值，接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞</td>
</tr>
<tr>
<td align="center">.decode()</td>
<td>对服务端发来的数据进行解码</td>
</tr>
<tr>
<td align="center">conn_socket.close()</td>
<td>关闭套接字</td>
</tr>
</tbody></table>
<h2 id="网络编程TCP服务端"><a href="#网络编程TCP服务端" class="headerlink" title="网络编程TCP服务端"></a>网络编程TCP服务端</h2><table>
<thead>
<tr>
<th>变量名称</th>
<th>变量使用方法</th>
</tr>
</thead>
<tbody><tr>
<td>socket</td>
<td>网络编程包</td>
</tr>
<tr>
<td>bind</td>
<td>服务端：创建ip和端口</td>
</tr>
<tr>
<td>tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)</td>
<td>端口的复用</td>
</tr>
<tr>
<td>tcp_sever_socket.listen（数值）</td>
<td>设置端口监听功能监听多少个数值上限</td>
</tr>
<tr>
<td>tcp_server_socket.accept()</td>
<td><code>accept()</code>接受一个客户端的连接请求，接收的数据用于recv，并返回一个新的套接字，用于了send分开数据和ip不同于以上<code>socket()</code>返回的用于监听和接受客户端的连接请求的套接字；，</td>
</tr>
</tbody></table>
<h2 id="扩展函数："><a href="#扩展函数：" class="headerlink" title="扩展函数："></a>扩展函数：</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数表达意思</th>
</tr>
</thead>
<tbody><tr>
<td>client_socket.recv(1024).<strong>decode()</strong></td>
<td>decode()：将查询的值翻译成其他的值，以其他形式表现出来</td>
</tr>
<tr>
<td><strong>os.listdir</strong></td>
<td>方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</td>
</tr>
<tr>
<td><strong>os.path.getsize()</strong></td>
<td><strong>获得文件的大小（字节）</strong></td>
</tr>
<tr>
<td>f.read（）</td>
<td>从文件指针所在的位置开始读</td>
</tr>
<tr>
<td>isdigit</td>
<td></td>
</tr>
</tbody></table>
<pre><code>
</code></pre>
<h2 id="静态服务器："><a href="#静态服务器：" class="headerlink" title="静态服务器："></a>静态服务器：</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数定义</th>
</tr>
</thead>
<tbody><tr>
<td>.open（“地址”，“要读或写”）</td>
<td>用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。</td>
</tr>
<tr>
<td>.read()</td>
<td>读取文件信息内容</td>
</tr>
<tr>
<td>英文：response</td>
<td>翻译：相应</td>
</tr>
<tr>
<td>英文：Server</td>
<td>翻译：服务器</td>
</tr>
<tr>
<td>localhost:8080</td>
<td>浏览器查看</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="使用多线程多客户端连接服务器，多发送信息"><a href="#使用多线程多客户端连接服务器，多发送信息" class="headerlink" title="使用多线程多客户端连接服务器，多发送信息"></a>使用多线程多客户端连接服务器，多发送信息</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> threading
<span class="token keyword">def</span> <span class="token function">duoe_sock</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        recv_data <span class="token operator">=</span> code_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        code_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"niaho1"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"quit"</span> <span class="token operator">or</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span>
    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    tcp_evelt_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    tcp_evelt_socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    tcp_evelt_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tcp_evelt_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        code_sock<span class="token punctuation">,</span>ip_lies <span class="token operator">=</span> tcp_evelt_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip:"</span><span class="token punctuation">,</span>ip_lies<span class="token punctuation">)</span>
        smeus_pskd <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>duoe_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        smeus_pskd<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="静态服务器返回固态页面："><a href="#静态服务器返回固态页面：" class="headerlink" title="静态服务器返回固态页面："></a>静态服务器返回固态页面：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    tcp_serer_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    tcp_serer_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
    tcp_serer_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tcp_serer_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        clien_sock<span class="token punctuation">,</span>client_abbr <span class="token operator">=</span> tcp_serer_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        clien_request_data <span class="token operator">=</span> clien_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10230</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>clien_request_data<span class="token punctuation">)</span>
        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./nksld.html"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#打开文件夹有会报错，异常处理</span>
            <span class="token comment" spellcheck="true"># f = open("当前文件夹","rb")</span>
            file_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 应答行</span>
        response_line <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>
        <span class="token comment" spellcheck="true"># 头</span>
        response_header <span class="token operator">=</span> <span class="token string">"Server:pwd\r\n"</span>
        <span class="token comment" spellcheck="true"># 体</span>
        response_body <span class="token operator">=</span> file_data<span class="token comment" spellcheck="true">#界面的数据</span>
        <span class="token comment" spellcheck="true">#应答数据</span>
        response_data<span class="token operator">=</span> <span class="token punctuation">(</span>response_line <span class="token operator">+</span> response_header <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> response_body
        clien_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response_data<span class="token punctuation">)</span>

        clien_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="静态服务器返回指定页面"><a href="#静态服务器返回指定页面" class="headerlink" title="静态服务器返回指定页面"></a>静态服务器返回指定页面</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>
        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>
            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>
                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>
                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>
                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
                tecponse_toes <span class="token operator">=</span> f_data
                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes
                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
            <span class="token keyword">finally</span><span class="token punctuation">:</span>
                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="静态服务器多线程任务"><a href="#静态服务器多线程任务" class="headerlink" title="静态服务器多线程任务"></a>静态服务器多线程任务</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> socket
<span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>
    recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>
        tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>
            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
            tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>
            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>
            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
            tecponse_toes <span class="token operator">=</span> f_data
            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes
            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
        <span class="token keyword">finally</span><span class="token punctuation">:</span>
            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>
        nues_sock <span class="token operator">=</span>  threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>nuws_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="静态服务器对象调用"><a href="#静态服务器对象调用" class="headerlink" title="静态服务器对象调用"></a>静态服务器对象调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">import</span> socket
<span class="token keyword">class</span> <span class="token class-name">Pues_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>
        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>
            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>
                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>
                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>
                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>
                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>
                tecponse_toes <span class="token operator">=</span> f_data
                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes
                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>
            <span class="token keyword">finally</span><span class="token punctuation">:</span>
                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">nuse_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            tcp_sock<span class="token punctuation">,</span> ip_sock <span class="token operator">=</span> self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> ip_sock<span class="token punctuation">)</span>
            nues_sock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>nuws_sock<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>

    nues <span class="token operator">=</span> Pues_sock<span class="token punctuation">(</span><span class="token punctuation">)</span>
    nues<span class="token punctuation">.</span>nuse_sock<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="静态服务器变换端口号"><a href="#静态服务器变换端口号" class="headerlink" title="静态服务器变换端口号"></a>静态服务器变换端口号</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> sys

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 获取执行python程序的终端命令行参数</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>
    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token comment" spellcheck="true"># 判断参数的类型，设置端口号必须是整型</span>
    <span class="token keyword">if</span> <span class="token operator">not</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 创建服务器对象</span>
    <span class="token comment" spellcheck="true"># 给Web服务器类的初始化方法添加一个端口号参数，用于绑定端口号</span>
    my_web_server <span class="token operator">=</span> HttpWebServer<span class="token punctuation">(</span>port<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 启动服务器</span>
    my_web_server<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h2 id="TCP协议是什么？提示：TCP定义及特点"><a href="#TCP协议是什么？提示：TCP定义及特点" class="headerlink" title="TCP协议是什么？提示：TCP定义及特点"></a>TCP协议是什么？提示：TCP定义及特点</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>传输控制协议，是一种面向连接，可靠的，基于字节流的传输层通讯协议</p>
<h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>面向连接：通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开连接，以释放系统资源</p>
<p>可靠的通信方式</p>
<p>基于字节流</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-TCP特点是什么？"><a href="#2-TCP特点是什么？" class="headerlink" title="2. TCP特点是什么？"></a>2. TCP特点是什么？</h2><p>提示：TCP特点及解释说明</p>
<p>基于字节流的</p>
<p>面向连接</p>
<p>可靠通信</p>
<p>在网络状况不佳的时候尽量降低系统由于重传带来的宽开销</p>
<p>通信连接维护是面向通信的两个端点，而不考虑中间网段和节点</p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="3-在TCP客户端使用connect的作用是什么？"><a href="#3-在TCP客户端使用connect的作用是什么？" class="headerlink" title="3. 在TCP客户端使用connect的作用是什么？"></a>3. 在TCP客户端使用connect的作用是什么？</h2><p>提示：connect的作用及connect()函数的参数形式</p>
<p>connenct：用于建立与指定指定socket的连接，对于流类套接口（SOCK—STREAMl类型），利用名字来与一个远程主机建立连接，一但套用接口调用成功，他就能收发数据，对于数据报类套接口（SOCK—STREAMl类型），则设置成一个缺省的目的并用它来进行后序的send与recv调用</p>
<h3 id="4-在TCP服务器中listen的作用是什么？"><a href="#4-在TCP服务器中listen的作用是什么？" class="headerlink" title="4. 在TCP服务器中listen的作用是什么？"></a>4. 在TCP服务器中listen的作用是什么？</h3><p>提示：listen()函数的作用及参数含义、</p>
<p>在网络中服务端是被动的，客户是主动的，被动要用listen来监听，listen（）作用是将socket（）得到一个sockfd被动监听的套接字，来通知内核来完成连接</p>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="5-简述tcp客户端创建的流程。"><a href="#5-简述tcp客户端创建的流程。" class="headerlink" title="5. 简述tcp客户端创建的流程。"></a>5. 简述tcp客户端创建的流程。</h2><p>提示：参考课件代码说出客户端创建步骤</p>
<p>创建一个套接字协议用：connenct赖建立连接</p>
<p>导入IP地址可端口</p>
<p>创建发送的数据用send（数据encode），先把字符串转换成数据组，在把数据组装换成二进制</p>
<p>设置最大字节数据：recv（）</p>
<p>接收客户端发来的数据用decode来解码</p>
<p>关闭套接字用close</p>
<h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="6-recv函数的参数表示什么含义？"><a href="#6-recv函数的参数表示什么含义？" class="headerlink" title="6. recv函数的参数表示什么含义？"></a>6. recv函数的参数表示什么含义？</h2><p>提示：recv()函数的作用及参数含义</p>
<p>接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞，直到有数据时进行读取，远程关闭并读取所有数据之后会返回空字符串</p>
<h2 id="7-简述TCP服务器创建的流程、"><a href="#7-简述TCP服务器创建的流程、" class="headerlink" title="7. 简述TCP服务器创建的流程、"></a>7. 简述TCP服务器创建的流程、</h2><p>提示：参考课件代码，说出服务器创建流程</p>
<p>1：创建套接字，进行网络协议</p>
<p>2：进行端口复用</p>
<p>3：进行bind进行套接字协议</p>
<p>4：进行与服务端监听连接的最大数值，listen</p>
<p>5：accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p>
<p>6：进行设置recv进行数据的阻塞，</p>
<p>7：给客户端发送一个数据用send（encode）来转成二进制</p>
<p>8：接收客户端发来的数据，用decode来进行解码</p>
<h2 id="8-accept的返回值分别代表的什么？"><a href="#8-accept的返回值分别代表的什么？" class="headerlink" title="8. accept的返回值分别代表的什么？"></a>8. accept的返回值分别代表的什么？</h2><p>提示：accept()函数的作用，及返回值的形式和返回值的含义</p>
<p>accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p>
<h2 id="9-完成TCP客户端的编写。"><a href="#9-完成TCP客户端的编写。" class="headerlink" title="9. 完成TCP客户端的编写。"></a>9. 完成TCP客户端的编写。</h2><p>服务器的ip和端口号需手动输入</p>
<p>要发送的信息需要手动输入</p>
<p>接收服务器返回的数据，并打印。</p>
<p>请在下方的注释下补充代码：</p>
<p>​       # 导入socket模块</p>
<pre><code>import socket
if __name__ == &#39;__main__&#39;:
    tcp_codne_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    tcp_codne_socket.connect((&quot;&quot;,8080))
    tcp_codne_socket.send(&quot;&quot;.encode())
    cone_recv = tcp_codne_socket.recv(1024)
    print(cone_recv.decode())
    tcp_codne_socket.close()
</code></pre>
<h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><h2 id="10-完成TCP服务的的编写"><a href="#10-完成TCP服务的的编写" class="headerlink" title="10. 完成TCP服务的的编写"></a>10. 完成TCP服务的的编写</h2><p>请在下方注释下补充代码：</p>
<p>  # 导入socket模块</p>
<pre><code>import socket
if __name__ == &#39;__main__&#39;:
    tcp_evens_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
    tcp_evens_socket.bind((&quot;&quot;,8080))
    tcp_evens_socket.listen(138)
    coet_socket,ip_mes = tcp_evens_socket.accept()
    recv_data = coet_socket.recv(1025)
    print(recv_data.decode())
    coet_socket.send(&quot;&quot;.encode())
    coet_socket.close()
</code></pre>
]]></content>
      <categories>
        <category>python高级</category>
      </categories>
      <tags>
        <tag>python高级</tag>
      </tags>
  </entry>
  <entry>
    <title>线性回归，逻辑回归</title>
    <url>/2021/11/04/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%EF%BC%8C%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="1：线性回归：属于预测模型"><a href="#1：线性回归：属于预测模型" class="headerlink" title="1：线性回归：属于预测模型"></a>1：线性回归：属于预测模型</h2><p><strong>评估线性损失的时</strong>：最小二乘法</p>
<h3 id="1-1：线性回归：是利用一个或者多个特征值（自变量）和目标值（因变量）之间的进行建模的一种分析方式"><a href="#1-1：线性回归：是利用一个或者多个特征值（自变量）和目标值（因变量）之间的进行建模的一种分析方式" class="headerlink" title="1.1：线性回归：是利用一个或者多个特征值（自变量）和目标值（因变量）之间的进行建模的一种分析方式"></a>1.1：线性回归：是利用一个或者多个特征值（自变量）和目标值（因变量）之间的进行建模的一种分析方式</h3><ul>
<li><h4 id="线性回归：就是利用回归方程（函数）对一个或多个自变量（特征值）和因变量（目标值）之间关系进行建模的一种分析方式"><a href="#线性回归：就是利用回归方程（函数）对一个或多个自变量（特征值）和因变量（目标值）之间关系进行建模的一种分析方式" class="headerlink" title="线性回归：就是利用回归方程（函数）对一个或多个自变量（特征值）和因变量（目标值）之间关系进行建模的一种分析方式"></a>线性回归：就是利用回归方程（函数）对一个或多个自变量（特征值）和因变量（目标值）之间关系进行建模的一种分析方式</h4></li>
<li><p><strong>特点：</strong>如果自变量只有一个为单变量回归，多个的话为多元回归</p>
<p>下面公式w为权重值</p>
</li>
</ul>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/1.png' height=px >

<h3 id="1-2：非线性关系："><a href="#1-2：非线性关系：" class="headerlink" title="1.2：非线性关系："></a>1.2：非线性关系：</h3><ul>
<li>下边的公式为非线性关系</li>
</ul>
<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/2.png' height=px >

<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td><strong>线性回归函数</strong></td>
<td></td>
</tr>
<tr>
<td>sklearn.linear_model.<strong>LinearRegression</strong>(fit_intercept=True)</td>
<td><strong>线性回归</strong>，fit_intercept=True是否计算偏置</td>
</tr>
<tr>
<td>LinearRegression.<strong>coef_</strong></td>
<td><strong>回归（权重值）系数：</strong>是多少</td>
</tr>
<tr>
<td>estimator.<strong>predict</strong>([[特征值,目标值]])</td>
<td><strong>形成的模型可以预测的结果：</strong>是多少</td>
</tr>
<tr>
<td>estimator.<strong>intercept_</strong></td>
<td>线性回规的偏置</td>
</tr>
</tbody></table>
<h3 id="1-3：损失函数：（（权重-输入数据）—-真实数据）-2"><a href="#1-3：损失函数：（（权重-输入数据）—-真实数据）-2" class="headerlink" title="1.3：损失函数：（（权重*输入数据）—  真实数据）**2"></a>1.3：损失函数：（（权重*输入数据）—  真实数据）**2</h3><h3 id="纯误差：-权重-输入数据）—-真实数据"><a href="#纯误差：-权重-输入数据）—-真实数据" class="headerlink" title="纯误差：                              权重*输入数据）—  真实数据"></a>纯误差：                              权重*输入数据）—  真实数据</h3><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/3.png' height=px >

<h3 id="1-4：均方误差"><a href="#1-4：均方误差" class="headerlink" title="1.4：均方误差"></a>1.4：均方误差</h3><ul>
<li><h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/4.png' height=px ></h4></li>
</ul>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.metrics.<strong>mean_squared_error</strong>(y_true, y_pred)</td>
<td><strong>均方误差回归损失：</strong>                y_true:真实值                             y_pred:预测值                               return:浮点数结果</td>
</tr>
<tr>
<td>mean_absolute_error(y_valid, y_pre)</td>
<td>平均绝对值误差</td>
</tr>
</tbody></table>
<h2 id="2：-正规方程：直接求出最小值（适合小型数据集）"><a href="#2：-正规方程：直接求出最小值（适合小型数据集）" class="headerlink" title="2： 正规方程：直接求出最小值（适合小型数据集）"></a>2： 正规方程：直接求出最小值（适合小型数据集）</h2><h3 id="正规方程-–-一蹴而就"><a href="#正规方程-–-一蹴而就" class="headerlink" title="正规方程 – 一蹴而就"></a>正规方程 – 一蹴而就</h3><ul>
<li>利用矩阵的逆,转置进行一步求解</li>
<li>只是适合样本和特征比较少的情况</li>
</ul>
<h3 id="2-1：优化算法公式："><a href="#2-1：优化算法公式：" class="headerlink" title="2.1：优化算法公式："></a>2.1：优化算法公式：</h3><ul>
<li><h3 id="正规方程：直接求出最小公式"><a href="#正规方程：直接求出最小公式" class="headerlink" title="正规方程：直接求出最小公式"></a>正规方程：直接求出最小公式</h3><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/5.png' height=px ></li>
</ul>
</li>
<li><h3 id="推导公式："><a href="#推导公式：" class="headerlink" title="推导公式："></a>推导公式：</h3><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/6.png' height=px ></li>
</ul>
</li>
</ul>
<h2 id="3-1：梯度下降（适合大型数据集）"><a href="#3-1：梯度下降（适合大型数据集）" class="headerlink" title="3.1：梯度下降（适合大型数据集）"></a>3.1：梯度下降（适合大型数据集）</h2><h3 id="梯度下降定义："><a href="#梯度下降定义：" class="headerlink" title="梯度下降定义："></a>梯度下降定义：</h3><ul>
<li><h4 id="在单变量的函数中，代表着函数在某个给定点的切线的斜率；"><a href="#在单变量的函数中，代表着函数在某个给定点的切线的斜率；" class="headerlink" title="在单变量的函数中，代表着函数在某个给定点的切线的斜率；"></a>在单变量的函数中，代表着函数在某个给定点的切线的斜率；</h4></li>
<li><h4 id="在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向；"><a href="#在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向；" class="headerlink" title="在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向；"></a>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向；</h4></li>
<li><p><strong>梯度下降的公式：</strong><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/7.png' height=px ></p>
</li>
<li><p><strong>α是什么：</strong>在梯度下降中被称为学习率或者是步长，可以通过α来控制每一步走的距离,不能走太快或者走的太慢</p>
</li>
<li><p><strong>梯度要乘一个负数</strong>：意味着就是朝着梯度相反的方向前进，降的时候最快</p>
</li>
</ul>
<h2 id="3-2：梯度下降的概念：负梯度就是求导"><a href="#3-2：梯度下降的概念：负梯度就是求导" class="headerlink" title="3.2：梯度下降的概念：负梯度就是求导"></a>3.2：梯度下降的概念：负梯度就是求导</h2><h3 id="3-21：概念性质："><a href="#3-21：概念性质：" class="headerlink" title="3.21：概念性质："></a>3.21：概念性质：</h3><ul>
<li><h4 id="步长："><a href="#步长：" class="headerlink" title="步长："></a>步长：</h4><ul>
<li><strong>步长决定了在梯度下降迭代的过程中，每一步沿梯度负方向前进的长度</strong></li>
</ul>
</li>
<li><h4 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h4><ul>
<li><strong>指的是样本中输入部分</strong></li>
</ul>
</li>
<li><h4 id="假设函数："><a href="#假设函数：" class="headerlink" title="假设函数："></a>假设函数：</h4><ul>
<li><strong>在监督学习中，为了拟合输入样本，而使用的假设函数，记为hθ(x)： hθ(x)=θ0+θ1x</strong>，，，，，，θ0：权重值</li>
</ul>
</li>
<li><h4 id="损失函数-均方误差"><a href="#损失函数-均方误差" class="headerlink" title="损失函数(均方误差):"></a>损失函数(均方误差):</h4><ul>
<li>为了评估模型拟合的好坏，<strong>通常用损失函数来度量拟合的程度。</strong>损失函数极小化，意味着拟合程度最好，对应的模型参数即为最优参数。</li>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/8.png' height=px ></li>
</ul>
</li>
</ul>
<h2 id="4：梯度下降的种类："><a href="#4：梯度下降的种类：" class="headerlink" title="4：梯度下降的种类："></a>4：梯度下降的种类：</h2><h3 id="4-1：全梯度下降（FGD）：代入全部样本在运行过程中不能添加新样本"><a href="#4-1：全梯度下降（FGD）：代入全部样本在运行过程中不能添加新样本" class="headerlink" title="4.1：全梯度下降（FGD）：代入全部样本在运行过程中不能添加新样本"></a>4.1：全梯度下降（FGD）：代入全部样本在运行过程中不能添加新样本</h3><h4 id="作法：在进行计算的时候-计算所有样本的误差平均值-作为我的目标函数"><a href="#作法：在进行计算的时候-计算所有样本的误差平均值-作为我的目标函数" class="headerlink" title="作法：在进行计算的时候,计算所有样本的误差平均值,作为我的目标函数"></a><strong>作法：</strong>在进行计算的时候,计算所有样本的误差平均值,作为我的目标函数</h4><p><strong>缺点</strong>：更新一次权重都需要计算所有样本误差，而实际问题中经常有上亿的训练样本，故效率偏低，且容易陷入局部最优解</p>
<ul>
<li><strong>批量梯度下降法</strong>，是梯度下降法最常用的形式，<strong>具体做法也就是在更新参数时使用所有的样本来进行更新。</strong> <strong>计算训练集所有样本误差</strong>，<strong>对其求和再取平均值作为目标函数</strong>。</li>
<li><strong>权重向量</strong>沿其梯度相反的方向移动，从而使当前目标函数减少得最多。</li>
<li><strong>公式θ为权重值</strong>：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/9.png' height=px ></li>
<li><strong>全梯度下降性质：</strong><ul>
<li>因为在<strong>执行每次更新时</strong>，我们需要在整个数据集上<strong>计算所有的梯度</strong>，所以批梯度下降法的<strong>速度会很慢</strong>，同时，批梯度下降法<strong>无法处理超出内存容量限制的数据集</strong>。</li>
<li><strong>批梯度下降法同样也不能在线更新模型，即在运行的过程中，不能增加新的样本</strong></li>
</ul>
</li>
</ul>
<h3 id="4-2：-随机梯度下降算法-SGD-：只代入一个样本更新循环重复过程"><a href="#4-2：-随机梯度下降算法-SGD-：只代入一个样本更新循环重复过程" class="headerlink" title="4.2： 随机梯度下降算法(SGD)：只代入一个样本更新循环重复过程"></a>4.2： 随机梯度下降算法(SGD)：只代入一个样本更新循环重复过程</h3><h4 id="作法：每次只选择一个样本进行考核"><a href="#作法：每次只选择一个样本进行考核" class="headerlink" title="作法：每次只选择一个样本进行考核"></a>作法：每次只选择一个样本进行考核</h4><p><strong>缺点</strong>：SG每次只使用一个样本迭代，若遇上噪声则容易陷入局部最优解，而且每一轮的梯度更新都完全与上一轮的数据无关</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>函数的性质</th>
</tr>
</thead>
<tbody><tr>
<td>from   sklearn.linear_model  import   <strong>SGDRegressor</strong>(loss=”squared_loss”, fit_intercept=True,max_iter=， learning_rate                                                            =’invscaling’, eta0=0.01)</td>
<td><strong>SGDRegressor</strong>类实现了随机梯度下降学习，<strong>loss函数和正则化惩罚项</strong>来拟合线性回归模型：                                                                             <strong>1：loss</strong>:损失类型  <strong>loss=”squared_loss”: 普通最小二乘法</strong>                 <strong>2：fit_intercept</strong>：是否计算偏置                                                             <strong>3：max_iter=数值</strong>：最大迭代次数，又称走了多少步                                                      <strong>4：learning_rate</strong> : string, optional：两个选择                                                              <strong>4.1：学习率填充</strong>                                                                                      **’constant’: eta = eta0 **：常数                                                                           <strong>‘optimal’: eta = 1.0 / (alpha（步长） * (t + t0)) [default]</strong>                                             随着迭代次数进行优化                                                                                   ‘invscaling’: eta = eta0 / pow(t, power_t)                                     <strong>power_t=0.25:存在父类当中</strong>                                                                      <strong>对于一个常数值的学习率来说，可以使用                                      learning_rate=’constant’                                                                              5：并使用eta0来指定学习率。</strong></td>
</tr>
<tr>
<td>SGDRegressor.coef_</td>
<td>回归系数</td>
</tr>
<tr>
<td>SGDRegressor.intercept_</td>
<td>偏置</td>
</tr>
</tbody></table>
<ul>
<li><h4 id="随机梯度下降算法：每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。"><a href="#随机梯度下降算法：每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。" class="headerlink" title="随机梯度下降算法：每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。"></a>随机梯度下降算法：<strong>每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。</strong></h4></li>
<li><h4 id="公式：-1"><a href="#公式：-1" class="headerlink" title="公式："></a>公式：<img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/10.png' height=px ></h4></li>
</ul>
<h3 id="4-3：小批量梯度下降算法：每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用FGD迭代更新权重。"><a href="#4-3：小批量梯度下降算法：每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用FGD迭代更新权重。" class="headerlink" title="4.3：小批量梯度下降算法：每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用FGD迭代更新权重。"></a>4.3：小批量梯度下降算法：<strong>每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用FGD迭代更新权重。</strong></h3><h4 id="作法：选择一部分样本进行考核"><a href="#作法：选择一部分样本进行考核" class="headerlink" title="作法：选择一部分样本进行考核"></a>作法：选择一部分样本进行考核</h4><ul>
<li><strong>公式：</strong><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/11.png' height=px ></li>
</ul>
<h3 id="4-4：-随机平均梯度下降算法-SAG-：在内存中为每一个样本都维护一个旧的梯度，随机选择第i个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数。"><a href="#4-4：-随机平均梯度下降算法-SAG-：在内存中为每一个样本都维护一个旧的梯度，随机选择第i个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数。" class="headerlink" title="4.4： 随机平均梯度下降算法(SAG)：在内存中为每一个样本都维护一个旧的梯度，随机选择第i个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数。"></a>4.4： 随机平均梯度下降算法(SAG)：<strong>在内存中为每一个样本都维护一个旧的梯度，随机选择第i个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数</strong>。</h3><h4 id="作法：会给每个样本都维持一个平均值-后期计算的时候-参考这个平均值"><a href="#作法：会给每个样本都维持一个平均值-后期计算的时候-参考这个平均值" class="headerlink" title="作法：会给每个样本都维持一个平均值,后期计算的时候,参考这个平均值"></a>作法：会给每个样本都维持一个平均值,后期计算的时候,参考这个平均值</h4><ul>
<li><strong>公式为：</strong><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/12.png' height=px ></li>
<li><strong>随机平均梯度下降算法(SAG)解释</strong>：我们知道sgd是当前权重减去步长乘以梯度，得到新的权重。sag中的a，就是平均的意思，具体说，就是在第k步迭代的时候，我考虑的这一步和前面n-1个梯度的平均值，当前权重减去步长乘以最近n个梯度的平均值。</li>
</ul>
<h2 id="5：欠拟合和过拟合"><a href="#5：欠拟合和过拟合" class="headerlink" title="5：欠拟合和过拟合"></a>5：欠拟合和过拟合</h2><p><strong>如何优化训练数据</strong> —&gt; 主要用于<strong>解决欠拟合问题</strong>—》集成学习中boosting：逐步增强学习</p>
<p><strong>如何提升泛化性能</strong> —&gt; 主要用于<strong>解决过拟合问题</strong>—》集成学习中Bagging：采样学习集成</p>
<h4 id="5-1：欠拟合：一个假设在训练数据上不能获得更好的拟合，并且在测试数据集上也不能很好地拟合数据，此时认为这个假设出现了欠拟合的现象。-模型过于简单"><a href="#5-1：欠拟合：一个假设在训练数据上不能获得更好的拟合，并且在测试数据集上也不能很好地拟合数据，此时认为这个假设出现了欠拟合的现象。-模型过于简单" class="headerlink" title="5.1：欠拟合：一个假设在训练数据上不能获得更好的拟合，并且在测试数据集上也不能很好地拟合数据，此时认为这个假设出现了欠拟合的现象。(模型过于简单)"></a>5.1：欠拟合：一个假设<strong>在训练数据上不能获得更好的拟合，并且在测试数据集上也不能很好地拟合数据</strong>，此时认为这个假设出现了欠拟合的现象。(模型过于简单)</h4><ul>
<li><h4 id="原因：学习到的数据的特征过少"><a href="#原因：学习到的数据的特征过少" class="headerlink" title="原因：学习到的数据的特征过少"></a>原因：学习到的数据的特征过少</h4></li>
<li><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ul>
<li>添加其他特征：“组合”、“泛化”、“相关性”三类特征是特征添加的重要手段</li>
<li>添加多项式特征：将线性模型通过添加二次项或者三次项使模型泛化能力更强。</li>
</ul>
</li>
</ul>
<h4 id="5-2：过拟合：一个假设在训练数据上能够获得比其他假设更好的拟合，-但是在测试数据集上却不能很好地拟合数据，此时认为这个假设出现了过拟合的现象。-模型过于复杂"><a href="#5-2：过拟合：一个假设在训练数据上能够获得比其他假设更好的拟合，-但是在测试数据集上却不能很好地拟合数据，此时认为这个假设出现了过拟合的现象。-模型过于复杂" class="headerlink" title="5.2：过拟合：一个假设在训练数据上能够获得比其他假设更好的拟合， 但是在测试数据集上却不能很好地拟合数据，此时认为这个假设出现了过拟合的现象。(模型过于复杂)"></a>5.2：过拟合：一个假设<strong>在训练数据上能够获得比其他假设更好的拟合， 但是在测试数据集上却不能很好地拟合数据</strong>，此时认为这个假设出现了过拟合的现象。(模型过于复杂)</h4><ul>
<li><h4 id="原因：原始特征过多，存在一些嘈杂特征，模型过于复杂，模型尝试去兼顾各个测试点"><a href="#原因：原始特征过多，存在一些嘈杂特征，模型过于复杂，模型尝试去兼顾各个测试点" class="headerlink" title="原因：原始特征过多，存在一些嘈杂特征，模型过于复杂，模型尝试去兼顾各个测试点"></a>原因：原始特征过多，存在一些嘈杂特征，模型过于复杂，模型尝试去兼顾各个测试点</h4></li>
<li><h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><ul>
<li>重新清洗数据：可能数据不存导致</li>
<li>增大数据的训练量：训练数据占总比太小</li>
<li>正则化</li>
<li>减少特征维度，防止维灾难</li>
</ul>
</li>
</ul>
<h2 id="6：正则化：复杂度或者异常数据点太多减少这个特征的影响"><a href="#6：正则化：复杂度或者异常数据点太多减少这个特征的影响" class="headerlink" title="6：正则化：复杂度或者异常数据点太多减少这个特征的影响"></a>6：正则化：复杂度或者异常数据点太多减少这个特征的影响</h2><ul>
<li><strong>正则化越大权重值越小</strong></li>
<li><strong>比如训练集表现很好，测试集表现不好时让正则化惩罚系数变的大一些，限值模型的过拟合</strong></li>
<li><strong>如果训练和测试集表现的都不错，让正则化惩罚系数小一些</strong></li>
</ul>
<h4 id="正则化含义：在学习的时候，数据提供的特征有些影响模型的复杂度或者异常数据点太多在学习的时候应该减少这个特征的影响（甚至去删除某个特征的影响）"><a href="#正则化含义：在学习的时候，数据提供的特征有些影响模型的复杂度或者异常数据点太多在学习的时候应该减少这个特征的影响（甚至去删除某个特征的影响）" class="headerlink" title="正则化含义：在学习的时候，数据提供的特征有些影响模型的复杂度或者异常数据点太多在学习的时候应该减少这个特征的影响（甚至去删除某个特征的影响）"></a>正则化含义：在学习的时候，数据提供的特征有些影响模型的复杂度或者异常数据点太多在学习的时候应该减少这个特征的影响（甚至去删除某个特征的影响）</h4><p>复杂度：是</p>
<ul>
<li><strong>L1正则化：</strong><ul>
<li>作用：可以使得其中一些W的值直接为0，删除这个特征的影响</li>
<li>LASSO回归</li>
</ul>
</li>
<li><strong>L2正则化：</strong><ul>
<li>作用：可以使得其中一些W的都很小，都接近于0，削弱某个特征的影响</li>
<li>优点：越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象</li>
<li>Ridge回归</li>
</ul>
</li>
</ul>
<h4 id="Ridge-ElasticNet-Lasso的API"><a href="#Ridge-ElasticNet-Lasso的API" class="headerlink" title="Ridge, ElasticNet, Lasso的API"></a><strong>Ridge</strong>, <strong>ElasticNet</strong>, <strong>Lasso的API</strong></h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.linear_model import <strong>Ridge</strong>, <strong>ElasticNet</strong>, <strong>Lasso</strong></td>
<td><strong>正则化线性模型</strong>：复杂度或者异常数据点太多减少这个特征的影响</td>
</tr>
<tr>
<td>Ridge</td>
<td><strong>岭回归模型</strong>：                                                                                               达到了在拟合数据的同时，使模型权重尽可能小的目的</td>
</tr>
<tr>
<td>ElasticNet</td>
<td><strong>弹性网络</strong>：                                                                                                        进行了折中，通过 <strong>混合比(mix ratio) r</strong> 进行控制</td>
</tr>
<tr>
<td>Lasso</td>
<td><strong>Lasso 回归</strong>：                                                                                                                  能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="6-0：RidgeCV（）：可以传入多个惩罚系数，还经过交叉验证了"><a href="#6-0：RidgeCV（）：可以传入多个惩罚系数，还经过交叉验证了" class="headerlink" title="6.0：RidgeCV（）：可以传入多个惩罚系数，还经过交叉验证了"></a><strong>6.0：RidgeCV（）：可以传入多个惩罚系数，还经过交叉验证了</strong></h3><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>**RidgeCV（(alphas=(0.1, 1.0, 10.0：可以传入不同的惩罚力度去最好的)) **</td>
<td>传入多个惩罚系数                                                                                             具有l2正则化的线性回归，可以进行交叉验证 coef_:回归系数，   这个函数还经过了交叉验证，会让数据集小，数据集小，验证集也会小，会带来一种问题，不一定会比Ridge（）的误差更小</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h3 id="6-1正则化线性模型：里面都是防止过拟合的："><a href="#6-1正则化线性模型：里面都是防止过拟合的：" class="headerlink" title="6.1正则化线性模型：里面都是防止过拟合的："></a>6.1正则化线性模型：里面都是防止过拟合的：</h3><h3 id="α-：为正则化惩罚力度"><a href="#α-：为正则化惩罚力度" class="headerlink" title="α ：为正则化惩罚力度"></a>α ：为正则化惩罚力度</h3><h3 id="6-11-Ridge-Regression-岭回归，又名-Tikhonov-regularization-："><a href="#6-11-Ridge-Regression-岭回归，又名-Tikhonov-regularization-：" class="headerlink" title="6.11 Ridge Regression (岭回归，又名 Tikhonov regularization)："></a>6.11 Ridge Regression (岭回归，又名 Tikhonov regularization)：</h3><h4 id="性质：达到了在拟合数据的同时，使模型权重尽可能小的目的"><a href="#性质：达到了在拟合数据的同时，使模型权重尽可能小的目的" class="headerlink" title="性质：达到了在拟合数据的同时，使模型权重尽可能小的目的"></a>性质：达到了在拟合数据的同时，使模型权重尽可能小的目的</h4><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>sklearn.linear_model.<strong>Ridge</strong>(alpha=1.0, fit_intercept=True,solver=”auto”, normalize=False)</td>
<td><strong>岭回归模型：</strong>具有l2正则化的线性回归                                                                   <strong>alpha:正则化力度，也叫 λ</strong>                                                                             ① λ取值：0<del>1 1</del>10    ，值越小惩罚越小，相反值越大惩罚越大                                                                        <strong>solver:会根据数据自动选择优化方法</strong>                                                    ①sag:如果数据集、特征都比较大，选择该随机梯度下降优化 <strong>normalize:数据是否进行标准化，如果标准化过了就不用标准化了</strong>                                                                                  ①normalize=False:可以在fit之前调用preprocessing.StandardScaler标准化数据</td>
</tr>
<tr>
<td>Ridge.coef_</td>
<td>回归权重</td>
</tr>
<tr>
<td>Ridge.intercept_</td>
<td>回归偏置</td>
</tr>
</tbody></table>
<ul>
<li><h5 id="邻回归：在原来的均方误差中添加了正则项"><a href="#邻回归：在原来的均方误差中添加了正则项" class="headerlink" title="邻回归：在原来的均方误差中添加了正则项"></a>邻回归：在原来的均方误差中添加了正则项</h5></li>
<li><p>α ：为正则化惩罚力度</p>
</li>
<li><p>α 大惩罚越大，小惩罚越小</p>
</li>
<li><p>正则化力度越大，权重系数值越小</p>
</li>
<li><p>正则化力度越小，权重系数值越大</p>
</li>
<li><p>合并后的公式当前面的值都是一定时，<strong>后面的α 系数做惩罚系数和权重是此消彼长的形式，当α 大的时候权重小，相反如此</strong></p>
</li>
<li><p>L1直接把高次项的系数直接变成了0</p>
<ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/13.png' height=px ></li>
</ul>
</li>
<li><h5 id="合成函数为"><a href="#合成函数为" class="headerlink" title="合成函数为"></a>合成函数为</h5><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/14.png' height=px ></li>
</ul>
</li>
</ul>
<h3 id="6-2：Lasso-Regression-Lasso-回归-很重要的性质是：倾向于完全消除不重要的权重。"><a href="#6-2：Lasso-Regression-Lasso-回归-很重要的性质是：倾向于完全消除不重要的权重。" class="headerlink" title="6.2：Lasso Regression(Lasso 回归):很重要的性质是：倾向于完全消除不重要的权重。"></a>6.2：Lasso Regression(Lasso 回归):很重要的性质是：倾向于完全消除不重要的权重。</h3><h4 id="性质：当α-取值相对较大时，高阶多项式退化为二次甚至是线性：高阶多项式特征的权重被置为0，也就是说，Lasso-Regression-能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。"><a href="#性质：当α-取值相对较大时，高阶多项式退化为二次甚至是线性：高阶多项式特征的权重被置为0，也就是说，Lasso-Regression-能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。" class="headerlink" title="性质：当α 取值相对较大时，高阶多项式退化为二次甚至是线性：高阶多项式特征的权重被置为0，也就是说，Lasso Regression 能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。"></a>性质：当α 取值相对较大时，高阶多项式退化为二次甚至是线性：高阶多项式特征的权重被置为0，也就是说，Lasso Regression 能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。</h4><ul>
<li><h4 id="Lasso-Regression-的代价函数在-θi-0处是不可导的"><a href="#Lasso-Regression-的代价函数在-θi-0处是不可导的" class="headerlink" title="Lasso Regression 的代价函数在 θi=0处是不可导的."></a>Lasso Regression 的代价函数在 θi=0处是不可导的.</h4></li>
<li><p>当前面的值都是一定时，<strong>后面的α 系数做惩罚系数和权重是此消彼长的形式，当α 大的时候权重小，相反如此</strong></p>
</li>
<li><h4 id="解决方法：在θi-0处用一个次梯度向量-subgradient-vector-代替梯度，运用权重对0做等价值小于0是-1-。。"><a href="#解决方法：在θi-0处用一个次梯度向量-subgradient-vector-代替梯度，运用权重对0做等价值小于0是-1-。。" class="headerlink" title="解决方法：在θi=0处用一个次梯度向量(subgradient vector)代替梯度，运用权重对0做等价值小于0是-1.。。"></a>解决方法：在θi=0处用一个次梯度向量(subgradient vector)代替梯度，运用权重对0做等价值小于0是-1.。。</h4><ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/15.png' height=px ></li>
</ul>
</li>
</ul>
<h3 id="6-3：Elastic-Net-弹性网络-L1和L2进行了合并"><a href="#6-3：Elastic-Net-弹性网络-L1和L2进行了合并" class="headerlink" title="6.3：Elastic Net (弹性网络)L1和L2进行了合并"></a>6.3：Elastic Net (弹性网络)L1和L2进行了合并</h3><h4 id="性质：进行了折中，通过-混合比-mix-ratio-r-进行控制"><a href="#性质：进行了折中，通过-混合比-mix-ratio-r-进行控制" class="headerlink" title="性质：进行了折中，通过 混合比(mix ratio) r 进行控制"></a>性质：进行了折中，通过 <strong>混合比(mix ratio) r</strong> 进行控制</h4><p>前面的权重变大时，把r提高，后面的权重变大，把r减少</p>
<ul>
<li>r=0：弹性网络变为岭回归，对应后项式</li>
<li>r=1：弹性网络便为Lasso回归对应前项式子</li>
<li>公式：<ul>
<li><img src='https://boes.oss-cn-beijing.aliyuncs.com/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/16.png' height=px ></li>
</ul>
</li>
</ul>
<p>常用：岭回归</p>
<p>假设只有少部分特征是有用的：</p>
<ul>
<li>弹性网络</li>
<li>Lasso </li>
<li>一般来说，弹性网络的使用更为广泛。因为在特征维度高于训练样本数，或者特征是强相关的情况下，Lasso回归的表现不太稳定。</li>
</ul>
<h2 id="7：模型的保存和加载"><a href="#7：模型的保存和加载" class="headerlink" title="7：模型的保存和加载;"></a>7：模型的保存和加载;</h2><table>
<thead>
<tr>
<th>函数</th>
<th>函数性质</th>
</tr>
</thead>
<tbody><tr>
<td>from sklearn.externals import <strong>joblib</strong></td>
<td>模型的保存和加载</td>
</tr>
<tr>
<td>joblib.<strong>dump</strong>(estimator, ‘test.pkl’)</td>
<td>保存</td>
</tr>
<tr>
<td>变量 = joblib.<strong>load</strong>(‘test.pkl’)</td>
<td>加载</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>文本摘要项目</title>
    <url>/2020/02/10/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="1：文本摘要项目理论"><a href="#1：文本摘要项目理论" class="headerlink" title="1：文本摘要项目理论"></a><strong>1：文本摘要项目理论</strong></h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>文本摘要思想</strong>：就是一个长文本把重要的摘要出来</p>
<h5 id="1：NLP角度来看文本摘要任务，主流的概括两大方法："><a href="#1：NLP角度来看文本摘要任务，主流的概括两大方法：" class="headerlink" title="1：NLP角度来看文本摘要任务，主流的概括两大方法："></a>1：NLP角度来看文本摘要任务，主流的概括两大方法：</h5><ul>
<li><p>抽取式摘要：Extraction-based（从文本中抽取）：直接从原文中选择若干条重要的句子, 并对它们进行排序和重组, 以形成摘要的方法.</p>
<ul>
<li><strong>无监督抽取</strong>：不需要平行语料, 节省了人工标记的成本. 大体上有如下几种:<ul>
<li>Lead</li>
<li>Centroid</li>
<li>ClusterCMRW</li>
<li>TextRank：最经典</li>
</ul>
</li>
<li><strong>有监督抽取：</strong>将文本摘要抽象成二分类问题, 通过神经网络来学习句子及其标签之间的对应关系. 需要平行语料, 需要人工标记的成本. 常见方法有如下几种<ul>
<li>R2N2</li>
<li>NeuralSum</li>
<li>SummaRuNNer</li>
<li><strong>BertSum</strong>：原本用来计算网页之间的关联性，后来被应用在句子上，句子之间反复传播，选出最关键的语句进行排序。因为文章总有中心句，而textrank就试图找出这个中心句。</li>
</ul>
</li>
<li>取式<strong>缺点</strong>：主要考虑单词词频，没有过多的语义信息，所以无法建立段落中的完整语义信息</li>
</ul>
</li>
<li><p><strong>生成式摘要: Abstraction-based：</strong>需要通过<strong>转述、同义替换、句子缩写</strong>等生成。</p>
<ul>
<li>生成式神经网络模型的基本结构主要由<strong>编码器（encoder）和解码器（decoder）</strong>组成，编码和解码都由神经网络实现。<ul>
<li><strong>编码器</strong>负责将输入的原文本编码成一个<strong>向量C（context），</strong></li>
<li><strong>而解码器</strong>负责从这个<strong>向量C</strong>提取<strong>重要信息、加工剪辑，生成文本摘要。</strong></li>
<li><strong>Sequence-to-Sequence</strong>（以下简称Seq2Seq），被广泛应用于存在输入序列和输出序列的场景，比如机器翻译（一种语言序列到另一种语言序列）、image captioning（图片像素序列到语言序列）、对话机器人（如问题到回答）等</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="2：数据的处理："><a href="#2：数据的处理：" class="headerlink" title="2：数据的处理："></a>2：数据的处理：</h4><p>一般来说, 在任何项目中, 面对原始数据都要进行接下来的几点工作:</p>
<ul>
<li>删除空值.</li>
<li>删除”脏”数据.<ul>
<li>在这个数据集中的脏数据为：<ul>
<li>有很多的技师说和，车主说</li>
<li>文本中有很多的图片字样和语音字样</li>
<li>有很多进口，车型，还有一些符号</li>
</ul>
</li>
</ul>
</li>
<li>删除特定字符的集合.</li>
<li>分词.</li>
<li>完成字符到id的映射.</li>
<li>完成padding, cutting的工作.</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

train_path <span class="token operator">=</span> <span class="token string">'train.csv'</span>
test_path <span class="token operator">=</span> <span class="token string">'test.csv'</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********************'</span><span class="token punctuation">)</span>

df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>
RangeIndex<span class="token punctuation">:</span> <span class="token number">82943</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">82942</span>
Data columns <span class="token punctuation">(</span>total <span class="token number">6</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span>

 <span class="token number">0</span>   QID       <span class="token number">82943</span> non<span class="token operator">-</span>null  object
 <span class="token number">1</span>   Brand     <span class="token number">81642</span> non<span class="token operator">-</span>null  object
 <span class="token number">2</span>   Model     <span class="token number">81642</span> non<span class="token operator">-</span>null  object
 <span class="token number">3</span>   Question  <span class="token number">82943</span> non<span class="token operator">-</span>null  object
 <span class="token number">4</span>   Dialogue  <span class="token number">82941</span> non<span class="token operator">-</span>null  object
 <span class="token number">5</span>   Report    <span class="token number">82873</span> non<span class="token operator">-</span>null  object
dtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
memory usage<span class="token punctuation">:</span> <span class="token number">3.8</span><span class="token operator">+</span> MB

<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>
RangeIndex<span class="token punctuation">:</span> <span class="token number">20000</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">19999</span>
Data columns <span class="token punctuation">(</span>total <span class="token number">5</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span>
 <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span>

 <span class="token number">0</span>   QID       <span class="token number">20000</span> non<span class="token operator">-</span>null  object
 <span class="token number">1</span>   Brand     <span class="token number">19987</span> non<span class="token operator">-</span>null  object
 <span class="token number">2</span>   Model     <span class="token number">19987</span> non<span class="token operator">-</span>null  object
 <span class="token number">3</span>   Question  <span class="token number">20000</span> non<span class="token operator">-</span>null  object
 <span class="token number">4</span>   Dialogue  <span class="token number">20000</span> non<span class="token operator">-</span>null  object
dtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
memory usage<span class="token punctuation">:</span> <span class="token number">781.4</span><span class="token operator">+</span> KB
</code></pre>
<h4 id="3：TextRank：算法理论基础"><a href="#3：TextRank：算法理论基础" class="headerlink" title="3：TextRank：算法理论基础"></a>3：TextRank：算法理论基础</h4><p>对比于衡量网页重要性的PageRank算法, TextRank算法用于衡量哪些单词是关键词, 类比之下的算法思想也就很好理解了:</p>
<ul>
<li>如果一个单词出现在很多单词的后面, 就是它和很多单词有关联, 那么说明这个单词比较重要.</li>
<li>如果一个TextRank值很高的单词后面跟着另一个单词, 那么后面这个单词的TextRank值也会相应的被提高.</li>
</ul>
<h4 id="3-1：TextRank算法代码实践"><a href="#3-1：TextRank算法代码实践" class="headerlink" title="3.1：TextRank算法代码实践"></a>3.1：TextRank算法代码实践</h4><ul>
<li>在本小节中, 我们仅以示例代码跑通几段小程序, 让同学们掌握如何具体在代码层面用TextRank.<ul>
<li>关键词抽取(keyword extraction)：是指从文本中确定一些能够描述文档含义的关键术语的过程<ul>
<li>对关键词抽取而言, 用于构建顶点集的文本单元可以使句子中的一个或多个字. 根据这些字之间的关系构建边.</li>
<li>根据任务的需要, 可以使用语法过滤器(syntactic filters)对顶点集进行优化. 语法过滤器的主要作用是将某一类或者某几类词性的字过滤出来作为顶点集.</li>
</ul>
</li>
<li>关键短语抽取(keyphrase extraction)</li>
<li>关键句抽取(sentence extraction)</li>
</ul>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span>
<span class="token comment" spellcheck="true"># 导入textrank4zh的相关工具包</span>
<span class="token keyword">from</span> textrank4zh <span class="token keyword">import</span> TextRank4Keyword<span class="token punctuation">,</span> TextRank4Sentence
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token comment" spellcheck="true"># 导入常用工具包</span>
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np

<span class="token comment" spellcheck="true">#关键词抽取</span>
<span class="token keyword">def</span> <span class="token function">keywords_extraction</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># allow_speech_tags : 词性列表, 用于过滤某些词性的词</span>
    tr4w <span class="token operator">=</span> TextRank4Keyword<span class="token punctuation">(</span>allow_speech_tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'nr'</span><span class="token punctuation">,</span> <span class="token string">'nrfg'</span><span class="token punctuation">,</span> <span class="token string">'ns'</span><span class="token punctuation">,</span> <span class="token string">'nt'</span><span class="token punctuation">,</span> <span class="token string">'nz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>
    <span class="token comment" spellcheck="true"># window: 窗口大小, int, 用来构造单词之间的边, 默认值为2</span>
    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>
    <span class="token comment" spellcheck="true"># vertex_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的>哪一个来构造pagerank对应的图中的节点</span>
    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>
    <span class="token comment" spellcheck="true"># edge_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪>一个来构造pagerank对应的图中的节点之间的边</span>
    <span class="token comment" spellcheck="true">#默认值为'no_stop_words', 可选值为'no_filter', 'no_stop_words', 'all_filters', 边的构造要结合window参数</span>
    <span class="token comment" spellcheck="true"># pagerank_config: pagerank算法参数配置, 阻尼系数为0.85</span>

    tr4w<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> lower<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> vertex_source<span class="token operator">=</span><span class="token string">'all_filters'</span><span class="token punctuation">,</span>
                 edge_source<span class="token operator">=</span><span class="token string">'no_stop_words'</span><span class="token punctuation">,</span> pagerank_config<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'alpha': 0.85, &amp;#125;)</span>

    <span class="token comment" spellcheck="true"># num: 返回关键词数量</span>
    <span class="token comment" spellcheck="true"># word_min_len: 词的最小长度, 默认值为1    </span>
    keywords <span class="token operator">=</span> tr4w<span class="token punctuation">.</span>get_keywords<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> word_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    
    
 <span class="token comment" spellcheck="true">#提取重要关键短句</span>
    <span class="token comment" spellcheck="true"># keywords_num: 抽取的关键词数量</span>
    <span class="token comment" spellcheck="true"># min_occur_num: 关键短语在文中的最少出现次数</span>
    <span class="token comment" spellcheck="true">#keyphrases = tr4w.get_keyphrases(keywords_num=6, min_occur_num=1)</span>
    
    
<span class="token comment" spellcheck="true">#提取关键句</span>
    <span class="token comment" spellcheck="true">#tr4s = TextRank4Sentence()</span>
        <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>
    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>
    <span class="token comment" spellcheck="true"># source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来                生成句子之间的相似度</span>
    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>
    <span class="token comment" spellcheck="true">#tr4s.analyze(text, lower=True, source='all_filters')</span>
    <span class="token comment" spellcheck="true"># 获取最重要的num个长度大于等于sentence_min_len的句子用来生成摘要</span>
    <span class="token comment" spellcheck="true">#keysentences = tr4s.get_key_sentences(num=3, sentence_min_len=6)</span>
    
    
    

    <span class="token comment" spellcheck="true"># 返回关键词</span>
    <span class="token keyword">return</span> keywords
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \
           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \
           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \
           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \
           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \
           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \
           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>

    <span class="token comment" spellcheck="true">#关键词抽取</span>
    keywords<span class="token operator">=</span>keywords_extraction<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印：-1"><a href="#打印：-1" class="headerlink" title="打印："></a>打印：</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关键词抽取</span>
<span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '小行星', 'weight': 0.05808441467341854&amp;#125;,</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '天文台', 'weight': 0.05721653775742513&amp;#125;, </span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '命名', 'weight': 0.0485177005159723&amp;#125;,</span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国', 'weight': 0.045716478124251815&amp;#125;, </span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国科学院', 'weight': 0.037818937836996636&amp;#125;, </span>
<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '国家', 'weight': 0.03438059254484016&amp;#125;]</span>


<span class="token comment" spellcheck="true">#提取重要关键短句</span>
<span class="token punctuation">[</span><span class="token string">'小行星命名'</span><span class="token punctuation">]</span>



<span class="token comment" spellcheck="true">#提取关键句</span>
<span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 4, 'sentence': '2018年9月25日，经国家天文台申报，国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，正式将该小行星命名为“周又元星”', 'weight': 0.2281040325096452&amp;#125;,</span>
 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 3, 'sentence': '”据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，获得国际永久编号第120730号', 'weight': 0.2106246105971721&amp;#125;,</span>
 <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 1, 'sentence': '4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂', 'weight': 0.2020923401661083&amp;#125;]</span>
</code></pre>
<h4 id="3-2：基于jieba的TextRank算法"><a href="#3-2：基于jieba的TextRank算法" class="headerlink" title="3.2：基于jieba的TextRank算法"></a>3.2：基于jieba的TextRank算法</h4><ul>
<li>jieba工具不仅仅可以用来分词, 进行词性分析. 也可以用来完成TextRank.</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token punctuation">.</span>analyse

<span class="token keyword">def</span> <span class="token function">jieba_keywords_textrank</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>
    keywords <span class="token operator">=</span> jieba<span class="token punctuation">.</span>analyse<span class="token punctuation">.</span>textrank<span class="token punctuation">(</span>text<span class="token punctuation">,</span> topK<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> keywords
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \
           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \
           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \
           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \
           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \
           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \
           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>

    <span class="token comment" spellcheck="true"># 基于jieba的textrank算法实现</span>
    keywords <span class="token operator">=</span> jieba_keywords_textrank<span class="token punctuation">(</span>text<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span>
</code></pre>
<ul>
<li><h6 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h6></li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'小行星'</span><span class="token punctuation">,</span> <span class="token string">'命名'</span><span class="token punctuation">,</span> <span class="token string">'国际'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'国家'</span><span class="token punctuation">,</span> <span class="token string">'天文学家'</span><span class="token punctuation">]</span>
</code></pre>
<h2 id="2：-TextRank实现baseline-0模型"><a href="#2：-TextRank实现baseline-0模型" class="headerlink" title="2： TextRank实现baseline-0模型"></a><strong>2： TextRank实现baseline-0模型</strong></h2><h4 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h4><ul>
<li><p>我们在第一章的1.2小节曾经讨论过原始数据存在的各种问题, 这些问题都需要在数据预处理的这个环节一一解决. 接下来按照如下步骤进行处理:</p>
<ul>
<li><p>第一步: 提取特定的文本.</p>
</li>
<li><p>第二步: 删除”脏”数据.</p>
</li>
<li><p>第三步: 删除特定的字符集合.</p>
</li>
<li><p>第四步: 删除特殊位置的特定字符.</p>
</li>
</ul>
</li>
</ul>
<h4 id="第一步-提取特定的文本"><a href="#第一步-提取特定的文本" class="headerlink" title="第一步: 提取特定的文本."></a>第一步: 提取特定的文本.</h4><p>面对原始语料, 并不是说我们必须要全部纳入模型中, 可以根据业务需求, 或者程序员的项目经验, 或许出于尝试的态度, 只选取一部分出来作为我们后续模型的输入数据.</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>
    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>
    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 遍历每个子句</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>
        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>
        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>
    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>

    <span class="token keyword">return</span> sentence
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 数据预处理</span>
    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre>
<ul>
<li><h6 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果:"></a>输出结果:</h6></li>
</ul>
<pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>

预处理后的第一条句子<span class="token punctuation">:</span>  技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：不需要。技师说：你这是更换的部件有问题。技师说：是非常重吗。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。
</code></pre>
<ul>
<li><h5 id="数据进行分割形成小型数据"><a href="#数据进行分割形成小型数据" class="headerlink" title="数据进行分割形成小型数据"></a>数据进行分割形成小型数据</h5></li>
</ul>
<pre class=" language-python"><code class="language-python">nf <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">]</span>
nf<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>
dfa  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
dfa<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>
<p>打印结果</p>
<h4 id="第二步-删除”脏”数据"><a href="#第二步-删除”脏”数据" class="headerlink" title="第二步: 删除”脏”数据."></a>第二步: 删除”脏”数据.</h4><ul>
<li>关于什么是”脏”数据是个千人千面的问题, 我们在第一章中也讨论过. 这一步也仅仅处理一个baseline的级别.</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span>
<span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>
    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>
    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 遍历每个子句</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>
        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>
        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>
    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>
    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token keyword">return</span> sentence

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 数据预处理</span>
    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre>
<ul>
<li><h5 id="处理后的数据"><a href="#处理后的数据" class="headerlink" title="处理后的数据"></a>处理后的数据</h5></li>
</ul>
<pre><code>预处理前的第一条句子： 技师说：[语音]|车主说：新的都换了|车主说：助力泵，方向机|技师说：[语音]|车主说：换了方向机带的有|车主说：[图片]|技师说：[语音]|车主说：有助力就是重，这车要匹配吧|技师说：不需要|技师说：你这是更换的部件有问题|车主说：跑快了还好点，就倒车重的很。|技师说：是非常重吗|车主说：是的，累人|技师说：[语音]|车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。|技师说：[语音]|技师说：[语音]

预处理后的第一条句子:  ：[]。：[]。：[]。：不需要。：你这是更换的部件有问题。：是非常重吗。：[]。：[]。：[]
</code></pre>
<h4 id="第三步-删除特定的字符集合"><a href="#第三步-删除特定的字符集合" class="headerlink" title="第三步: 删除特定的字符集合."></a>第三步: 删除特定的字符集合.</h4><ul>
<li>1: 我们发现原始数据文件中有若干的”进口”, “海外”字样, 可认为是需要删除的特定字符.</li>
<li>2: 为了后续处理文本容易, 除了汉字还有数字, 英文字母, 特定的几个标点符号, 其他都删除.</li>
<li>3: 将标点符号的半角格式, 转变成全角格式.</li>
<li>4: 将问号, 感叹号, 转变成句号.</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span>
<span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>
    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>
    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>
    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 遍历每个子句</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>
        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>
        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>
    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>
    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>
    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>
    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>
    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> sentence
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 数据预处理</span>
    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h5><pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>

预处理后的第一条句子<span class="token punctuation">:</span>  。。。不需要。你这是更换的部件有问题。是非常重吗。。。。
</code></pre>
<h3 id="2-1：TextRank模型代码实现：进行数数的机器学习模型"><a href="#2-1：TextRank模型代码实现：进行数数的机器学习模型" class="headerlink" title="2.1：TextRank模型代码实现：进行数数的机器学习模型"></a>2.1：TextRank模型代码实现：进行数数的机器学习模型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span>
<span class="token keyword">import</span> re
<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>
    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>
    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>
    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 遍历每个子句</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>
        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>
        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>
        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>
    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>
    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>
    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>
    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>
    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>
    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>
    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> sentence
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 初始化结果存放的列表</span>
    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 初始化textrank4zh类对象</span>
    tr4s <span class="token operator">=</span> TextRank4Sentence<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        text <span class="token operator">=</span> texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        tr4s<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">,</span>lower <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>source <span class="token operator">=</span> <span class="token string">"all_filters"</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token comment" spellcheck="true"># 直接调用函数获取关键语句</span>
        <span class="token comment" spellcheck="true"># num=3: 获取重要性最高的3个句子.</span>
        <span class="token comment" spellcheck="true"># sentence_min_len=2: 句子的长度最小等于2.</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> tr4s<span class="token punctuation">.</span>get_key_sentences<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sentence_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> item<span class="token punctuation">.</span>sentence
            result <span class="token operator">+=</span> <span class="token string">'。'</span>
        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 间隔100次打印结果</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result length: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 保存结果</span>
    df<span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> results

    <span class="token comment" spellcheck="true"># 提取ID, Report, 和预测结果这3列</span>
    df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'QID'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">,</span> <span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 保存结果，这里自动生成一个结果名</span>
    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 将空行置换为随时联系, 文件保存格式指定为utf-8</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    df <span class="token operator">=</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'随时联系。'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 将处理后的文件保存起来</span>
    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_final_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>
</code></pre>
<p><strong>打印结果</strong></p>
<pre class=" language-python"><code class="language-python">i<span class="token operator">=</span> <span class="token number">0</span>
i<span class="token operator">=</span> <span class="token number">500</span>
i<span class="token operator">=</span> <span class="token number">1000</span>
i<span class="token operator">=</span> <span class="token number">1500</span>
i<span class="token operator">=</span> <span class="token number">2000</span>
i<span class="token operator">=</span> <span class="token number">2500</span>
i<span class="token operator">=</span> <span class="token number">3000</span>
i<span class="token operator">=</span> <span class="token number">3500</span>
i<span class="token operator">=</span> <span class="token number">4000</span>
i<span class="token operator">=</span> <span class="token number">4500</span>
<span class="token number">100</span> 这个故障一般是转向系统的故障，需要重点检查一下车辆的转向灯泡，是否有不亮的。换了就可以解决问题。你好，车辆故障信息代码标识。
<span class="token number">200</span> 主要是找到发动机和变速器连接部位的支架以及底盘上的各个胶套，是否存在松旷，造成硬性的接触共振。你好，这种情况主要考虑检查底盘是否存在共振区域。这个需要全面检查，如果之前没有这种问题，可以试驾其他同款车辆，确认是否都有这种问题。
<span class="token number">300</span> 您好出厂的时候变速箱油是正常的，在刻度线以内，流出半升之后还是在刻度线以内，所以不用加，亲。加不进去了。顶进去的。
<span class="token number">400</span> 那就要去检查一下皮带轮了。如果高于<span class="token number">1200</span>还有，就要检查一下皮带轮。这款发动机在<span class="token number">900</span><span class="token operator">-</span><span class="token number">1100</span>转时确实有一点嗡嗡声。
<span class="token number">500</span> 这种单边积水的情况基本上不是泡水的原因，而是有地方密封不严，下雨漏水进去，这个一般是门边密封条老化，或者是防风玻璃漏水，需要关上车门，在车外冲水，在车内慢慢找漏水的地方。海绵积水可以用洗车的泡沫海绵放在上面挤压，能把大部的水吸出来，然后大太阳的时候打开车门得晒一个星期左右，差不多就会干了，主要还是得找出进水的原因，不然弄干水了，下次又进水了，时间长了，海绵会发霉发臭的。我知道是地板上积水，空调管堵塞也是会造成这种情况的，也是需要检查的。
<span class="token number">600</span> 您好，需要更换加油管和碳罐，加油时气体排不出去导致跳枪。估计外面找不到改款配件。加油管是改款双管的，原车是单管的。
<span class="token number">700</span> 找领导处理，更换新件并赔偿。送保养次数。投诉厂家，欺骗消费者。
<span class="token number">800</span> 用T10170和百分表，转曲轴看百分表指针，指针转到顺时针的最顶端是一缸上止点。把曲轴转到一缸上止点，然后挂链条就可以了。直接量一缸的上止点不就可以了，不用管其他缸。
</code></pre>
<h1 id="3：-seq2seq实现baseline-1模型：文本摘要"><a href="#3：-seq2seq实现baseline-1模型：文本摘要" class="headerlink" title="3： seq2seq实现baseline-1模型：文本摘要"></a>3： seq2seq实现baseline-1模型：文本摘要</h1><h3 id="seq2seq实现文本摘要的架构"><a href="#seq2seq实现文本摘要的架构" class="headerlink" title="seq2seq实现文本摘要的架构"></a>seq2seq实现文本摘要的架构</h3><ul>
<li>首选回顾一下在英译法任务中的经典seq2seq架构图</li>
</ul>
<blockquote>
<ul>
<li>编码器端负责将输入数据进行编码, 得到中间语义张量.</li>
<li>解码器端负责一次次的循环解析中间语义张量, 得到最终的结果语句.</li>
<li>一般来说, 我们将注意力机制添加在解码器端.</li>
</ul>
</blockquote>
<h4 id="对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图"><a href="#对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图" class="headerlink" title="对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:"></a>对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:</h4><blockquote>
<ul>
<li>编码器端负责进行原始文本的编码.</li>
<li>注意力层结合编码张量和解码器端的当前输入, 得到总体上的内容张量.</li>
<li>最后在注意力机制的指导下, 解码器端得到完整的单词分布, 解码出当前时间步的单词.</li>
</ul>
</blockquote>
<h3 id="seq2seq实现文本摘要的架构代码实践"><a href="#seq2seq实现文本摘要的架构代码实践" class="headerlink" title="seq2seq实现文本摘要的架构代码实践"></a>seq2seq实现文本摘要的架构代码实践</h3><h4 id="若干工具函数的实现"><a href="#若干工具函数的实现" class="headerlink" title="若干工具函数的实现"></a>若干工具函数的实现</h4><ul>
<li><p>在这一部分中我们要实现如下几个工具函数:</p>
<ul>
<li>第一步: 实现配置函数config.py</li>
<li>第二步: 实现多核并行处理的函数multi_proc_utils.py</li>
<li>第三步: 实现参数配置函数params_utils.py</li>
<li>第四步: 实现保存字典的函数word2vec_utils.py</li>
<li>第五步: 实现数据加载的函数data_loader.py</li>
</ul>
</li>
<li><h4 id="第一步-实现配置函数config-py"><a href="#第一步-实现配置函数config-py" class="headerlink" title="第一步: 实现配置函数config.py"></a>第一步: 实现配置函数config.py</h4><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/config.py</li>
</ul>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入os工具包</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys

<span class="token comment" spellcheck="true"># 设置项目代码库的root路径, 为后续所有的包导入提供便利</span>
root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 设置原始数据文件的路径, 通过以项目root路径为基础, 逐级添加到文件路径</span>
train_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train.csv'</span><span class="token punctuation">)</span>
test_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test.csv'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 停用词路径和jieba分词用户自定义字典路径</span>
stop_words_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'stopwords.txt'</span><span class="token punctuation">)</span>
user_dict_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'user_dict.txt'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 预处理+切分后的训练测试数据路径</span>
train_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_seg_data.csv'</span><span class="token punctuation">)</span>
test_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_seg_data.csv'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 将训练集和测试机数据混合后的文件路径</span>
merged_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'merged_seg_data.csv'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 样本与标签分离，并经过pad处理后的数据路径</span>
train_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X_pad_data.csv'</span><span class="token punctuation">)</span>
train_y_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y_pad_data.csv'</span><span class="token punctuation">)</span>
test_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X_pad_data.csv'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># numpy转换为数字后最终使用的的数据路径</span>
train_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X.npy'</span><span class="token punctuation">)</span>
train_y_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y.npy'</span><span class="token punctuation">)</span>
test_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X.npy'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 正向词典和反向词典路径</span>
vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'vocab.txt'</span><span class="token punctuation">)</span>
reverse_vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'reverse_vocab.txt'</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 测试集结果保存路径</span>
result_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li>输出结果:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">/</span>text_summary<span class="token operator">/</span>seq2seq
</code></pre>
<h4 id="第二步-实现多核并行处理的函数multi-proc-utils-py"><a href="#第二步-实现多核并行处理的函数multi-proc-utils-py" class="headerlink" title="第二步: 实现多核并行处理的函数multi_proc_utils.py"></a>第二步: 实现多核并行处理的函数multi_proc_utils.py</h4><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/multi_proc_utils.py</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count<span class="token punctuation">,</span> Pool

<span class="token comment" spellcheck="true"># 计算当前服务器CPU的数量</span>
cores <span class="token operator">=</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 将分块个数设置为CPU的数量</span>
partitions <span class="token operator">=</span> cores
<span class="token keyword">print</span><span class="token punctuation">(</span>cores<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">parallelize</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 数据切分</span>
    data_split <span class="token operator">=</span> np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> partitions<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 初始化线程池</span>
    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 数据分发, 处理, 再合并</span>
    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> data_split<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 关闭线程池</span>
    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 执行完close后不会有新的进程加入到pool, join函数等待所有子进程结束</span>
    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 返回处理后的数据</span>
    <span class="token keyword">return</span> data
</code></pre>
<ul>
<li>输出结果:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前服务器是一个8核CPU, 32GB内存的机器</span>
<span class="token number">8</span>
</code></pre>
<h4 id="第三步-实现参数配置函数params-utils-py"><a href="#第三步-实现参数配置函数params-utils-py" class="headerlink" title="第三步: 实现参数配置函数params_utils.py"></a>第三步: 实现参数配置函数params_utils.py</h4><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/params_utils.py</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparse

<span class="token keyword">def</span> <span class="token function">get_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 编码器和解码器的最大序列长度</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_enc_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_dec_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 一个训练批次的大小</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--batch_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Batch size"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># seq2seq训练轮数</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--seq2seq_train_epochs"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Seq2seq model training epochs"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 词嵌入大小</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--embed_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Words embeddings dimension"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 编码器、解码器以及attention的隐含层单元数</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--enc_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--dec_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--attn_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Used to compute the attention weights"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 学习率</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--learning_rate"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Learning rate"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>float<span class="token punctuation">)</span>
    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># param是一个字典类型的变量，键为参数名，值为参数值</span>
    params <span class="token operator">=</span> vars<span class="token punctuation">(</span>args<span class="token punctuation">)</span>
    <span class="token keyword">return</span> params
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> get_params<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre>
<ul>
<li>输出结果:</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'max_enc_len': 300, 'max_dec_len': 50, 'batch_size': 64, 'seq2seq_train_epochs': </span>
</code></pre>
<h4 id="第四步-实现保存字典的函数word2vec-utils-py"><a href="#第四步-实现保存字典的函数word2vec-utils-py" class="headerlink" title="第四步: 实现保存字典的函数word2vec_utils.py"></a>第四步: 实现保存字典的函数word2vec_utils.py</h4><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/word2vec_utils.py</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models<span class="token punctuation">.</span>word2vec <span class="token keyword">import</span> Word2Vec


<span class="token keyword">def</span> <span class="token function">load_embedding_matrix_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 从word2vec模型中获取词向量矩阵</span>
    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>
    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># wv_model.wv.vectors包含词向量矩阵</span>
    embedding_matrix <span class="token operator">=</span> wv_model<span class="token punctuation">.</span>wv<span class="token punctuation">.</span>vectors
    <span class="token keyword">return</span> embedding_matrix


<span class="token keyword">def</span> <span class="token function">get_vocab_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 从word2vec模型中获取正向和反向词典</span>
    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>
    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>
    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;index: word for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>
    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;word: index for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>
    <span class="token keyword">return</span> word_to_id<span class="token punctuation">,</span> id_to_word


<span class="token keyword">def</span> <span class="token function">save_vocab_as_txt</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 保存字典</span>
    <span class="token comment" spellcheck="true"># filename: 目标txt文件路径</span>
    <span class="token comment" spellcheck="true"># word_to_id: 要保存的字典</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125;\t&amp;#123;&amp;#125;\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="第五步-实现数据加载的函数data-loader-py"><a href="#第五步-实现数据加载的函数data-loader-py" class="headerlink" title="第五步: 实现数据加载的函数data_loader.py"></a>第五步: 实现数据加载的函数data_loader.py</h4><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/data_loader.py<ul>
<li>1: 获取最大长度的函数.</li>
<li>2: 完成文本语句单词到id的数字映射函数.</li>
<li>3: 填充特殊标识符的函数.</li>
<li>4: 加载停用词表的函数.</li>
<li>5: 清洗文本的函数.</li>
<li>6: 过滤停用词的函数.</li>
<li>7: 语句处理的函数.</li>
<li>8: 加载构建好的训练集和测试集的函数.</li>
<li>9: 完成本步骤总体逻辑的函数build_dataset()函数.</li>
</ul>
</li>
</ul>
<h5 id="1-获取最大长度的函数"><a href="#1-获取最大长度的函数" class="headerlink" title="1: 获取最大长度的函数"></a>1: 获取最大长度的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> re
<span class="token keyword">import</span> jieba
<span class="token comment" spellcheck="true"># 配置模块</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span>

root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_max_len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 获得合适的最大长度值(被build_dataset调用)</span>
    <span class="token comment" spellcheck="true"># data: 待统计的数据train_df['Question']</span>
    <span class="token comment" spellcheck="true"># 句子最大长度为空格数+1</span>
    max_lens <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 平均值+2倍方差的方式</span>
    <span class="token keyword">return</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<h5 id="2-完成文本语句单词到id的数字映射函数"><a href="#2-完成文本语句单词到id的数字映射函数" class="headerlink" title="2: 完成文本语句单词到id的数字映射函数"></a>2: 完成文本语句单词到id的数字映射函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transform_data</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 句子转换为index序列(被build_dataset调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 'word1 word2 word3 ...'  ->  [index1, index2, index3 ...]</span>
    <span class="token comment" spellcheck="true"># word_to_id: 映射字典</span>

    <span class="token comment" spellcheck="true"># 字符串切分成词</span>
    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 按照word_to_id的id进行转换, 到未知词就填充unk的索引</span>
    ids <span class="token operator">=</span> <span class="token punctuation">[</span>word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> word_to_id<span class="token punctuation">[</span><span class="token string">'&lt;UNK>'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 返回映射后的文本id值列表</span>
    <span class="token keyword">return</span> ids
</code></pre>
<h5 id="3-填充特殊标识符的函数"><a href="#3-填充特殊标识符的函数" class="headerlink" title="3: 填充特殊标识符的函数"></a>3: 填充特殊标识符的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pad_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 根据max_len和vocab填充&lt;START> &lt;STOP> &lt;PAD> &lt;UNK></span>

    <span class="token comment" spellcheck="true"># 0. 按空格统计切分出词</span>
    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 1. 截取规定长度的词数</span>
    words <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 2. 填充&lt;UNK></span>
    sentence <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> <span class="token string">'&lt;UNK>'</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 3. 填充&lt;START> &lt;END></span>
    sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;START>'</span><span class="token punctuation">]</span> <span class="token operator">+</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;STOP>'</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 4. 判断长度，填充&lt;PAD></span>
    sentence <span class="token operator">=</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD>'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_len <span class="token operator">-</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 以空格连接列表, 返回结果字符串</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
</code></pre>
<h5 id="4-加载停用词表的函数"><a href="#4-加载停用词表的函数" class="headerlink" title="4: 加载停用词表的函数"></a>4: 加载停用词表的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_stop_words</span><span class="token punctuation">(</span>stop_word_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 加载停用词(程序调用)</span>
    <span class="token comment" spellcheck="true"># stop_word_path: 停用词路径</span>

    <span class="token comment" spellcheck="true"># 打开停用词文件</span>
    f <span class="token operator">=</span> open<span class="token punctuation">(</span>stop_word_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 读取所有行</span>
    stop_words <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 去除每一个停用词前后 空格 换行符</span>
    stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>stop_word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> stop_word <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>
    <span class="token keyword">return</span> stop_words
<span class="token comment" spellcheck="true"># 加载停用词, 这里面的stop_words_path是早已在config.py文件中配置好的</span>
stop_words <span class="token operator">=</span> load_stop_words<span class="token punctuation">(</span>stop_words_path<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stop_words: '</span><span class="token punctuation">,</span> stop_words<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<h5 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">stop_words<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'———'</span><span class="token punctuation">,</span> <span class="token string">'》），'</span><span class="token punctuation">,</span> <span class="token string">'）÷（１－'</span><span class="token punctuation">,</span> <span class="token string">'”，'</span><span class="token punctuation">,</span> <span class="token string">'）、'</span><span class="token punctuation">,</span> <span class="token string">'＝（'</span><span class="token punctuation">,</span> <span class="token string">'→'</span><span class="token punctuation">,</span> <span class="token string">'℃'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'一一'</span><span class="token punctuation">,</span> <span class="token string">'~~~~'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'.一'</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'＝″'</span><span class="token punctuation">]</span>
</code></pre>
<h5 id="5-清洗文本的函数"><a href="#5-清洗文本的函数" class="headerlink" title="5: 清洗文本的函数"></a>5: 清洗文本的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 特殊符号去除(被sentence_proc调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 待处理的字符串</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 删除1. 2. 3. 这些标题</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 删除带括号的 进口 海外</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 删除除了汉字数字字母和，！？。.- 以外的字符</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 用中文输入法下的，！？来替换英文输入法下的,!?</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 删除 车主说 技师说 语音 图片 你好 您好</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|你好|您好"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>
        <span class="token keyword">return</span> sentence
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span>
    
sentence <span class="token operator">=</span> <span class="token string">'技师说：你好！以前也出现过该故障吗？|技师说：缸压多少有没有测量一下?|车主说：没有过|车主说：没测缸压|技师说：测量一下缸压 看一四缸缸压是否偏低|车主说：用电脑测，只是14缸缺火|车主说：[语音]|车主说：[语音]|技师说：点火线圈  火花塞 喷油嘴不用干活  直接和二三缸对倒一下  跑一段在测量一下故障码进行排除|车主说：[语音]|车主>说：[语音]|车主说：[语音]|车主说：[语音]|车主说：师傅还在吗|技师说：调一下喷油嘴  测一下缸压  都正常则为发动机电脑板问题|车主说：[语音]|车主说：[语音]|车主说：[语音]|技师说：这个影响不大的|技师说：缸压八个以上正常|车主说：[语音]|技师说：所以说让你测量缸压  只要缸压正常则没有问题|车主说：[语音]|车主说：[语音]|技师说：可以点击头像关注我  有什么问题随时询问  一定真诚用心为你解决|车主说：师傅，谢谢了|技师说：不用客气'</span>

res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印：-2"><a href="#打印：-2" class="headerlink" title="打印："></a>打印：</h5><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span> ！以前也出现过该故障吗？缸压多少有没有测量一下？没有过没测缸压测量一下缸压看一四缸缸压是否偏低用电脑测，只是<span class="token number">14</span>缸缺火点火线圈火花塞喷油嘴不用干活直接和二三缸对倒一下跑一段在测量一下故障码进行排除师傅还在吗调一下喷油嘴测一下缸压都正常则为发动机电脑板问题这个影响不大的缸压八个以上正常所以说让你测量缸压只要缸压正常则没有问题可以点击头像关注我有什么问题随时询问一定真诚用心为你解决师傅，谢谢了不用客气
</code></pre>
<h5 id="6：-过滤停用词的函数"><a href="#6：-过滤停用词的函数" class="headerlink" title="6：#过滤停用词的函数"></a>6：#过滤停用词的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_stopwords</span><span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 过滤一句切好词的话中的停用词(被sentence_proc调用)</span>
    <span class="token comment" spellcheck="true"># seg_list: 切好词的列表 [word1 ,word2 .......]</span>
    <span class="token comment" spellcheck="true"># 首先去掉多余空字符</span>
    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> seg_list <span class="token keyword">if</span> word<span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 去掉停用词</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true"># 第一步: 先将原始文本执行清洗操作</span>
res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print('res=', res)</span>
<span class="token comment" spellcheck="true"># 第二步: 对清洗结果进行分词, 默认是精确模式, 当设置cut_all=True时, 采用全模式</span>
words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># 第三步: 将分词的结果传入过滤停用词函数中, 并打印结果</span>
result <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印-1"><a href="#打印-1" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'！'</span><span class="token punctuation">,</span> <span class="token string">'以前'</span><span class="token punctuation">,</span> <span class="token string">'出现'</span><span class="token punctuation">,</span> <span class="token string">'过该'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'有没有'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'没测'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'看'</span><span class="token punctuation">,</span> <span class="token string">'一四缸'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'是否'</span><span class="token punctuation">,</span> <span class="token string">'偏低'</span><span class="token punctuation">,</span> <span class="token string">'电脑'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'缺火'</span><span class="token punctuation">,</span> <span class="token string">'点火'</span><span class="token punctuation">,</span> <span class="token string">'线圈'</span><span class="token punctuation">,</span> <span class="token string">'火花塞'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'干活'</span><span class="token punctuation">,</span> <span class="token string">'直接'</span><span class="token punctuation">,</span> <span class="token string">'二三'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'倒'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'跑'</span><span class="token punctuation">,</span> <span class="token string">'一段'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'码'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'排除'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'还'</span><span class="token punctuation">,</span> <span class="token string">'调'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'都'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'发动机'</span><span class="token punctuation">,</span> <span class="token string">'电脑板'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'影响'</span><span class="token punctuation">,</span> <span class="token string">'不大'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'八个'</span><span class="token punctuation">,</span> <span class="token string">'以上'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'说'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'点击'</span><span class="token punctuation">,</span> <span class="token string">'头像'</span><span class="token punctuation">,</span> <span class="token string">'关注'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'随时'</span><span class="token punctuation">,</span> <span class="token string">'询问'</span><span class="token punctuation">,</span> <span class="token string">'一定'</span><span class="token punctuation">,</span> <span class="token string">'真诚'</span><span class="token punctuation">,</span> <span class="token string">'用心'</span><span class="token punctuation">,</span> <span class="token string">'解决'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'谢谢'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'客气'</span><span class="token punctuation">]</span>
</code></pre>
<h5 id="7：句子的处理"><a href="#7：句子的处理" class="headerlink" title="7：句子的处理"></a>7：句子的处理</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sentence_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 预处理模块(处理一条句子, 被sentences_proc调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 待处理字符串</span>

    <span class="token comment" spellcheck="true"># 第一步: 执行清洗原始文本的操作</span>
    sentence <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步: 执行分词操作, 默认精确模式, 全模式cut参数cut_all=True</span>
    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第三步: 将分词结果输入过滤停用词函数中</span>
    words <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 返回字符串结果, 按空格分隔, 将过滤停用词后的列表拼接</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>

res <span class="token operator">=</span> sentence_proc<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印-2"><a href="#打印-2" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span> ！ 以前 出现 过该 故障 ？ 缸 压 有没有 测量 一下 ？ 没有 没测 缸 压 测量 一下 缸 压 看 一四缸 缸 压 是否 偏低 电脑 测 ， <span class="token number">14</span> 缸 缺火 点火 线圈 火花塞 喷油嘴 不用 干活 直接 二三 缸 倒 一下 跑 一段 测量 一下 故障 码 进行 排除 师傅 还 调 一下 喷油嘴 测 一下 缸 压 都 正常 发动机 电脑板 问题 影响 不大 缸 压 八个 以上 正常 说 测量 缸 压 缸 压 正常 没有 问题 点击 头像 关注 问题 随时 询问 一定 真诚 用心 解决 师傅 ， 谢谢 不用 客气
</code></pre>
<h5 id="7：语句处理的函数-2"><a href="#7：语句处理的函数-2" class="headerlink" title="7：语句处理的函数(2)"></a>7：语句处理的函数(2)</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sentences_proc</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 预处理模块(处理一个句子列表, 对每个句子调用sentence_proc操作)</span>
    <span class="token comment" spellcheck="true"># df: 数据集</span>

    <span class="token comment" spellcheck="true"># 批量预处理训练集和测试集</span>
    <span class="token keyword">for</span> col_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Brand'</span><span class="token punctuation">,</span> <span class="token string">'Model'</span><span class="token punctuation">,</span> <span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 训练集Report预处理</span>
    <span class="token keyword">if</span> <span class="token string">'Report'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
        df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 以Pandas的DataFrame格式返回</span>
    <span class="token keyword">return</span> df
</code></pre>
<h5 id="8：加载构建好的训练集和测试集的函数"><a href="#8：加载构建好的训练集和测试集的函数" class="headerlink" title="8：加载构建好的训练集和测试集的函数"></a>8：加载构建好的训练集和测试集的函数</h5><pre class=" language-python"><code class="language-python">
<span class="token comment" spellcheck="true"># 加载处理好的训练样本和训练标签.npy文件(执行完build_dataset后才能使用)</span>
<span class="token keyword">def</span> <span class="token function">load_train_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>
    <span class="token comment" spellcheck="true"># max_dec_len: 最长标签长度, 后面的截断</span>
    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_x_path<span class="token punctuation">)</span>
    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_y_path<span class="token punctuation">)</span>

    train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>
    train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_dec_len<span class="token punctuation">]</span>

    <span class="token keyword">return</span> train_X<span class="token punctuation">,</span> train_Y

<span class="token comment" spellcheck="true"># 加载处理好的测试样本.npy文件(执行完build_dataset后才能使用)</span>
<span class="token keyword">def</span> <span class="token function">load_test_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>
    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>test_x_path<span class="token punctuation">)</span>
    test_X <span class="token operator">=</span> test_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>
    <span class="token keyword">return</span> test_X
</code></pre>
<h5 id="9-完成本步骤总体逻辑的函数build-dataset-函数"><a href="#9-完成本步骤总体逻辑的函数build-dataset-函数" class="headerlink" title="9: 完成本步骤总体逻辑的函数build_dataset()函数"></a>9: 完成本步骤总体逻辑的函数build_dataset()函数</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据预处理总函数, 用于数据加载 + 预处理 (注意: 只需执行一次)</span>
<span class="token keyword">def</span> <span class="token function">build_dataset</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 1. 加载原始数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1. 加载原始数据'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 必须设定数据格式为utf-8</span>
    train_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 82943, 20000</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 2. 空值去除(对于一行数据, 任意列只要有空值就去掉该行)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2. 空值去除（对于一行数据，任意列只要有空值就去掉该行）'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空值去除后训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)'</span><span class="token punctuation">)</span>
    train_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>test_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sentences_proc has done!'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 4. 合并训练测试集, 用于构造映射字典word_to_id</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4. 合并训练测试集, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>
    train_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>
    test_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># merged列是训练集三列和测试集两列按行连接在一起再按列堆积, 用于构造映射字典</span>
    <span class="token comment" spellcheck="true"># 按列堆积, 用于构造映射字典</span>
    merged_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集行数&amp;#123;&amp;#125;, 测试集行数&amp;#123;&amp;#125;, 合并数据集行数&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>merged_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 5. 保存分割处理好的train_seg_data.csv, test_set_data.csv</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5. 保存分割处理好的train_seg_data.csv, test_set_data.csv'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 把建立的列merged去掉, 该列对于神经网络无用</span>
    train_df <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 将处理后的数据存入持久化文件</span>
    train_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The csv_file has saved!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>
    merged_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word_to_vector file has saved!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 7. 构建word_to_id字典和id_to_word字典, 根据第6步存储的合并文件数据来完成.</span>
    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总体单词总数count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    res_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    number <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>
            res_dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> i
            number <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入到字典中的单词总数number='</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合并数据集的字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> res_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
            word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
            count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终构造完毕字典, word_to_id容量='</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']"</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 9. 填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>, 使数据变为等长</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'9. 填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>, 使数据变为等长'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 获取适当的最大长度</span>
    train_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    test_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_y_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集样本的最大长度为: '</span><span class="token punctuation">,</span> train_x_max_len<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前测试集样本的最大长度为: '</span><span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集标签的最大长度为: '</span><span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 选训练集和测试集中较大的值</span>
    x_max_len <span class="token operator">=</span> max<span class="token punctuation">(</span>train_x_max_len<span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 训练集X填充处理</span>
    <span class="token comment" spellcheck="true"># train_df['X'] = train_df['X'].apply(lambda x: pad_proc(x, x_max_len, vocab))</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 测试集X填充处理</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 训练集Y填充处理</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>后的X和Y</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>后的X和Y'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充后的三个文件保存完毕!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 11. 重新构建word_to_id字典和id_to_word字典, 根据第10步存储的3个文件数据来完成.</span>
    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 对训练集数据Y进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 对测试集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f3<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单词总数量count= '</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 构造逆向字典id_to_word</span>
    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        id_to_word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逆向字典构造完毕, id_to_word容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>id_to_word<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 12. 更新vocab并保存</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12. 更新vocab并保存'</span><span class="token punctuation">)</span>
    save_vocab_as_txt<span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span>
    save_vocab_as_txt<span class="token punctuation">(</span>reverse_vocab_path<span class="token punctuation">,</span> id_to_word<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字典映射器word_to_id, id_to_word保存完毕!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>


    <span class="token comment" spellcheck="true"># 13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X执行transform_data中......'</span><span class="token punctuation">)</span>
    train_ids_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y执行transform_data中......'</span><span class="token punctuation">)</span>
    train_ids_y <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X执行transform_data中......'</span><span class="token punctuation">)</span>
    test_ids_x <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 14. 数据转换成numpy数组(需等长)</span>
    <span class="token comment" spellcheck="true"># 将索引列表转换成矩阵 [32800, 403, 986, 246, 231] --> array([[32800, 403, 986, 246, 231], ...])</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'14. 数据转换成numpy数组(需等长)'</span><span class="token punctuation">)</span>
    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_y<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换为numpy数组的形状如下: \ntrain_X的shape为: '</span><span class="token punctuation">,</span> train_X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntrain_Y的shape为: '</span><span class="token punctuation">,</span> train_Y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntest_X的shape为: '</span><span class="token punctuation">,</span> test_X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 15. 保存数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'15. 保存数据......'</span><span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_x_path<span class="token punctuation">,</span> train_X<span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_y_path<span class="token punctuation">,</span> train_Y<span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>test_x_path<span class="token punctuation">,</span> test_X<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据集构造完毕, 存储于seq2seq/data/目录下.'</span><span class="token punctuation">)</span>
</code></pre>
<h4 id="前面数据处理合并的代码"><a href="#前面数据处理合并的代码" class="headerlink" title="前面数据处理合并的代码"></a>前面数据处理合并的代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> re
<span class="token keyword">import</span> jieba
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>multi_proc_utils <span class="token keyword">import</span> parallelize
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> save_vocab_as_txt
root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 配置模块</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">from</span> utils<span class="token punctuation">.</span>params_utils <span class="token keyword">import</span> get_params


<span class="token comment" spellcheck="true"># 载入词向量参数</span>
params <span class="token operator">=</span> get_params<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># jieba载入自定义切词表</span>
jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span>user_dict_path<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_max_len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 获得合适的最大长度值(被build_dataset调用)</span>
    <span class="token comment" spellcheck="true"># data: 待统计的数据train_df['Question']</span>
    <span class="token comment" spellcheck="true"># 句子最大长度为空格数+1</span>
    max_lens <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 平均值+2倍方差的方式</span>
    <span class="token keyword">return</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#完成文本语句单词到id的数字映射函数</span>
<span class="token keyword">def</span> <span class="token function">transform_data</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 句子转换为index序列(被build_dataset调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 'word1 word2 word3 ...'  ->  [index1, index2, index3 ...]</span>
    <span class="token comment" spellcheck="true"># word_to_id: 映射字典</span>

    <span class="token comment" spellcheck="true"># 字符串切分成词</span>
    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 按照word_to_id的id进行转换, 到未知词就填充unk的索引</span>
    ids <span class="token operator">=</span> <span class="token punctuation">[</span>word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> word_to_id<span class="token punctuation">[</span><span class="token string">'&lt;UNK>'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 返回映射后的文本id值列表</span>
    <span class="token keyword">return</span> ids

<span class="token comment" spellcheck="true"># 填充特殊标识符的函数</span>
<span class="token keyword">def</span> <span class="token function">pad_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 根据max_len和vocab填充&lt;START> &lt;STOP> &lt;PAD> &lt;UNK></span>

    <span class="token comment" spellcheck="true"># 0. 按空格统计切分出词</span>
    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 1. 截取规定长度的词数</span>
    words <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 2. 填充&lt;UNK></span>
    sentence <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> <span class="token string">'&lt;UNK>'</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 3. 填充&lt;START> &lt;END></span>
    sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;START>'</span><span class="token punctuation">]</span> <span class="token operator">+</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;STOP>'</span><span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 4. 判断长度，填充&lt;PAD></span>
    sentence <span class="token operator">=</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD>'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_len <span class="token operator">-</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 以空格连接列表, 返回结果字符串</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#加载停用词的函数</span>
<span class="token keyword">def</span> <span class="token function">load_stop_words</span><span class="token punctuation">(</span>stop_word_payh<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true">#stop_word_payh:停用词的存储路径</span>
    <span class="token comment" spellcheck="true">#打开停用词表</span>
    f <span class="token operator">=</span> open<span class="token punctuation">(</span>stop_word_payh<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
    stop_words <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>stop_word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span>  stop_word <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>
    <span class="token keyword">return</span> stop_words


<span class="token comment" spellcheck="true"># 加载停用词, 这里面的stop_words_path是早已在config.py文件中配置好的</span>
stop_words <span class="token operator">=</span> load_stop_words<span class="token punctuation">(</span>stop_words_path<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stop_words: '</span><span class="token punctuation">,</span> stop_words<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token comment" spellcheck="true">#清理文本的函数</span>
<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 特殊符号去除(被sentence_proc调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 待处理的字符串</span>
    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 删除1. 2. 3. 这些标题</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正则表达式</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 删除带括号的 进口 海外</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 删除除了汉字数字字母和，！？。.- 以外的字符</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># 用中文输入法下的，！？来替换英文输入法下的,!?</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 删除 车主说 技师说 语音 图片 你好 您好</span>
        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|你好|您好"</span><span class="token punctuation">)</span>
        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>
        <span class="token keyword">return</span> sentence
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span>
sentence <span class="token operator">=</span> <span class="token string">'技师说：你好！以前也出现过该故障吗？|技师说：缸压多少有没有测量一下?|车主说：没有过|车主说：没测缸压|技师说：测量一下缸压 看一四缸缸压是否偏低|车主说：用电脑测，只是14缸缺火|车主说：[语音]|车主说：[语音]|技师说：点火线圈  火花塞 喷油嘴不用干活  直接和二三缸对倒一下  跑一段在测量一下故障码进行排除|车主说：[语音]|车主>说：[语音]|车主说：[语音]|车主说：[语音]|车主说：师傅还在吗|技师说：调一下喷油嘴  测一下缸压  都正常则为发动机电脑板问题|车主说：[语音]|车主说：[语音]|车主说：[语音]|技师说：这个影响不大的|技师说：缸压八个以上正常|车主说：[语音]|技师说：所以说让你测量缸压  只要缸压正常则没有问题|车主说：[语音]|车主说：[语音]|技师说：可以点击头像关注我  有什么问题随时询问  一定真诚用心为你解决|车主说：师傅，谢谢了|技师说：不用客气'</span>


<span class="token comment" spellcheck="true">#过滤停用词的函数</span>
<span class="token keyword">def</span> <span class="token function">filter_stopwords</span><span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 过滤一句切好词的话中的停用词(被sentence_proc调用)</span>
    <span class="token comment" spellcheck="true"># seg_list: 切好词的列表 [word1 ,word2 .......]</span>
    <span class="token comment" spellcheck="true"># 首先去掉多余空字符</span>
    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> seg_list <span class="token keyword">if</span> word<span class="token punctuation">]</span>
    <span class="token comment" spellcheck="true"># 去掉停用词</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>


<span class="token comment" spellcheck="true"># 第一步: 先将原始文本执行清洗操作</span>
res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
<span class="token comment" spellcheck="true"># print('res=', res)</span>

<span class="token comment" spellcheck="true"># 第二步: 对清洗结果进行分词, 默认是精确模式, 当设置cut_all=True时, 采用全模式</span>
words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>res<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 第三步: 将分词的结果传入过滤停用词函数中, 并打印结果</span>
result <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>



<span class="token comment" spellcheck="true"># 句子的处理</span>
<span class="token keyword">def</span> <span class="token function">sentence_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 预处理模块(处理一条句子, 被sentences_proc调用)</span>
    <span class="token comment" spellcheck="true"># sentence: 待处理字符串</span>

    <span class="token comment" spellcheck="true"># 第一步: 执行清洗原始文本的操作</span>
    sentence <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步: 执行分词操作, 默认精确模式, 全模式cut参数cut_all=True</span>
    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第三步: 将分词结果输入过滤停用词函数中</span>
    words <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 返回字符串结果, 按空格分隔, 将过滤停用词后的列表拼接</span>
    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>

res <span class="token operator">=</span> sentence_proc<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>


    <span class="token comment" spellcheck="true"># 语句处理的函数(2)</span>

<span class="token keyword">def</span> <span class="token function">sentences_proc</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 预处理模块(处理一个句子列表, 对每个句子调用sentence_proc操作)</span>
    <span class="token comment" spellcheck="true"># df: 数据集</span>

    <span class="token comment" spellcheck="true"># 批量预处理训练集和测试集</span>
    <span class="token keyword">for</span> col_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Brand'</span><span class="token punctuation">,</span> <span class="token string">'Model'</span><span class="token punctuation">,</span> <span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 训练集Report预处理</span>
    <span class="token keyword">if</span> <span class="token string">'Report'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>
        df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 以Pandas的DataFrame格式返回</span>
    <span class="token keyword">return</span> df





<span class="token comment" spellcheck="true"># 加载构建好的训练集和测试集的函数</span>
<span class="token comment" spellcheck="true"># 加载处理好的训练样本和训练标签.npy文件(执行完build_dataset后才能使用)</span>
<span class="token keyword">def</span> <span class="token function">load_train_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>
    <span class="token comment" spellcheck="true"># max_dec_len: 最长标签长度, 后面的截断</span>
    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_x_path<span class="token punctuation">)</span>
    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_y_path<span class="token punctuation">)</span>

    train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>
    train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_dec_len<span class="token punctuation">]</span>

    <span class="token keyword">return</span> train_X<span class="token punctuation">,</span> train_Y

<span class="token comment" spellcheck="true"># 加载处理好的测试样本.npy文件(执行完build_dataset后才能使用)</span>
<span class="token keyword">def</span> <span class="token function">load_test_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>
    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>test_x_path<span class="token punctuation">)</span>
    test_X <span class="token operator">=</span> test_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>
    <span class="token keyword">return</span> test_X



    <span class="token comment" spellcheck="true"># 9: 完成本步骤总体逻辑的函数build_dataset()函数</span>

<span class="token comment" spellcheck="true"># 数据预处理总函数, 用于数据加载 + 预处理 (注意: 只需执行一次)</span>
<span class="token keyword">def</span> <span class="token function">build_dataset</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># 1. 加载原始数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1. 加载原始数据'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 必须设定数据格式为utf-8</span>
    train_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 82943, 20000</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 2. 空值去除(对于一行数据, 任意列只要有空值就去掉该行)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2. 空值去除（对于一行数据，任意列只要有空值就去掉该行）'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空值去除后训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)'</span><span class="token punctuation">)</span>
    train_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>test_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sentences_proc has done!'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 4. 合并训练测试集, 用于构造映射字典word_to_id</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4. 合并训练测试集, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>
    train_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>
    test_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># merged列是训练集三列和测试集两列按行连接在一起再按列堆积, 用于构造映射字典</span>
    <span class="token comment" spellcheck="true"># 按列堆积, 用于构造映射字典</span>
    merged_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集行数&amp;#123;&amp;#125;, 测试集行数&amp;#123;&amp;#125;, 合并数据集行数&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>merged_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 5. 保存分割处理好的train_seg_data.csv, test_set_data.csv</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5. 保存分割处理好的train_seg_data.csv, test_set_data.csv'</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 把建立的列merged去掉, 该列对于神经网络无用</span>
    train_df <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    test_df <span class="token operator">=</span> test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 将处理后的数据存入持久化文件</span>
    train_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The csv_file has saved!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>
    merged_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word_to_vector file has saved!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 7. 构建word_to_id字典和id_to_word字典, 根据第6步存储的合并文件数据来完成.</span>
    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
                    count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总体单词总数count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    res_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    number <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>
            res_dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> i
            number <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入到字典中的单词总数number='</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合并数据集的字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> res_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
            word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
            count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终构造完毕字典, word_to_id容量='</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']"</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 9. 填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>, 使数据变为等长</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'9. 填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>, 使数据变为等长'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 获取适当的最大长度</span>
    train_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    test_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    train_y_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集样本的最大长度为: '</span><span class="token punctuation">,</span> train_x_max_len<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前测试集样本的最大长度为: '</span><span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集标签的最大长度为: '</span><span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 选训练集和测试集中较大的值</span>
    x_max_len <span class="token operator">=</span> max<span class="token punctuation">(</span>train_x_max_len<span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 训练集X填充处理</span>
    <span class="token comment" spellcheck="true"># train_df['X'] = train_df['X'].apply(lambda x: pad_proc(x, x_max_len, vocab))</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 测试集X填充处理</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 训练集Y填充处理</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>后的X和Y</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>后的X和Y'</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充后的三个文件保存完毕!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 11. 重新构建word_to_id字典和id_to_word字典, 根据第10步存储的3个文件数据来完成.</span>
    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    count <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 对训练集数据Y进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 对测试集数据X进行处理</span>
    <span class="token keyword">with</span> open<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> f3<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>
                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>
                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count
                    count <span class="token operator">+=</span> <span class="token number">1</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单词总数量count= '</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 构造逆向字典id_to_word</span>
    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>
    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        id_to_word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逆向字典构造完毕, id_to_word容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>id_to_word<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 12. 更新vocab并保存</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12. 更新vocab并保存'</span><span class="token punctuation">)</span>
    save_vocab_as_txt<span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span>
    save_vocab_as_txt<span class="token punctuation">(</span>reverse_vocab_path<span class="token punctuation">,</span> id_to_word<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字典映射器word_to_id, id_to_word保存完毕!'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>


    <span class="token comment" spellcheck="true"># 13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X执行transform_data中......'</span><span class="token punctuation">)</span>
    train_ids_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y执行transform_data中......'</span><span class="token punctuation">)</span>
    train_ids_y <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X执行transform_data中......'</span><span class="token punctuation">)</span>
    test_ids_x <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 14. 数据转换成numpy数组(需等长)</span>
    <span class="token comment" spellcheck="true"># 将索引列表转换成矩阵 [32800, 403, 986, 246, 231] --> array([[32800, 403, 986, 246, 231], ...])</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'14. 数据转换成numpy数组(需等长)'</span><span class="token punctuation">)</span>
    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_y<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换为numpy数组的形状如下: \ntrain_X的shape为: '</span><span class="token punctuation">,</span> train_X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntrain_Y的shape为: '</span><span class="token punctuation">,</span> train_Y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntest_X的shape为: '</span><span class="token punctuation">,</span> test_X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 15. 保存数据</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'15. 保存数据......'</span><span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_x_path<span class="token punctuation">,</span> train_X<span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_y_path<span class="token punctuation">,</span> train_Y<span class="token punctuation">)</span>
    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>test_x_path<span class="token punctuation">,</span> test_X<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据集构造完毕, 存储于seq2seq/data/目录下.'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    build_dataset<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span>
</code></pre>
<h5 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h5><pre class=" language-python"><code class="language-python">Building prefix dict <span class="token keyword">from</span> the default dictionary <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Loading model <span class="token keyword">from</span> cache <span class="token operator">/</span>tmp<span class="token operator">/</span>jieba<span class="token punctuation">.</span>cache
Loading model cost <span class="token number">0.753</span> seconds<span class="token punctuation">.</span>
Prefix dict has been built successfully<span class="token punctuation">.</span>
<span class="token number">1</span><span class="token punctuation">.</span> 加载原始数据
<span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">/</span>text_summary<span class="token operator">/</span>seq2seq<span class="token operator">/</span>data<span class="token operator">/</span>train<span class="token punctuation">.</span>csv
原始训练集行数 <span class="token number">82943</span><span class="token punctuation">,</span> 测试集行数 <span class="token number">20000</span>


<span class="token number">2</span><span class="token punctuation">.</span> 空值去除（对于一行数据，任意列只要有空值就去掉该行）
空值去除后训练集行数 <span class="token number">82871</span><span class="token punctuation">,</span> 测试集行数 <span class="token number">20000</span>


<span class="token number">3</span><span class="token punctuation">.</span> 多线程<span class="token punctuation">,</span> 批量数据预处理<span class="token punctuation">(</span>对每个句子执行sentence_proc，清除无用词，切词，过滤停用词，再用空格拼接为一个字符串<span class="token punctuation">)</span>


sentences_proc has done!
<span class="token number">4</span><span class="token punctuation">.</span> 合并训练测试集，用于训练词向量
训练集行数<span class="token number">82871</span><span class="token punctuation">,</span> 测试集行数<span class="token number">20000</span><span class="token punctuation">,</span> 合并数据集行数<span class="token number">102871</span>


<span class="token number">5</span><span class="token punctuation">.</span> 保存分割处理好的train_seg_data<span class="token punctuation">.</span>csv、test_set_data<span class="token punctuation">.</span>csv
The csv_file has saved!


<span class="token number">6</span><span class="token punctuation">.</span> 保存合并数据merged_seg_data<span class="token punctuation">.</span>csv，用于训练词向量
The word_to_vector file has saved!


总体单词总数count<span class="token operator">=</span> <span class="token number">124520</span>


进入到字典中的单词总数number<span class="token operator">=</span> <span class="token number">32227</span>
合并数据集的字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32227</span>


最终构造完毕字典<span class="token punctuation">,</span> word_to_id容量<span class="token operator">=</span> <span class="token number">32227</span>
count<span class="token operator">=</span> <span class="token number">32227</span>
<span class="token number">8</span><span class="token punctuation">.</span> 将Question和Dialogue用空格连接作为模型输入形成train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span>


<span class="token number">9</span><span class="token punctuation">.</span> 填充<span class="token operator">&lt;</span>START<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>STOP<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>UNK<span class="token operator">></span>和<span class="token operator">&lt;</span>PAD<span class="token operator">></span>，使数据变为等长
填充前训练集样本的最大长度为<span class="token punctuation">:</span>  <span class="token number">298</span>
填充前测试集样本的最大长度为<span class="token punctuation">:</span>  <span class="token number">312</span>
填充前训练集标签的最大长度为<span class="token punctuation">:</span>  <span class="token number">38</span>
训练集X填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
测试集X填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
训练集Y填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token number">10</span><span class="token punctuation">.</span> 保存填充<span class="token operator">&lt;</span>START<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>STOP<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>UNK<span class="token operator">></span>和<span class="token operator">&lt;</span>PAD<span class="token operator">></span>后的X和Y
填充后的三个文件保存完毕!


训练集X字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32101</span>
训练集Y字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32130</span>
测试集X字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32217</span>
单词总数量count<span class="token operator">=</span>  <span class="token number">32217</span>
逆向字典构造完毕<span class="token punctuation">,</span> id_to_word容量<span class="token punctuation">:</span>  <span class="token number">32217</span>


字典映射器word_to_id<span class="token punctuation">,</span> id_to_word保存完毕!


<span class="token number">13</span><span class="token punctuation">.</span> 数据集转换 将词转换成索引  <span class="token punctuation">[</span><span class="token operator">&lt;</span>START<span class="token operator">></span> 方向机 重 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">32800</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">,</span> <span class="token number">986</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">]</span>
训练集X执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
训练集Y执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
测试集X执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


<span class="token number">14</span><span class="token punctuation">.</span> 数据转换成numpy数组<span class="token punctuation">(</span>需等长<span class="token punctuation">)</span>
转换为numpy数组的形状如下<span class="token punctuation">:</span> 
train_X的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">82871</span><span class="token punctuation">,</span> <span class="token number">314</span><span class="token punctuation">)</span> 
train_Y的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">82871</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> 
test_X的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">314</span><span class="token punctuation">)</span>


<span class="token number">15</span><span class="token punctuation">.</span> 保存数据


数据集构造完毕，于seq2seq<span class="token operator">/</span>data<span class="token operator">/</span>目录下
</code></pre>
<p><strong>结论</strong>: 通过五个步骤实现了全部的工具函数, 并完成了数据预处理. 后续模型类需要数据的时候, 可以直接通过加载文件的方式读取数据, 非常方便. 对于任意工业级别的项目来说, 数据预处理都处于非常重要的地位, 代码量和耗费的时间也占了整个项目很大的比例.</p>
<h4 id="模型类的实现"><a href="#模型类的实现" class="headerlink" title="模型类的实现"></a>模型类的实现</h4><ul>
<li><p>在模型类的实现过程中, 为了代码的解耦和结构清晰, 总共需要完成以下几个函数的实现:</p>
<ul>
<li>第一步: 实现批次数据加载的函数batcher.py</li>
<li>第二步: 实现模型中子层的函数layers.py</li>
<li>第三步: 实现模型类的函数model.py</li>
</ul>
</li>
<li><h5 id="第一步-实现批次数据加载的函数batcher-py"><a href="#第一步-实现批次数据加载的函数batcher-py" class="headerlink" title="第一步: 实现批次数据加载的函数batcher.py"></a>第一步: 实现批次数据加载的函数batcher.py</h5><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/batcher.py</li>
</ul>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入工具包</span>
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> TensorDataset

<span class="token comment" spellcheck="true"># 设定项目的rootL路径, 方便后续相关代码文件的导入</span>
root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 导入项目相关的代码文件</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>data_loader <span class="token keyword">import</span> load_train_dataset<span class="token punctuation">,</span> load_test_dataset

<span class="token comment" spellcheck="true"># 训练批次数据生成器函数</span>
<span class="token keyword">def</span> <span class="token function">train_batch_generator</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> sample_num<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># batch_size: batch大小</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 样本最大长度</span>
    <span class="token comment" spellcheck="true"># max_dec_len: 标签最大长度</span>
    <span class="token comment" spellcheck="true"># sample_num: 限定样本个数大小</span>

    <span class="token comment" spellcheck="true"># 直接从已经预处理好的数据文件中加载训练集数据</span>
    train_X<span class="token punctuation">,</span> train_Y <span class="token operator">=</span> load_train_dataset<span class="token punctuation">(</span>max_enc_len<span class="token punctuation">,</span> max_dec_len<span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 对数据进行限定长度的切分</span>
    <span class="token keyword">if</span> sample_num<span class="token punctuation">:</span>
        train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span>sample_num<span class="token punctuation">]</span>
        train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span>sample_num<span class="token punctuation">]</span>

    <span class="token comment" spellcheck="true"># 将numpy类型的数据转换为Pytorch下的tensor类型, 因为TensorDataset只接收tensor类型数据</span>
    x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_X<span class="token punctuation">)</span>
    y_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_Y<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第一步: 先对数据进行封装</span>
    dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> y_data<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步: 再对dataset进行迭代器的构建</span>
    <span class="token comment" spellcheck="true"># 如果机器没有GPU, 请采用下面的注释行代码</span>
    <span class="token comment" spellcheck="true"># dataset = DataLoader(dataset, batch_size=batch_size, shuffle=True, drop_last=True)</span>

    <span class="token comment" spellcheck="true"># 如果机器有GPU, 请采用下面的代码, 可以加速训练流程</span>
    dataset <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                         num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 计算每个epoch要循环多少次</span>
    steps_per_epoch <span class="token operator">=</span> len<span class="token punctuation">(</span>train_X<span class="token punctuation">)</span> <span class="token operator">//</span> batch_size

    <span class="token comment" spellcheck="true"># 将封装好的数据集和次数返回</span>
    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> steps_per_epoch

<span class="token comment" spellcheck="true"># 测试批次数据生成器函数</span>
<span class="token keyword">def</span> <span class="token function">test_batch_generator</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># batch_size: batch大小</span>
    <span class="token comment" spellcheck="true"># max_enc_len: 样本最大长度</span>

    <span class="token comment" spellcheck="true"># 直接从已经预处理好的数据文件中加载测试集数据</span>
    test_X <span class="token operator">=</span> load_test_dataset<span class="token punctuation">(</span>max_enc_len<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 将numpy类型的数据转换为Pytorch下的tensor类型, 因为TensorDataset只接收tensor类型数据</span>
    x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第一步: 先对数据进行封装</span>
    dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 第二步: 再对dataset进行迭代器的构建</span>
    dataset <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 计算每个epoch要循环多少次</span>
    steps_per_epoch <span class="token operator">=</span> len<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span> <span class="token operator">//</span> batch_size

    <span class="token comment" spellcheck="true"># 将封装好的数据集和次数返回</span>
    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> steps_per_epoch
</code></pre>
<h5 id="打印-3"><a href="#打印-3" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">
Building prefix dict <span class="token keyword">from</span> the default dictionary <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Loading model <span class="token keyword">from</span> cache 
Loading model cost <span class="token number">0.829</span> seconds<span class="token punctuation">.</span>
Prefix dict has been built successfully<span class="token punctuation">.</span>
stop_words<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'———'</span><span class="token punctuation">,</span> <span class="token string">'》），'</span><span class="token punctuation">,</span> <span class="token string">'）÷（１－'</span><span class="token punctuation">,</span> <span class="token string">'”，'</span><span class="token punctuation">,</span> <span class="token string">'）、'</span><span class="token punctuation">,</span> <span class="token string">'＝（'</span><span class="token punctuation">,</span> <span class="token string">'→'</span><span class="token punctuation">,</span> <span class="token string">'℃'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'一一'</span><span class="token punctuation">,</span> <span class="token string">'~~~~'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'.一'</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'＝″'</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">'！'</span><span class="token punctuation">,</span> <span class="token string">'以前'</span><span class="token punctuation">,</span> <span class="token string">'出现'</span><span class="token punctuation">,</span> <span class="token string">'过该'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'有没有'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'没测'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'看'</span><span class="token punctuation">,</span> <span class="token string">'一四缸'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'是否'</span><span class="token punctuation">,</span> <span class="token string">'偏低'</span><span class="token punctuation">,</span> <span class="token string">'电脑'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'缺火'</span><span class="token punctuation">,</span> <span class="token string">'点火'</span><span class="token punctuation">,</span> <span class="token string">'线圈'</span><span class="token punctuation">,</span> <span class="token string">'火花塞'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'干活'</span><span class="token punctuation">,</span> <span class="token string">'直接'</span><span class="token punctuation">,</span> <span class="token string">'二三'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'倒'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'跑'</span><span class="token punctuation">,</span> <span class="token string">'一段'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'码'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'排除'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'还'</span><span class="token punctuation">,</span> <span class="token string">'调'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'都'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'发动机'</span><span class="token punctuation">,</span> <span class="token string">'电脑板'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'影响'</span><span class="token punctuation">,</span> <span class="token string">'不大'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'八个'</span><span class="token punctuation">,</span> <span class="token string">'以上'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'说'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'点击'</span><span class="token punctuation">,</span> <span class="token string">'头像'</span><span class="token punctuation">,</span> <span class="token string">'关注'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'随时'</span><span class="token punctuation">,</span> <span class="token string">'询问'</span><span class="token punctuation">,</span> <span class="token string">'一定'</span><span class="token punctuation">,</span> <span class="token string">'真诚'</span><span class="token punctuation">,</span> <span class="token string">'用心'</span><span class="token punctuation">,</span> <span class="token string">'解决'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'谢谢'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'客气'</span><span class="token punctuation">]</span>
res<span class="token operator">=</span> ！ 以前 出现 过该 故障 ？ 缸 压 有没有 测量 一下 ？ 没有 没测 缸 压 测量 一下 缸 压 看 一四缸 缸 压 是否 偏低 电脑 测 ， <span class="token number">14</span> 缸 缺火 点火 线圈 火花塞 喷油嘴 不用 干活 直接 二三 缸 倒 一下 跑 一段 测量 一下 故障 码 进行 排除 师傅 还 调 一下 喷油嘴 测 一下 缸 压 都 正常 发动机 电脑板 问题 影响 不大 缸 压 八个 以上 正常 说 测量 缸 压 缸 压 正常 没有 问题 点击 头像 关注 问题 随时 询问 一定 真诚 用心 解决 师傅 ， 谢谢 不用 客气
<span class="token operator">&lt;</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataloader<span class="token punctuation">.</span>DataLoader object at <span class="token number">0x00000167C3F8DFC8</span><span class="token operator">></span>
<span class="token number">1294</span>
<span class="token operator">&lt;</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataloader<span class="token punctuation">.</span>DataLoader object at <span class="token number">0x00000167C231BFC8</span><span class="token operator">></span>
<span class="token number">312</span>
</code></pre>
<ul>
<li><h5 id="第二步-实现模型中子层的函数layers-py"><a href="#第二步-实现模型中子层的函数layers-py" class="headerlink" title="第二步: 实现模型中子层的函数layers.py"></a>第二步: 实现模型中子层的函数layers.py</h5><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/layers.py</li>
</ul>
</li>
<li><p>为了完成模型中子层的构建, 我们需要分3个小步骤:</p>
</li>
<li><p>1: 实现编码器类Encoder.</p>
</li>
<li><p>2: 实现注意力类Attention.</p>
</li>
<li><p>3: 实现解码器类Decoder.</p>
</li>
<li><p>1: 实现编码器类Encoder.</p>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入工具包</span>
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F
<span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment" spellcheck="true"># 设定项目的root路径, 方便后续的代码文件导入</span>
root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 导入项目相关的代码文件</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> get_vocab_from_model


<span class="token comment" spellcheck="true"># 构建编码器类</span>
<span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> enc_units<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>Encoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>vocab_size <span class="token operator">=</span> vocab_size
        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> embedding_dim
        self<span class="token punctuation">.</span>enc_units <span class="token operator">=</span> enc_units
        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size

        <span class="token comment" spellcheck="true"># 第一层: 词嵌入层</span>
        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 第二层: GRU层</span>
        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>input_size<span class="token operator">=</span>embedding_dim<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span>enc_units<span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h0<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># x.shape: (batch_size, sequence_length)</span>
        <span class="token comment" spellcheck="true"># h0.shape: (num_layers, batch_size, enc_units)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        output<span class="token punctuation">,</span> hn <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h0<span class="token punctuation">)</span>
        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hn<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">initialize_hidden_state</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># hidden state张量形状: (num_layers, batch_size, enc_units)</span>
        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>enc_units<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Attention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_units<span class="token punctuation">,</span> dec_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>Attention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>enc_units <span class="token operator">=</span> enc_units
        self<span class="token punctuation">.</span>dec_units <span class="token operator">=</span> dec_units
        self<span class="token punctuation">.</span>attn_units <span class="token operator">=</span> attn_units

        <span class="token comment" spellcheck="true"># 计算注意力的三次矩阵乘法, 对应着3个全连接层.</span>
        self<span class="token punctuation">.</span>w1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>enc_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>w2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>dec_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>v <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>attn_units<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># query为上次的decoder隐藏层，shape: (batch_size, dec_units)</span>
        <span class="token comment" spellcheck="true"># values为编码器的编码结果enc_output，shape: (batch_size, enc_seq_len, enc_units)</span>
        <span class="token comment" spellcheck="true"># 在应用self.V之前，张量的形状是(batch_size, enc_seq_len, attention_units)</span>
        <span class="token comment" spellcheck="true"># 得到score的shape: (batch_size, seq_len, 1)</span>
        score <span class="token operator">=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w1<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>w2<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 注意力权重，是score经过softmax，但是要作用在第一个轴上(seq_len的轴)</span>
        attention_weights <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>score<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># (batch_size, enc_seq_len, 1) * (batch_size, enc_seq_len, enc_units)</span>
        <span class="token comment" spellcheck="true"># 广播, encoder unit的每个位置都对应相乘</span>
        context_vector <span class="token operator">=</span> attention_weights <span class="token operator">*</span> value
        <span class="token comment" spellcheck="true"># 在最大长度enc_seq_len这一维度上求和</span>
        context_vector <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>context_vector<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true"># context_vector求和之后的shape: (batch_size, enc_units)</span>

        <span class="token keyword">return</span> context_vector<span class="token punctuation">,</span> attention_weights
</code></pre>
<h5 id="打印-4"><a href="#打印-4" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32217</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<ul>
<li><h5 id="第三步-实现模型类的函数model-py"><a href="#第三步-实现模型类的函数model-py" class="headerlink" title="第三步: 实现模型类的函数model.py"></a>第三步: 实现模型类的函数model.py</h5><ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/model.py</li>
</ul>
</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
<span class="token comment" spellcheck="true"># 设定项目的root路径, 方便后续代码文件的导入</span>
root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 导入工具包和项目相关的代码文件</span>
<span class="token keyword">import</span> torch
<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn
<span class="token keyword">from</span> src<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Encoder<span class="token punctuation">,</span> Attention<span class="token punctuation">,</span> Decoder
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> get_vocab_from_model


<span class="token comment" spellcheck="true"># 构建完整的seq2seq模型</span>
<span class="token keyword">class</span> <span class="token class-name">Seq2Seq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>
        super<span class="token punctuation">(</span>Seq2Seq<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>params <span class="token operator">=</span> params

        <span class="token comment" spellcheck="true"># 第一层: 编码器层</span>
        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> Encoder<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'vocab_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'embed_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                               params<span class="token punctuation">[</span><span class="token string">'enc_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 第二层: 注意力机制层</span>
        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> Attention<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'enc_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'dec_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'attn_units'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 第三层: 解码器层</span>
        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> Decoder<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'vocab_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'embed_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                               params<span class="token punctuation">[</span><span class="token string">'dec_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 实质上是在调用解码器,因为需要注意力机制,直接封装到forward中. 要调用编码器直接encoder()即可</span>
    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dec_input<span class="token punctuation">,</span> dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> dec_target<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment" spellcheck="true"># 这里的dec_input实质是(batch_size, 1)大小的&lt;START></span>
        predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

        <span class="token comment" spellcheck="true"># 拿编码器的输出和最终隐含层向量来计算</span>
        context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">)</span>

        <span class="token comment" spellcheck="true"># 循环解码</span>
        <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>dec_target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true"># dec_input (batch_size, 1); dec_hidden (batch_size, hidden_units)</span>
            pred<span class="token punctuation">,</span> dec_hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_input<span class="token punctuation">,</span> context_vector<span class="token punctuation">)</span>

            context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">)</span>

            <span class="token comment" spellcheck="true"># 使用teacher forcing, 并扩展维度到三维张量</span>
            dec_input <span class="token operator">=</span> dec_target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

            predictions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>

        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dec_hidden
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token comment" spellcheck="true"># word_to_id, id_to_word = get_vocab_from_model(vocab_path, reverse_vocab_path)</span>
    word_to_id <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>
    vocab_size <span class="token operator">=</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span>
    batch_size <span class="token operator">=</span> <span class="token number">64</span>
    input_seq_len <span class="token operator">=</span> <span class="token number">300</span>

    <span class="token comment" spellcheck="true"># 模拟测试参数</span>
    params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"vocab_size": vocab_size, "embed_size": 500, "enc_units": 512,</span>
              <span class="token string">"attn_units"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"dec_units"</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span><span class="token string">"batch_size"</span><span class="token punctuation">:</span> batch_size<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>

    <span class="token comment" spellcheck="true"># 实例化类对象</span>
    model <span class="token operator">=</span> Seq2Seq<span class="token punctuation">(</span>params<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 初始化测试输入数据</span>
    sample_input_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> input_seq_len<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span>
    sample_hidden <span class="token operator">=</span> model<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>initialize_hidden_state<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 调用Encoder进行编码</span>
    sample_output<span class="token punctuation">,</span> sample_hidden <span class="token operator">=</span> model<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>sample_input_batch<span class="token punctuation">,</span> sample_hidden<span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 打印输出张量维度</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encoder output shape: (batch_size, enc_seq_len, enc_units) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encoder Hidden state shape: (batch_size, enc_units) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_hidden<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 调用Attention进行注意力张量</span>
    context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> model<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>sample_hidden<span class="token punctuation">,</span> sample_output<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Attention context_vector shape: (batch_size, enc_units) &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>context_vector<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Attention weights shape: (batch_size, sequence_length, 1) &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>attention_weights<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true"># 调用Decoder进行解码</span>
    dec_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span>
    sample_decoder_output<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_input<span class="token punctuation">,</span> context_vector<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Decoder output shape: (batch_size, vocab_size) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_decoder_output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment" spellcheck="true"># 这里仅测试一步，没有用到dec_seq_len</span>
</code></pre>
<h6 id="打印-5"><a href="#打印-5" class="headerlink" title="打印"></a>打印</h6><pre class=" language-python"><code class="language-python">Encoder output shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_seq_len<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Encoder Hidden state shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Attention context_vector shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Attention weights shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> sequence_length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Decoder output shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32216</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span>
</code></pre>
<h4 id="训练和测试函数的实现"><a href="#训练和测试函数的实现" class="headerlink" title="训练和测试函数的实现"></a>训练和测试函数的实现</h4><ul>
<li>构建完成模型类后, 我们要分别实现训练函数和测试函数:<ul>
<li>第一步: 编写训练辅助函数train_helper.py</li>
<li>第二步: 编写训练主函数train.py</li>
<li>第三步: 编写测试辅助函数test_helper.py</li>
<li>第四步: 编写测试主函数test.py</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>第一步: 编写训练辅助函数train_helper.py<ul>
<li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/train_helper.py </li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>NLP</category>
      </categories>
      <tags>
        <tag>文本摘要</tag>
      </tags>
  </entry>
</search>
