<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小龙播客</title>
  
  <subtitle>小龙播客</subtitle>
  <link href="https://xiaoyvlongoing.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoyvlongoing.github.io/"/>
  <updated>2021-06-09T22:20:54.916Z</updated>
  <id>https://xiaoyvlongoing.github.io/</id>
  
  <author>
    <name>小龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://xiaoyvlongoing.github.io/2021/06/10/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xiaoyvlongoing.github.io/2021/06/10/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-06-09T16:52:48.077Z</published>
    <updated>2021-06-09T22:20:54.916Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：文本摘要项目理论"><a href="#1：文本摘要项目理论" class="headerlink" title="1：文本摘要项目理论"></a><strong>1：文本摘要项目理论</strong></h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>文本摘要思想</strong>：就是一个长文本把重要的摘要出来</p><h5 id="1：NLP角度来看文本摘要任务，主流的概括两大方法："><a href="#1：NLP角度来看文本摘要任务，主流的概括两大方法：" class="headerlink" title="1：NLP角度来看文本摘要任务，主流的概括两大方法："></a>1：NLP角度来看文本摘要任务，主流的概括两大方法：</h5><ul><li><p>抽取式摘要：Extraction-based（从文本中抽取）：直接从原文中选择若干条重要的句子, 并对它们进行排序和重组, 以形成摘要的方法.</p><ul><li><strong>无监督抽取</strong>：不需要平行语料, 节省了人工标记的成本. 大体上有如下几种:<ul><li>Lead</li><li>Centroid</li><li>ClusterCMRW</li><li>TextRank：最经典</li></ul></li><li><strong>有监督抽取：</strong>将文本摘要抽象成二分类问题, 通过神经网络来学习句子及其标签之间的对应关系. 需要平行语料, 需要人工标记的成本. 常见方法有如下几种<ul><li>R2N2</li><li>NeuralSum</li><li>SummaRuNNer</li><li><strong>BertSum</strong>：原本用来计算网页之间的关联性，后来被应用在句子上，句子之间反复传播，选出最关键的语句进行排序。因为文章总有中心句，而textrank就试图找出这个中心句。</li></ul></li><li>取式<strong>缺点</strong>：主要考虑单词词频，没有过多的语义信息，所以无法建立段落中的完整语义信息</li></ul></li><li><p><strong>生成式摘要: Abstraction-based：</strong>需要通过<strong>转述、同义替换、句子缩写</strong>等生成。</p><ul><li>生成式神经网络模型的基本结构主要由<strong>编码器（encoder）和解码器（decoder）</strong>组成，编码和解码都由神经网络实现。<ul><li><strong>编码器</strong>负责将输入的原文本编码成一个<strong>向量C（context），</strong></li><li><strong>而解码器</strong>负责从这个<strong>向量C</strong>提取<strong>重要信息、加工剪辑，生成文本摘要。</strong></li><li><strong>Sequence-to-Sequence</strong>（以下简称Seq2Seq），被广泛应用于存在输入序列和输出序列的场景，比如机器翻译（一种语言序列到另一种语言序列）、image captioning（图片像素序列到语言序列）、对话机器人（如问题到回答）等</li></ul></li></ul></li></ul><h4 id="2：数据的处理："><a href="#2：数据的处理：" class="headerlink" title="2：数据的处理："></a>2：数据的处理：</h4><p>一般来说, 在任何项目中, 面对原始数据都要进行接下来的几点工作:</p><ul><li>删除空值.</li><li>删除”脏”数据.<ul><li>在这个数据集中的脏数据为：<ul><li>有很多的技师说和，车主说</li><li>文本中有很多的图片字样和语音字样</li><li>有很多进口，车型，还有一些符号</li></ul></li></ul></li><li>删除特定字符的集合.</li><li>分词.</li><li>完成字符到id的映射.</li><li>完成padding, cutting的工作.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdtrain_path <span class="token operator">=</span> <span class="token string">'train.csv'</span>test_path <span class="token operator">=</span> <span class="token string">'test.csv'</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********************'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">82943</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">82942</span>Data columns <span class="token punctuation">(</span>total <span class="token number">6</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">82941</span> non<span class="token operator">-</span>null  object <span class="token number">5</span>   Report    <span class="token number">82873</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">3.8</span><span class="token operator">+</span> MB<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">20000</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">19999</span>Data columns <span class="token punctuation">(</span>total <span class="token number">5</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">20000</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">781.4</span><span class="token operator">+</span> KB</code></pre><h4 id="3：TextRank：算法理论基础"><a href="#3：TextRank：算法理论基础" class="headerlink" title="3：TextRank：算法理论基础"></a>3：TextRank：算法理论基础</h4><p>对比于衡量网页重要性的PageRank算法, TextRank算法用于衡量哪些单词是关键词, 类比之下的算法思想也就很好理解了:</p><ul><li>如果一个单词出现在很多单词的后面, 就是它和很多单词有关联, 那么说明这个单词比较重要.</li><li>如果一个TextRank值很高的单词后面跟着另一个单词, 那么后面这个单词的TextRank值也会相应的被提高.</li></ul><h4 id="3-1：TextRank算法代码实践"><a href="#3-1：TextRank算法代码实践" class="headerlink" title="3.1：TextRank算法代码实践"></a>3.1：TextRank算法代码实践</h4><ul><li>在本小节中, 我们仅以示例代码跑通几段小程序, 让同学们掌握如何具体在代码层面用TextRank.<ul><li>关键词抽取(keyword extraction)：是指从文本中确定一些能够描述文档含义的关键术语的过程<ul><li>对关键词抽取而言, 用于构建顶点集的文本单元可以使句子中的一个或多个字. 根据这些字之间的关系构建边.</li><li>根据任务的需要, 可以使用语法过滤器(syntactic filters)对顶点集进行优化. 语法过滤器的主要作用是将某一类或者某几类词性的字过滤出来作为顶点集.</li></ul></li><li>关键短语抽取(keyphrase extraction)</li><li>关键句抽取(sentence extraction)</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 导入textrank4zh的相关工具包</span><span class="token keyword">from</span> textrank4zh <span class="token keyword">import</span> TextRank4Keyword<span class="token punctuation">,</span> TextRank4Sentence<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># 导入常用工具包</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#关键词抽取</span><span class="token keyword">def</span> <span class="token function">keywords_extraction</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># allow_speech_tags : 词性列表, 用于过滤某些词性的词</span>    tr4w <span class="token operator">=</span> TextRank4Keyword<span class="token punctuation">(</span>allow_speech_tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'nr'</span><span class="token punctuation">,</span> <span class="token string">'nrfg'</span><span class="token punctuation">,</span> <span class="token string">'ns'</span><span class="token punctuation">,</span> <span class="token string">'nt'</span><span class="token punctuation">,</span> <span class="token string">'nz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>    <span class="token comment" spellcheck="true"># window: 窗口大小, int, 用来构造单词之间的边, 默认值为2</span>    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>    <span class="token comment" spellcheck="true"># vertex_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的>哪一个来构造pagerank对应的图中的节点</span>    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>    <span class="token comment" spellcheck="true"># edge_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪>一个来构造pagerank对应的图中的节点之间的边</span>    <span class="token comment" spellcheck="true">#默认值为'no_stop_words', 可选值为'no_filter', 'no_stop_words', 'all_filters', 边的构造要结合window参数</span>    <span class="token comment" spellcheck="true"># pagerank_config: pagerank算法参数配置, 阻尼系数为0.85</span>    tr4w<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> lower<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> vertex_source<span class="token operator">=</span><span class="token string">'all_filters'</span><span class="token punctuation">,</span>                 edge_source<span class="token operator">=</span><span class="token string">'no_stop_words'</span><span class="token punctuation">,</span> pagerank_config<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'alpha': 0.85, &amp;#125;)</span>    <span class="token comment" spellcheck="true"># num: 返回关键词数量</span>    <span class="token comment" spellcheck="true"># word_min_len: 词的最小长度, 默认值为1    </span>    keywords <span class="token operator">=</span> tr4w<span class="token punctuation">.</span>get_keywords<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> word_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#提取重要关键短句</span>    <span class="token comment" spellcheck="true"># keywords_num: 抽取的关键词数量</span>    <span class="token comment" spellcheck="true"># min_occur_num: 关键短语在文中的最少出现次数</span>    <span class="token comment" spellcheck="true">#keyphrases = tr4w.get_keyphrases(keywords_num=6, min_occur_num=1)</span>        <span class="token comment" spellcheck="true">#提取关键句</span>    <span class="token comment" spellcheck="true">#tr4s = TextRank4Sentence()</span>        <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>    <span class="token comment" spellcheck="true"># source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来                生成句子之间的相似度</span>    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>    <span class="token comment" spellcheck="true">#tr4s.analyze(text, lower=True, source='all_filters')</span>    <span class="token comment" spellcheck="true"># 获取最重要的num个长度大于等于sentence_min_len的句子用来生成摘要</span>    <span class="token comment" spellcheck="true">#keysentences = tr4s.get_key_sentences(num=3, sentence_min_len=6)</span>                <span class="token comment" spellcheck="true"># 返回关键词</span>    <span class="token keyword">return</span> keywords<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>    <span class="token comment" spellcheck="true">#关键词抽取</span>    keywords<span class="token operator">=</span>keywords_extraction<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span></code></pre><h5 id="打印：-1"><a href="#打印：-1" class="headerlink" title="打印："></a>打印：</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关键词抽取</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '小行星', 'weight': 0.05808441467341854&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '天文台', 'weight': 0.05721653775742513&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '命名', 'weight': 0.0485177005159723&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国', 'weight': 0.045716478124251815&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国科学院', 'weight': 0.037818937836996636&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '国家', 'weight': 0.03438059254484016&amp;#125;]</span><span class="token comment" spellcheck="true">#提取重要关键短句</span><span class="token punctuation">[</span><span class="token string">'小行星命名'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#提取关键句</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 4, 'sentence': '2018年9月25日，经国家天文台申报，国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，正式将该小行星命名为“周又元星”', 'weight': 0.2281040325096452&amp;#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 3, 'sentence': '”据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，获得国际永久编号第120730号', 'weight': 0.2106246105971721&amp;#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 1, 'sentence': '4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂', 'weight': 0.2020923401661083&amp;#125;]</span></code></pre><h4 id="3-2：基于jieba的TextRank算法"><a href="#3-2：基于jieba的TextRank算法" class="headerlink" title="3.2：基于jieba的TextRank算法"></a>3.2：基于jieba的TextRank算法</h4><ul><li>jieba工具不仅仅可以用来分词, 进行词性分析. 也可以用来完成TextRank.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token punctuation">.</span>analyse<span class="token keyword">def</span> <span class="token function">jieba_keywords_textrank</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    keywords <span class="token operator">=</span> jieba<span class="token punctuation">.</span>analyse<span class="token punctuation">.</span>textrank<span class="token punctuation">(</span>text<span class="token punctuation">,</span> topK<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> keywords<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>    <span class="token comment" spellcheck="true"># 基于jieba的textrank算法实现</span>    keywords <span class="token operator">=</span> jieba_keywords_textrank<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span></code></pre><ul><li><h6 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h6></li></ul><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'小行星'</span><span class="token punctuation">,</span> <span class="token string">'命名'</span><span class="token punctuation">,</span> <span class="token string">'国际'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'国家'</span><span class="token punctuation">,</span> <span class="token string">'天文学家'</span><span class="token punctuation">]</span></code></pre><h2 id="2：-TextRank实现baseline-0模型"><a href="#2：-TextRank实现baseline-0模型" class="headerlink" title="2： TextRank实现baseline-0模型"></a><strong>2： TextRank实现baseline-0模型</strong></h2><h4 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h4><ul><li><p>我们在第一章的1.2小节曾经讨论过原始数据存在的各种问题, 这些问题都需要在数据预处理的这个环节一一解决. 接下来按照如下步骤进行处理:</p><ul><li><p>第一步: 提取特定的文本.</p></li><li><p>第二步: 删除”脏”数据.</p></li><li><p>第三步: 删除特定的字符集合.</p></li><li><p>第四步: 删除特殊位置的特定字符.</p></li></ul></li></ul><h4 id="第一步-提取特定的文本"><a href="#第一步-提取特定的文本" class="headerlink" title="第一步: 提取特定的文本."></a>第一步: 提取特定的文本.</h4><p>面对原始语料, 并不是说我们必须要全部纳入模型中, 可以根据业务需求, 或者程序员的项目经验, 或许出于尝试的态度, 只选取一部分出来作为我们后续模型的输入数据.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><ul><li><h6 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果:"></a>输出结果:</h6></li></ul><pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>预处理后的第一条句子<span class="token punctuation">:</span>  技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：不需要。技师说：你这是更换的部件有问题。技师说：是非常重吗。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。</code></pre><ul><li><h5 id="数据进行分割形成小型数据"><a href="#数据进行分割形成小型数据" class="headerlink" title="数据进行分割形成小型数据"></a>数据进行分割形成小型数据</h5></li></ul><pre class=" language-python"><code class="language-python">nf <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">]</span>nf<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>dfa  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>dfa<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印结果</p><p><img src="/.io//%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE%5C1623239367253.png" alt="1623239367253"></p><h4 id="第二步-删除”脏”数据"><a href="#第二步-删除”脏”数据" class="headerlink" title="第二步: 删除”脏”数据."></a>第二步: 删除”脏”数据.</h4><ul><li>关于什么是”脏”数据是个千人千面的问题, 我们在第一章中也讨论过. 这一步也仅仅处理一个baseline的级别.</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><ul><li><h5 id="处理后的数据"><a href="#处理后的数据" class="headerlink" title="处理后的数据"></a>处理后的数据</h5></li></ul><pre><code>预处理前的第一条句子： 技师说：[语音]|车主说：新的都换了|车主说：助力泵，方向机|技师说：[语音]|车主说：换了方向机带的有|车主说：[图片]|技师说：[语音]|车主说：有助力就是重，这车要匹配吧|技师说：不需要|技师说：你这是更换的部件有问题|车主说：跑快了还好点，就倒车重的很。|技师说：是非常重吗|车主说：是的，累人|技师说：[语音]|车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。|技师说：[语音]|技师说：[语音]预处理后的第一条句子:  ：[]。：[]。：[]。：不需要。：你这是更换的部件有问题。：是非常重吗。：[]。：[]。：[]</code></pre><h4 id="第三步-删除特定的字符集合"><a href="#第三步-删除特定的字符集合" class="headerlink" title="第三步: 删除特定的字符集合."></a>第三步: 删除特定的字符集合.</h4><ul><li>1: 我们发现原始数据文件中有若干的”进口”, “海外”字样, 可认为是需要删除的特定字符.</li><li>2: 为了后续处理文本容易, 除了汉字还有数字, 英文字母, 特定的几个标点符号, 其他都删除.</li><li>3: 将标点符号的半角格式, 转变成全角格式.</li><li>4: 将问号, 感叹号, 转变成句号.</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><h5 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h5><pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>预处理后的第一条句子<span class="token punctuation">:</span>  。。。不需要。你这是更换的部件有问题。是非常重吗。。。。</code></pre><h3 id="2-1：TextRank模型代码实现：进行数数的机器学习模型"><a href="#2-1：TextRank模型代码实现：进行数数的机器学习模型" class="headerlink" title="2.1：TextRank模型代码实现：进行数数的机器学习模型"></a>2.1：TextRank模型代码实现：进行数数的机器学习模型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 初始化结果存放的列表</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 初始化textrank4zh类对象</span>    tr4s <span class="token operator">=</span> TextRank4Sentence<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        tr4s<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">,</span>lower <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>source <span class="token operator">=</span> <span class="token string">"all_filters"</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token string">""</span>        <span class="token comment" spellcheck="true"># 直接调用函数获取关键语句</span>        <span class="token comment" spellcheck="true"># num=3: 获取重要性最高的3个句子.</span>        <span class="token comment" spellcheck="true"># sentence_min_len=2: 句子的长度最小等于2.</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> tr4s<span class="token punctuation">.</span>get_key_sentences<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sentence_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> item<span class="token punctuation">.</span>sentence            result <span class="token operator">+=</span> <span class="token string">'。'</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 间隔100次打印结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result length: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存结果</span>    df<span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> results    <span class="token comment" spellcheck="true"># 提取ID, Report, 和预测结果这3列</span>    df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'QID'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">,</span> <span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 保存结果，这里自动生成一个结果名</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将空行置换为随时联系, 文件保存格式指定为utf-8</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'随时联系。'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将处理后的文件保存起来</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_final_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span></code></pre><p><strong>打印结果</strong></p><pre class=" language-python"><code class="language-python">i<span class="token operator">=</span> <span class="token number">0</span>i<span class="token operator">=</span> <span class="token number">500</span>i<span class="token operator">=</span> <span class="token number">1000</span>i<span class="token operator">=</span> <span class="token number">1500</span>i<span class="token operator">=</span> <span class="token number">2000</span>i<span class="token operator">=</span> <span class="token number">2500</span>i<span class="token operator">=</span> <span class="token number">3000</span>i<span class="token operator">=</span> <span class="token number">3500</span>i<span class="token operator">=</span> <span class="token number">4000</span>i<span class="token operator">=</span> <span class="token number">4500</span><span class="token number">100</span> 这个故障一般是转向系统的故障，需要重点检查一下车辆的转向灯泡，是否有不亮的。换了就可以解决问题。你好，车辆故障信息代码标识。<span class="token number">200</span> 主要是找到发动机和变速器连接部位的支架以及底盘上的各个胶套，是否存在松旷，造成硬性的接触共振。你好，这种情况主要考虑检查底盘是否存在共振区域。这个需要全面检查，如果之前没有这种问题，可以试驾其他同款车辆，确认是否都有这种问题。<span class="token number">300</span> 您好出厂的时候变速箱油是正常的，在刻度线以内，流出半升之后还是在刻度线以内，所以不用加，亲。加不进去了。顶进去的。<span class="token number">400</span> 那就要去检查一下皮带轮了。如果高于<span class="token number">1200</span>还有，就要检查一下皮带轮。这款发动机在<span class="token number">900</span><span class="token operator">-</span><span class="token number">1100</span>转时确实有一点嗡嗡声。<span class="token number">500</span> 这种单边积水的情况基本上不是泡水的原因，而是有地方密封不严，下雨漏水进去，这个一般是门边密封条老化，或者是防风玻璃漏水，需要关上车门，在车外冲水，在车内慢慢找漏水的地方。海绵积水可以用洗车的泡沫海绵放在上面挤压，能把大部的水吸出来，然后大太阳的时候打开车门得晒一个星期左右，差不多就会干了，主要还是得找出进水的原因，不然弄干水了，下次又进水了，时间长了，海绵会发霉发臭的。我知道是地板上积水，空调管堵塞也是会造成这种情况的，也是需要检查的。<span class="token number">600</span> 您好，需要更换加油管和碳罐，加油时气体排不出去导致跳枪。估计外面找不到改款配件。加油管是改款双管的，原车是单管的。<span class="token number">700</span> 找领导处理，更换新件并赔偿。送保养次数。投诉厂家，欺骗消费者。<span class="token number">800</span> 用T10170和百分表，转曲轴看百分表指针，指针转到顺时针的最顶端是一缸上止点。把曲轴转到一缸上止点，然后挂链条就可以了。直接量一缸的上止点不就可以了，不用管其他缸。</code></pre><h1 id="3：-seq2seq实现baseline-1模型：文本摘要"><a href="#3：-seq2seq实现baseline-1模型：文本摘要" class="headerlink" title="3： seq2seq实现baseline-1模型：文本摘要"></a>3： seq2seq实现baseline-1模型：文本摘要</h1><h3 id="seq2seq实现文本摘要的架构"><a href="#seq2seq实现文本摘要的架构" class="headerlink" title="seq2seq实现文本摘要的架构"></a>seq2seq实现文本摘要的架构</h3><ul><li>首选回顾一下在英译法任务中的经典seq2seq架构图</li></ul><p><img src="/.io//%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE%5C1623239860981.png" alt="1623239860981"></p><blockquote><ul><li>编码器端负责将输入数据进行编码, 得到中间语义张量.</li><li>解码器端负责一次次的循环解析中间语义张量, 得到最终的结果语句.</li><li>一般来说, 我们将注意力机制添加在解码器端.</li></ul></blockquote><h4 id="对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图"><a href="#对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图" class="headerlink" title="对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:"></a>对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:</h4><p><img src="/.io//%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE%5C1623241168701.png" alt="1623241168701"></p><blockquote><ul><li>编码器端负责进行原始文本的编码.</li><li>注意力层结合编码张量和解码器端的当前输入, 得到总体上的内容张量.</li><li>最后在注意力机制的指导下, 解码器端得到完整的单词分布, 解码出当前时间步的单词.</li></ul></blockquote><h3 id="seq2seq实现文本摘要的架构代码实践"><a href="#seq2seq实现文本摘要的架构代码实践" class="headerlink" title="seq2seq实现文本摘要的架构代码实践"></a>seq2seq实现文本摘要的架构代码实践</h3><h4 id="若干工具函数的实现"><a href="#若干工具函数的实现" class="headerlink" title="若干工具函数的实现"></a>若干工具函数的实现</h4><ul><li><p>在这一部分中我们要实现如下几个工具函数:</p><ul><li>第一步: 实现配置函数config.py</li><li>第二步: 实现多核并行处理的函数multi_proc_utils.py</li><li>第三步: 实现参数配置函数params_utils.py</li><li>第四步: 实现保存字典的函数word2vec_utils.py</li><li>第五步: 实现数据加载的函数data_loader.py</li></ul></li><li><h4 id="第一步-实现配置函数config-py"><a href="#第一步-实现配置函数config-py" class="headerlink" title="第一步: 实现配置函数config.py"></a>第一步: 实现配置函数config.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/config.py</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入os工具包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># 设置项目代码库的root路径, 为后续所有的包导入提供便利</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置原始数据文件的路径, 通过以项目root路径为基础, 逐级添加到文件路径</span>train_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 停用词路径和jieba分词用户自定义字典路径</span>stop_words_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'stopwords.txt'</span><span class="token punctuation">)</span>user_dict_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'user_dict.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预处理+切分后的训练测试数据路径</span>train_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_seg_data.csv'</span><span class="token punctuation">)</span>test_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_seg_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将训练集和测试机数据混合后的文件路径</span>merged_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'merged_seg_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 样本与标签分离，并经过pad处理后的数据路径</span>train_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X_pad_data.csv'</span><span class="token punctuation">)</span>train_y_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y_pad_data.csv'</span><span class="token punctuation">)</span>test_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X_pad_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy转换为数字后最终使用的的数据路径</span>train_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X.npy'</span><span class="token punctuation">)</span>train_y_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y.npy'</span><span class="token punctuation">)</span>test_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X.npy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 正向词典和反向词典路径</span>vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'vocab.txt'</span><span class="token punctuation">)</span>reverse_vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'reverse_vocab.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试集结果保存路径</span>result_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">)</span></code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">/</span>text_summary<span class="token operator">/</span>seq2seq</code></pre><h4 id="第二步-实现多核并行处理的函数multi-proc-utils-py"><a href="#第二步-实现多核并行处理的函数multi-proc-utils-py" class="headerlink" title="第二步: 实现多核并行处理的函数multi_proc_utils.py"></a>第二步: 实现多核并行处理的函数multi_proc_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/multi_proc_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count<span class="token punctuation">,</span> Pool<span class="token comment" spellcheck="true"># 计算当前服务器CPU的数量</span>cores <span class="token operator">=</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将分块个数设置为CPU的数量</span>partitions <span class="token operator">=</span> cores<span class="token keyword">print</span><span class="token punctuation">(</span>cores<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parallelize</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 数据切分</span>    data_split <span class="token operator">=</span> np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> partitions<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始化线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据分发, 处理, 再合并</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> data_split<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭线程池</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 执行完close后不会有新的进程加入到pool, join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回处理后的数据</span>    <span class="token keyword">return</span> data</code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前服务器是一个8核CPU, 32GB内存的机器</span><span class="token number">8</span></code></pre><h4 id="第三步-实现参数配置函数params-utils-py"><a href="#第三步-实现参数配置函数params-utils-py" class="headerlink" title="第三步: 实现参数配置函数params_utils.py"></a>第三步: 实现参数配置函数params_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/params_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">def</span> <span class="token function">get_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码器和解码器的最大序列长度</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_enc_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_dec_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个训练批次的大小</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--batch_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Batch size"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># seq2seq训练轮数</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--seq2seq_train_epochs"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Seq2seq model training epochs"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 词嵌入大小</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--embed_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Words embeddings dimension"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码器、解码器以及attention的隐含层单元数</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--enc_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--dec_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--attn_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Used to compute the attention weights"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 学习率</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--learning_rate"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Learning rate"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>float<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># param是一个字典类型的变量，键为参数名，值为参数值</span>    params <span class="token operator">=</span> vars<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> params<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> get_params<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'max_enc_len': 300, 'max_dec_len': 50, 'batch_size': 64, 'seq2seq_train_epochs': </span></code></pre><h4 id="第四步-实现保存字典的函数word2vec-utils-py"><a href="#第四步-实现保存字典的函数word2vec-utils-py" class="headerlink" title="第四步: 实现保存字典的函数word2vec_utils.py"></a>第四步: 实现保存字典的函数word2vec_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/word2vec_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models<span class="token punctuation">.</span>word2vec <span class="token keyword">import</span> Word2Vec<span class="token keyword">def</span> <span class="token function">load_embedding_matrix_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从word2vec模型中获取词向量矩阵</span>    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># wv_model.wv.vectors包含词向量矩阵</span>    embedding_matrix <span class="token operator">=</span> wv_model<span class="token punctuation">.</span>wv<span class="token punctuation">.</span>vectors    <span class="token keyword">return</span> embedding_matrix<span class="token keyword">def</span> <span class="token function">get_vocab_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从word2vec模型中获取正向和反向词典</span>    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;index: word for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;word: index for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>    <span class="token keyword">return</span> word_to_id<span class="token punctuation">,</span> id_to_word<span class="token keyword">def</span> <span class="token function">save_vocab_as_txt</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 保存字典</span>    <span class="token comment" spellcheck="true"># filename: 目标txt文件路径</span>    <span class="token comment" spellcheck="true"># word_to_id: 要保存的字典</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125;\t&amp;#123;&amp;#125;\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1：文本摘要项目理论&quot;&gt;&lt;a href=&quot;#1：文本摘要项目理论&quot; class=&quot;headerlink&quot; title=&quot;1：文本摘要项目理论&quot;&gt;&lt;/a&gt;&lt;strong&gt;1：文本摘要项目理论&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaoyvlongoing.github.io/2021/06/10/1%EF%BC%9A%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE%E7%90%86%E8%AE%BA/"/>
    <id>https://xiaoyvlongoing.github.io/2021/06/10/1%EF%BC%9A%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE%E7%90%86%E8%AE%BA/</id>
    <published>2021-06-09T16:48:30.753Z</published>
    <updated>2021-06-09T16:51:57.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：文本摘要项目理论"><a href="#1：文本摘要项目理论" class="headerlink" title="1：文本摘要项目理论"></a><strong>1：文本摘要项目理论</strong></h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>文本摘要思想</strong>：就是一个长文本把重要的摘要出来</p><h5 id="1：NLP角度来看文本摘要任务，主流的概括两大方法："><a href="#1：NLP角度来看文本摘要任务，主流的概括两大方法：" class="headerlink" title="1：NLP角度来看文本摘要任务，主流的概括两大方法："></a>1：NLP角度来看文本摘要任务，主流的概括两大方法：</h5><ul><li>抽取式摘要：Extraction-based（从文本中抽取）：直接从原文中选择若干条重要的句子, 并对它们进行排序和重组, 以形成摘要的方法.<ul><li><strong>无监督抽取</strong>：不需要平行语料, 节省了人工标记的成本. 大体上有如下几种:<ul><li>Lead</li><li>Centroid</li><li>ClusterCMRW</li><li>TextRank：最经典</li></ul></li><li><strong>有监督抽取：</strong>将文本摘要抽象成二分类问题, 通过神经网络来学习句子及其标签之间的对应关系. 需要平行语料, 需要人工标记的成本. 常见方法有如下几种<ul><li>R2N2</li><li>NeuralSum</li><li>SummaRuNNer</li><li><strong>BertSum</strong>：原本用来计算网页之间的关联性，后来被应用在句子上，句子之间反复传播，选出最关键的语句进行排序。因为文章总有中心句，而textrank就试图找出这个中心句。</li></ul></li><li>取式<strong>缺点</strong>：主要考虑单词词频，没有过多的语义信息，所以无法建立段落中的完整语义信息</li></ul></li><li><strong>生成式摘要: Abstraction-based：</strong>需要通过<strong>转述、同义替换、句子缩写</strong>等生成。<ul><li>生成式神经网络模型的基本结构主要由<strong>编码器（encoder）和解码器（decoder）</strong>组成，编码和解码都由神经网络实现。<ul><li><strong>编码器</strong>负责将输入的原文本编码成一个<strong>向量C（context），</strong></li><li><strong>而解码器</strong>负责从这个<strong>向量C</strong>提取<strong>重要信息、加工剪辑，生成文本摘要。</strong></li><li><strong>Sequence-to-Sequence</strong>（以下简称Seq2Seq），被广泛应用于存在输入序列和输出序列的场景，比如机器翻译（一种语言序列到另一种语言序列）、image captioning（图片像素序列到语言序列）、对话机器人（如问题到回答）等</li></ul></li></ul></li></ul><h4 id="2：数据的处理："><a href="#2：数据的处理：" class="headerlink" title="2：数据的处理："></a>2：数据的处理：</h4><p>一般来说, 在任何项目中, 面对原始数据都要进行接下来的几点工作:</p><ul><li>删除空值.</li><li>删除”脏”数据.<ul><li>在这个数据集中的脏数据为：<ul><li>有很多的技师说和，车主说</li><li>文本中有很多的图片字样和语音字样</li><li>有很多进口，车型，还有一些符号</li></ul></li></ul></li><li>删除特定字符的集合.</li><li>分词.</li><li>完成字符到id的映射.</li><li>完成padding, cutting的工作.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdtrain_path <span class="token operator">=</span> <span class="token string">'train.csv'</span>test_path <span class="token operator">=</span> <span class="token string">'test.csv'</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********************'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">82943</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">82942</span>Data columns <span class="token punctuation">(</span>total <span class="token number">6</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">82941</span> non<span class="token operator">-</span>null  object <span class="token number">5</span>   Report    <span class="token number">82873</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">3.8</span><span class="token operator">+</span> MB<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">20000</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">19999</span>Data columns <span class="token punctuation">(</span>total <span class="token number">5</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">20000</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">781.4</span><span class="token operator">+</span> KB</code></pre><h4 id="3：TextRank：算法理论基础"><a href="#3：TextRank：算法理论基础" class="headerlink" title="3：TextRank：算法理论基础"></a>3：TextRank：算法理论基础</h4><p>对比于衡量网页重要性的PageRank算法, TextRank算法用于衡量哪些单词是关键词, 类比之下的算法思想也就很好理解了:</p><ul><li>如果一个单词出现在很多单词的后面, 就是它和很多单词有关联, 那么说明这个单词比较重要.</li><li>如果一个TextRank值很高的单词后面跟着另一个单词, 那么后面这个单词的TextRank值也会相应的被提高.</li></ul><h4 id="3-1：TextRank算法代码实践"><a href="#3-1：TextRank算法代码实践" class="headerlink" title="3.1：TextRank算法代码实践"></a>3.1：TextRank算法代码实践</h4><ul><li>在本小节中, 我们仅以示例代码跑通几段小程序, 让同学们掌握如何具体在代码层面用TextRank.<ul><li>关键词抽取(keyword extraction)：是指从文本中确定一些能够描述文档含义的关键术语的过程<ul><li>对关键词抽取而言, 用于构建顶点集的文本单元可以使句子中的一个或多个字. 根据这些字之间的关系构建边.</li><li>根据任务的需要, 可以使用语法过滤器(syntactic filters)对顶点集进行优化. 语法过滤器的主要作用是将某一类或者某几类词性的字过滤出来作为顶点集.</li></ul></li><li>关键短语抽取(keyphrase extraction)</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1：文本摘要项目理论&quot;&gt;&lt;a href=&quot;#1：文本摘要项目理论&quot; class=&quot;headerlink&quot; title=&quot;1：文本摘要项目理论&quot;&gt;&lt;/a&gt;&lt;strong&gt;1：文本摘要项目理论&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaoyvlongoing.github.io/2021/05/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E6%97%A0%E5%BA%8F%E6%89%A7%E8%A1%8C/"/>
    <id>https://xiaoyvlongoing.github.io/2021/05/23/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E6%97%A0%E5%BA%8F%E6%89%A7%E8%A1%8C/</id>
    <published>2021-05-23T15:23:35.157Z</published>
    <updated>2021-05-22T16:59:18.113Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>函数名</th><th>使用的方法</th></tr></thead><tbody><tr><td>导入的函数包import multiprocessing</td><td>创建的进程导入的包名</td></tr><tr><td>multiprocessing.Process([group [, target [, name [, args：传入指定形参 [, kwargs：以字典的类型进行传参]]]]])</td><td>导入进程函数说明</td></tr><tr><td>target=方法名</td><td>执行的目标任务名（函数名，线程名）</td></tr><tr><td>name=进程的名字</td><td>进程名字</td></tr><tr><td>对象名=multiprocessing.Process(target=方法名)</td><td>启动进程的方法</td></tr><tr><td>子进程对象.start()</td><td>对象.start（）：启动子进程实例（创建子进程）</td></tr><tr><td>os.getpid</td><td>print(os.getpid)查看子进程编号</td></tr><tr><td>os.getppid</td><td>print(os.getppid)查看父进程编号</td></tr><tr><td>multiprocessing.current_process().name进程名字</td><td>查看当前进程编号</td></tr><tr><td>子进程对象.join()</td><td>加入jojn后主线程会等待子线程执行后再结束主线程，让线程可以形成串行，形成有顺序的，线性和进程的也可进行串行，结束前一个，进行下一个执行</td></tr><tr><td>子进程对象.terminate()</td><td>不管任务是否完成，立即终止子进程</td></tr><tr><td>子进程对象.daemom = True</td><td>不管任务是否完成，立即终止子进程</td></tr><tr><td>进程在ubuntu中 ps -aux|grep 要查找的线程的名字</td><td>过滤需要的进程来查看ID</td></tr><tr><td>os.kill(os.getpid(),9)  进程的id</td><td>强制杀死进程</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="多线程：无序执行"><a href="#多线程：无序执行" class="headerlink" title="多线程：无序执行"></a>多线程：无序执行</h2><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>import threading</td><td>创建线程的包</td></tr><tr><td>方法名= threading.Thread(target=方法名)</td><td>启动进程的方法</td></tr><tr><td>对象名 = threading.Thread(target=方法名,daemon= True)</td><td>主线程结束，会让子线程结束(方法1）</td></tr><tr><td>对象名 .setDaemon(True)：在启动线程之前</td><td>主线程结束，会让子线程结束(方法2）</td></tr><tr><td>current = threading.current_thread().name</td><td>获取线程的名称</td></tr><tr><td>多线程不能强制杀死，要把线程进行循环停止加上一个          变量 =</td><td></td></tr><tr><td>lock = threading.Lock()</td><td>创建互斥锁</td></tr><tr><td>lock.acquire()</td><td>创建锁</td></tr><tr><td>lock.release</td><td>解锁</td></tr></tbody></table><p>[TOC]</p><p>1：进程是操作系统资源分配的最小单位</p><p>2：进程之间执行也是无序的，它是由操作系统调度决定的，操作系统调度哪个进程，哪个进程就先执行，没有调度的进程不能执行</p><p>3：进程不共享全局变量</p><p>二：线程和进程有什么区别：</p><p>1：进程是操作系统资源分配的最小单位，线程是cpu调度的最小单位</p><p>2：线程依附于进程，没有进程就没有线程，一个进程默认创造一个主线程，一个进程可以创造多个线程</p><p>3：进程不共享全局变量，而同一个进程的线程可以共享进程的全局变量</p><p>4：进程开销比较大，可以利用多核（并行），线程开销比较小不能利用多核（并发）</p><p>三：什么是主进程：</p><p>主进程是：程序执行的入口，一个进程里默认带一个线程，主进程可以创建多个子线程，</p><p>四：写出创造进程的步骤：</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：导入进程包：​        <span class="token keyword">import</span>  multiprocessing<span class="token number">2</span>：创建进程函数（方法）​        <span class="token keyword">def</span> num（）：​                <span class="token keyword">pass</span><span class="token number">3</span>：创建进程，调用进程函数（方法）​        变量 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target <span class="token operator">=</span> num<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">:</span>启动进程        变量<span class="token punctuation">.</span>start（）</code></pre><p>五：怎么获得进程的pid</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：improre  os <span class="token number">2</span>：os<span class="token punctuation">.</span>getppid <span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">)</span>查看父进程id编号<span class="token number">3</span>：os<span class="token punctuation">.</span>getpid  ：   <span class="token keyword">print</span>（os<span class="token punctuation">.</span>getpid）查看当前进程id编号<span class="token number">4</span>：multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name进程（线程）名字   ：查看当前进程（线程）的id编号    </code></pre><p>六：怎么给进程函数传递参数：</p><p>1：通过元组进程传递参数</p><pre><code>multiprocessing.Process(target = coding , args = （参数，）)传入的是一个元组需要加上，传入的参数要保持一致</code></pre><p>2：通过字典进程传参：</p><pre><code>multiprocessing.Process(target = coding , kwargs = &#123;传递的进程变量名：传入的参数&#125;)因为用的是字典的要与进程参数对住</code></pre><h2 id="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"><a href="#七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行" class="headerlink" title="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"></a>七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行</h2><p>1：把join加入到子进程中，子进程变量.join，形成串联运行完子进程在运行主线线程</p><p>八：Process创建的实例对象的常用的方法有什么？</p><p>1：start（）：启动子进程实例（创建子进程）</p><p>2：join（）：等待子进程执行结束，形成串联</p><p>3：terminate（）：不管任务是否完成，立即终止子进程</p><p>八《一》：    Process常用的属性：</p><p>1：name：当前进程的别名，默认为Process - n ，n为从1开始递增的整数</p><p>2：pid：当前进程的id</p><p>九：编写一个程序，实现创建一个子进程，子进程每一秒打印一次：这是子进程，循环的第n次，打印 的次数是由主进程传递给子进程。</p><pre><code>1：#利用args和kwargs传参import multiprocessingimport timedef ness(num):    for i in range(num):        time.sleep(1)        print(&quot;这个是一个线程&quot;)if __name__ == &#39;__main__&#39;:    # mues = multiprocessing.Process(target= ness,args=(6,))    mues = multiprocessing.Process(target=ness, kwargs=&#123;&quot;num&quot;:6&#125;)    mues.start()2：#利用类方法实现线程import multiprocessingimport timeclass nees():    def __init__(self,name):        super(nees, self).__init__()        self.name = name    def num(self):        for i in range(self.name):            time.sleep(1)            print(&quot;这个是一个子进程&quot;)if __name__ == &#39;__main__&#39;:    num_process = multiprocessing.Process(target=nees)    A=nees(3)    A.num()</code></pre><p>：线程资源竞争问题：</p><p>1：100万次加法，线程1和线程2谁先执行完</p><p>2：线程1计算的结果一定比线程2小吗？</p><p>3：某个线程计算的结果有没有可能小于100万？为什么：</p><p>​            1：不一定谁先执行完，因为线程是由cpu进行调度的，没有执行顺序那个先执行完都是不一定的</p><p>​            2：不一定，因为没办法知道那个线程能先执行完，所有没有办法知道执行的时间，没有办法知道执行的大小</p><p>​            3：有的，因为多线程共享全局变量，再赋予全局变量的时候，线程一和线程二计算的先后没有办法确定下来，当线程一计算的多时，线程二计算的少时，线程一又把线程二中的值共享过来这时就不安之前的顺序的，会小于100万</p>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;使用的方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;导入的函数包import multiprocessing&lt;/td&gt;
&lt;td&gt;创建的进程导入的包名&lt;/td&gt;
&lt;/tr&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://xiaoyvlongoing.github.io/2021/05/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BTC/"/>
    <id>https://xiaoyvlongoing.github.io/2021/05/23/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BTC/</id>
    <published>2021-05-23T15:23:35.157Z</published>
    <updated>2021-06-08T07:02:13.631Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="网络编程TC"><a href="#网络编程TC" class="headerlink" title="网络编程TC"></a>网络编程TC</h2><h2 id="网络编程TC-1"><a href="#网络编程TC-1" class="headerlink" title="网络编程TC"></a>网络编程TC</h2><p>[TOC]</p><h2 id="P客户端"><a href="#P客户端" class="headerlink" title="P客户端"></a>P客户端</h2><table><thead><tr><th align="center">变量名称</th><th>变量使用方法</th></tr></thead><tbody><tr><td align="center">ifconfig</td><td>查看网络的ip</td></tr><tr><td align="center">ping</td><td>查看网络是否连通</td></tr><tr><td align="center">socket</td><td>网络编程包</td></tr><tr><td align="center">socket.AF_INET</td><td>ip地址</td></tr><tr><td align="center">socket.SOCK_STREAM</td><td>端口</td></tr><tr><td align="center">tcp_clien_socket.connect</td><td>客户端：传入ip和端口，用于建立与指定指定socket的连接</td></tr><tr><td align="center">tcp_clien_socket.send（字符串.encode(encoding=”utf-8”)）</td><td>send（）：把数据组转换成二进制，encode：写入编辑的字符串和要转成数据组的函数：encode（encoding = “”）</td></tr><tr><td align="center">字符串.encode(encoding=”utf-8”)）</td><td>encode：把字符串转换成数据组</td></tr><tr><td align="center">tcp_clien_socket.recv(数值)</td><td>套接字最大传入数据数值，接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞</td></tr><tr><td align="center">.decode()</td><td>对服务端发来的数据进行解码</td></tr><tr><td align="center">conn_socket.close()</td><td>关闭套接字</td></tr></tbody></table><h2 id="网络编程TCP服务端"><a href="#网络编程TCP服务端" class="headerlink" title="网络编程TCP服务端"></a>网络编程TCP服务端</h2><table><thead><tr><th>变量名称</th><th>变量使用方法</th></tr></thead><tbody><tr><td>socket</td><td>网络编程包</td></tr><tr><td>bind</td><td>服务端：创建ip和端口</td></tr><tr><td>tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)</td><td>端口的复用</td></tr><tr><td>tcp_sever_socket.listen（数值）</td><td>设置端口监听功能监听多少个数值上限</td></tr><tr><td>tcp_server_socket.accept()</td><td><code>accept()</code>接受一个客户端的连接请求，接收的数据用于recv，并返回一个新的套接字，用于了send分开数据和ip不同于以上<code>socket()</code>返回的用于监听和接受客户端的连接请求的套接字；，</td></tr></tbody></table><h2 id="扩展函数："><a href="#扩展函数：" class="headerlink" title="扩展函数："></a>扩展函数：</h2><table><thead><tr><th>函数</th><th>函数表达意思</th></tr></thead><tbody><tr><td>client_socket.recv(1024).<strong>decode()</strong></td><td>decode()：将查询的值翻译成其他的值，以其他形式表现出来</td></tr><tr><td><strong>os.listdir</strong></td><td>方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td><strong>os.path.getsize()</strong></td><td><strong>获得文件的大小（字节）</strong></td></tr><tr><td>f.read（）</td><td>从文件指针所在的位置开始读</td></tr><tr><td>isdigit</td><td></td></tr></tbody></table><pre><code></code></pre><h2 id="静态服务器："><a href="#静态服务器：" class="headerlink" title="静态服务器："></a>静态服务器：</h2><table><thead><tr><th>函数</th><th>函数定义</th></tr></thead><tbody><tr><td>.open（“地址”，“要读或写”）</td><td>用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。</td></tr><tr><td>.read()</td><td>读取文件信息内容</td></tr><tr><td>英文：response</td><td>翻译：相应</td></tr><tr><td>英文：Server</td><td>翻译：服务器</td></tr><tr><td>localhost:8080</td><td>浏览器查看</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="使用多线程多客户端连接服务器，多发送信息"><a href="#使用多线程多客户端连接服务器，多发送信息" class="headerlink" title="使用多线程多客户端连接服务器，多发送信息"></a>使用多线程多客户端连接服务器，多发送信息</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">duoe_sock</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        recv_data <span class="token operator">=</span> code_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        code_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"niaho1"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"quit"</span> <span class="token operator">or</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span>    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_evelt_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        code_sock<span class="token punctuation">,</span>ip_lies <span class="token operator">=</span> tcp_evelt_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip:"</span><span class="token punctuation">,</span>ip_lies<span class="token punctuation">)</span>        smeus_pskd <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>duoe_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smeus_pskd<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器返回固态页面："><a href="#静态服务器返回固态页面：" class="headerlink" title="静态服务器返回固态页面："></a>静态服务器返回固态页面：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_serer_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        clien_sock<span class="token punctuation">,</span>client_abbr <span class="token operator">=</span> tcp_serer_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        clien_request_data <span class="token operator">=</span> clien_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10230</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>clien_request_data<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./nksld.html"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#打开文件夹有会报错，异常处理</span>            <span class="token comment" spellcheck="true"># f = open("当前文件夹","rb")</span>            file_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 应答行</span>        response_line <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>        <span class="token comment" spellcheck="true"># 头</span>        response_header <span class="token operator">=</span> <span class="token string">"Server:pwd\r\n"</span>        <span class="token comment" spellcheck="true"># 体</span>        response_body <span class="token operator">=</span> file_data<span class="token comment" spellcheck="true">#界面的数据</span>        <span class="token comment" spellcheck="true">#应答数据</span>        response_data<span class="token operator">=</span> <span class="token punctuation">(</span>response_line <span class="token operator">+</span> response_header <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> response_body        clien_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response_data<span class="token punctuation">)</span>        clien_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器返回指定页面"><a href="#静态服务器返回指定页面" class="headerlink" title="静态服务器返回指定页面"></a>静态服务器返回指定页面</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> f_data                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器多线程任务"><a href="#静态服务器多线程任务" class="headerlink" title="静态服务器多线程任务"></a>静态服务器多线程任务</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>            tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>            tecponse_toes <span class="token operator">=</span> f_data            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>        nues_sock <span class="token operator">=</span>  threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>nuws_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器对象调用"><a href="#静态服务器对象调用" class="headerlink" title="静态服务器对象调用"></a>静态服务器对象调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">class</span> <span class="token class-name">Pues_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> f_data                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">nuse_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">,</span> ip_sock <span class="token operator">=</span> self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> ip_sock<span class="token punctuation">)</span>            nues_sock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>nuws_sock<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nues <span class="token operator">=</span> Pues_sock<span class="token punctuation">(</span><span class="token punctuation">)</span>    nues<span class="token punctuation">.</span>nuse_sock<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器变换端口号"><a href="#静态服务器变换端口号" class="headerlink" title="静态服务器变换端口号"></a>静态服务器变换端口号</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取执行python程序的终端命令行参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 判断参数的类型，设置端口号必须是整型</span>    <span class="token keyword">if</span> <span class="token operator">not</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建服务器对象</span>    <span class="token comment" spellcheck="true"># 给Web服务器类的初始化方法添加一个端口号参数，用于绑定端口号</span>    my_web_server <span class="token operator">=</span> HttpWebServer<span class="token punctuation">(</span>port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动服务器</span>    my_web_server<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="TCP协议是什么？提示：TCP定义及特点"><a href="#TCP协议是什么？提示：TCP定义及特点" class="headerlink" title="TCP协议是什么？提示：TCP定义及特点"></a>TCP协议是什么？提示：TCP定义及特点</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>传输控制协议，是一种面向连接，可靠的，基于字节流的传输层通讯协议</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>面向连接：通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开连接，以释放系统资源</p><p>可靠的通信方式</p><p>基于字节流</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="2-TCP特点是什么？"><a href="#2-TCP特点是什么？" class="headerlink" title="2. TCP特点是什么？"></a>2. TCP特点是什么？</h2><p>提示：TCP特点及解释说明</p><p>基于字节流的</p><p>面向连接</p><p>可靠通信</p><p>在网络状况不佳的时候尽量降低系统由于重传带来的宽开销</p><p>通信连接维护是面向通信的两个端点，而不考虑中间网段和节点</p><h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><h2 id="3-在TCP客户端使用connect的作用是什么？"><a href="#3-在TCP客户端使用connect的作用是什么？" class="headerlink" title="3. 在TCP客户端使用connect的作用是什么？"></a>3. 在TCP客户端使用connect的作用是什么？</h2><p>提示：connect的作用及connect()函数的参数形式</p><p>connenct：用于建立与指定指定socket的连接，对于流类套接口（SOCK—STREAMl类型），利用名字来与一个远程主机建立连接，一但套用接口调用成功，他就能收发数据，对于数据报类套接口（SOCK—STREAMl类型），则设置成一个缺省的目的并用它来进行后序的send与recv调用</p><h3 id="4-在TCP服务器中listen的作用是什么？"><a href="#4-在TCP服务器中listen的作用是什么？" class="headerlink" title="4. 在TCP服务器中listen的作用是什么？"></a>4. 在TCP服务器中listen的作用是什么？</h3><p>提示：listen()函数的作用及参数含义、</p><p>在网络中服务端是被动的，客户是主动的，被动要用listen来监听，listen（）作用是将socket（）得到一个sockfd被动监听的套接字，来通知内核来完成连接</p><h2 id="-2"><a href="#-2" class="headerlink" title></a></h2><h2 id="5-简述tcp客户端创建的流程。"><a href="#5-简述tcp客户端创建的流程。" class="headerlink" title="5. 简述tcp客户端创建的流程。"></a>5. 简述tcp客户端创建的流程。</h2><p>提示：参考课件代码说出客户端创建步骤</p><p>创建一个套接字协议用：connenct赖建立连接</p><p>导入IP地址可端口</p><p>创建发送的数据用send（数据encode），先把字符串转换成数据组，在把数据组装换成二进制</p><p>设置最大字节数据：recv（）</p><p>接收客户端发来的数据用decode来解码</p><p>关闭套接字用close</p><h2 id="-3"><a href="#-3" class="headerlink" title></a></h2><h2 id="6-recv函数的参数表示什么含义？"><a href="#6-recv函数的参数表示什么含义？" class="headerlink" title="6. recv函数的参数表示什么含义？"></a>6. recv函数的参数表示什么含义？</h2><p>提示：recv()函数的作用及参数含义</p><p>接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞，直到有数据时进行读取，远程关闭并读取所有数据之后会返回空字符串</p><h2 id="7-简述TCP服务器创建的流程、"><a href="#7-简述TCP服务器创建的流程、" class="headerlink" title="7. 简述TCP服务器创建的流程、"></a>7. 简述TCP服务器创建的流程、</h2><p>提示：参考课件代码，说出服务器创建流程</p><p>1：创建套接字，进行网络协议</p><p>2：进行端口复用</p><p>3：进行bind进行套接字协议</p><p>4：进行与服务端监听连接的最大数值，listen</p><p>5：accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p><p>6：进行设置recv进行数据的阻塞，</p><p>7：给客户端发送一个数据用send（encode）来转成二进制</p><p>8：接收客户端发来的数据，用decode来进行解码</p><h2 id="8-accept的返回值分别代表的什么？"><a href="#8-accept的返回值分别代表的什么？" class="headerlink" title="8. accept的返回值分别代表的什么？"></a>8. accept的返回值分别代表的什么？</h2><p>提示：accept()函数的作用，及返回值的形式和返回值的含义</p><p>accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p><h2 id="9-完成TCP客户端的编写。"><a href="#9-完成TCP客户端的编写。" class="headerlink" title="9. 完成TCP客户端的编写。"></a>9. 完成TCP客户端的编写。</h2><p>服务器的ip和端口号需手动输入</p><p>要发送的信息需要手动输入</p><p>接收服务器返回的数据，并打印。</p><p>请在下方的注释下补充代码：</p><p>​       # 导入socket模块</p><pre><code>import socketif __name__ == &#39;__main__&#39;:    tcp_codne_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)    tcp_codne_socket.connect((&quot;&quot;,8080))    tcp_codne_socket.send(&quot;&quot;.encode())    cone_recv = tcp_codne_socket.recv(1024)    print(cone_recv.decode())    tcp_codne_socket.close()</code></pre><h2 id="-4"><a href="#-4" class="headerlink" title></a></h2><h2 id="10-完成TCP服务的的编写"><a href="#10-完成TCP服务的的编写" class="headerlink" title="10. 完成TCP服务的的编写"></a>10. 完成TCP服务的的编写</h2><p>请在下方注释下补充代码：</p><p>  # 导入socket模块</p><pre><code>import socketif __name__ == &#39;__main__&#39;:    tcp_evens_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)    tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    tcp_evens_socket.bind((&quot;&quot;,8080))    tcp_evens_socket.listen(138)    coet_socket,ip_mes = tcp_evens_socket.accept()    recv_data = coet_socket.recv(1025)    print(recv_data.decode())    coet_socket.send(&quot;&quot;.encode())    coet_socket.close()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;h2 id=&quot;网络编程TC&quot;&gt;&lt;a href=&quot;#网络编程TC&quot; class=&quot;headerlink&quot; title=&quot;网络编程TC&quot;&gt;&lt;/a&gt;网络编程TC&lt;/h2&gt;&lt;h2 id=&quot;网络编程TC-1&quot;&gt;&lt;a href=&quot;#网络编程TC-1&quot; class=&quot;headerl</summary>
      
    
    
    
    
  </entry>
  
</feed>
