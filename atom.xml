<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小龙播客</title>
  
  <subtitle>小龙播客</subtitle>
  <link href="https://xiaoyvlongoing.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaoyvlongoing.github.io/"/>
  <updated>2021-06-13T11:17:32.613Z</updated>
  <id>https://xiaoyvlongoing.github.io/</id>
  
  <author>
    <name>小龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人脸识别：第二章</title>
    <link href="https://xiaoyvlongoing.github.io/2020/06/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%EF%BC%8C%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%9E%84%E5%BB%BA/"/>
    <id>https://xiaoyvlongoing.github.io/2020/06/10/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%EF%BC%8C%E6%A8%A1%E5%9E%8B%E8%BF%9B%E8%A1%8C%E6%9E%84%E5%BB%BA/</id>
    <published>2020-06-10T06:47:40.000Z</published>
    <updated>2021-06-13T11:17:32.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第二章：人脸识别，模型进行构建"><a href="#第二章：人脸识别，模型进行构建" class="headerlink" title="第二章：人脸识别，模型进行构建"></a>第二章：人脸识别，模型进行构建</h2><h4 id="使用YOLO3进行模型的构建处理"><a href="#使用YOLO3进行模型的构建处理" class="headerlink" title="使用YOLO3进行模型的构建处理"></a>使用YOLO3进行模型的构建处理</h4><h4 id="1：导入模块包"><a href="#1：导入模块包" class="headerlink" title="1：导入模块包"></a>1：导入模块包</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn</code></pre><h4 id="2：构建CBL模块"><a href="#2：构建CBL模块" class="headerlink" title="2：构建CBL模块"></a>2：构建CBL模块</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 构建CBL模块</span><span class="token keyword">class</span> <span class="token class-name">Conv2dBatchLeaky</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> leaky_slope<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param in_channels: 输入        :param out_channels: 输出        :param kernel_size:核大小        :param stride:步长        :param leaky_slope:        """</span>        <span class="token comment" spellcheck="true">#</span>        super<span class="token punctuation">(</span>Conv2dBatchLeaky<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>in_channels <span class="token operator">=</span> in_channels        self<span class="token punctuation">.</span>out_channels <span class="token operator">=</span> out_channels        self<span class="token punctuation">.</span>kernel_size <span class="token operator">=</span> kernel_size        self<span class="token punctuation">.</span>stride <span class="token operator">=</span> stride        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>kernel_size<span class="token punctuation">,</span> <span class="token punctuation">(</span>list<span class="token punctuation">,</span> tuple<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>ii<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">for</span> ii <span class="token keyword">in</span> kernel_size<span class="token punctuation">]</span>            <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------->>>> Conv2dBatchLeaky isinstance'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>padding <span class="token operator">=</span> int<span class="token punctuation">(</span>kernel_size<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>leaky_slope <span class="token operator">=</span> leaky_slope        <span class="token comment" spellcheck="true"># Layer</span>        <span class="token comment" spellcheck="true"># LeakyReLU : y = max(0, x) + leaky_slope*min(0,x)</span>        self<span class="token punctuation">.</span>layers <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> self<span class="token punctuation">.</span>out_channels<span class="token punctuation">,</span> self<span class="token punctuation">.</span>kernel_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>stride<span class="token punctuation">,</span> self<span class="token punctuation">.</span>padding<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span>self<span class="token punctuation">.</span>leaky_slope<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre><h4 id="3：构建Resunit（残差）模块"><a href="#3：构建Resunit（残差）模块" class="headerlink" title="3：构建Resunit（残差）模块"></a>3：构建Resunit（残差）模块</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResBlockSum</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nchannels<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>nchannels<span class="token punctuation">,</span> int<span class="token punctuation">(</span>nchannels<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>int<span class="token punctuation">(</span>nchannels<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nchannels<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>block<span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h4 id="4：构建头部分"><a href="#4：构建头部分" class="headerlink" title="4：构建头部分"></a>4：构建头部分</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">HeadBody</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>HeadBody<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layer <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>out_channels<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2dBatchLeaky<span class="token punctuation">(</span>out_channels<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x</code></pre><h4 id="5：上采样"><a href="#5：上采样" class="headerlink" title="5：上采样"></a>5：上采样</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Upsample</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Custom Upsample layer (nn.Upsample gives deprecated warning message)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> scale_factor<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param scale_factor: 空间大小乘积        :param mode: nearest：上采样的算法        """</span>        super<span class="token punctuation">(</span>Upsample<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>scale_factor <span class="token operator">=</span> scale_factor        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> F<span class="token punctuation">.</span>interpolate<span class="token punctuation">(</span>x<span class="token punctuation">,</span> scale_factor<span class="token operator">=</span>self<span class="token punctuation">.</span>scale_factor<span class="token punctuation">,</span> mode<span class="token operator">=</span>self<span class="token punctuation">.</span>mode<span class="token punctuation">)</span></code></pre><h4 id="6：网络的输出层，若进行预测返回预测结果"><a href="#6：网络的输出层，若进行预测返回预测结果" class="headerlink" title="6：网络的输出层，若进行预测返回预测结果"></a>6：网络的输出层，若进行预测返回预测结果</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># default anchors=[(10,13), (16,30), (33,23), (30,61), (62,45), (59,119), (116,90), (156,198), (373,326)]</span><span class="token keyword">class</span> <span class="token class-name">YOLOLayer</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anchors<span class="token punctuation">,</span> nC<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>YOLOLayer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>anchors <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#转变类型，np转换为tensor类</span>        self<span class="token punctuation">.</span>nA <span class="token operator">=</span> len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># number of anchors (3)</span>        self<span class="token punctuation">.</span>nC <span class="token operator">=</span> nC  <span class="token comment" spellcheck="true"># 类别</span>        self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'init YOLOLayer ------ >>> '</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'anchors  : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>anchors<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#anchors</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'nA       : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>nA<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#anchor框的数量</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'nC       : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>nC<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#类别</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'img_size : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>img_size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#图片大小</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> p<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> var<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true"># p : 特征图</span>        bs<span class="token punctuation">,</span> nG <span class="token operator">=</span> p<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># batch_size , nG:网格</span>        <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'bs, nG --->>> '</span><span class="token punctuation">,</span>bs<span class="token punctuation">,</span> nG<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>img_size <span class="token operator">!=</span> img_size<span class="token punctuation">:</span>            create_grids<span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> nG<span class="token punctuation">,</span> p<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># p.view(bs, 255, 13, 13) -- > (bs, 3, 13, 13, 85)  # (bs, anchors, grid, grid, xywh + confidence + classes)</span>        p <span class="token operator">=</span> p<span class="token punctuation">.</span>view<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> self<span class="token punctuation">.</span>nA<span class="token punctuation">,</span> self<span class="token punctuation">.</span>nC <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span> nG<span class="token punctuation">,</span> nG<span class="token punctuation">)</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>contiguous<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#  prediction</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>            <span class="token keyword">return</span> p        <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># inference</span>            io <span class="token operator">=</span> p<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># inference output</span>            io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>grid_xy  <span class="token comment" spellcheck="true"># xy</span>            io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>anchor_wh  <span class="token comment" spellcheck="true"># wh yolo method</span>            io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># p_conf, p_cls</span>            io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*=</span> self<span class="token punctuation">.</span>stride            <span class="token keyword">if</span> self<span class="token punctuation">.</span>nC <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                io<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># single-class model</span>            <span class="token comment" spellcheck="true"># flatten prediction, reshape from [bs, nA, nG, nG, nC] to [bs, nA * nG * nG, nC]</span>            <span class="token keyword">return</span> io<span class="token punctuation">.</span>view<span class="token punctuation">(</span>bs<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>nC<span class="token punctuation">)</span><span class="token punctuation">,</span> p</code></pre><h4 id="7：若图像尺寸不是416，调整anchor的生成，输出特征图"><a href="#7：若图像尺寸不是416，调整anchor的生成，输出特征图" class="headerlink" title="7：若图像尺寸不是416，调整anchor的生成，输出特征图"></a>7：若图像尺寸不是416，调整anchor的生成，输出特征图</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_grids</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img_size<span class="token punctuation">,</span> nG<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token string">'cpu'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># self.nA : len(anchors)  # number of anchors (3)</span>    <span class="token comment" spellcheck="true"># self.nC : nC  # number of classes</span>    <span class="token comment" spellcheck="true"># nG : 输出特征图的大小，与输入图像大小有关</span>    self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> img_size    self<span class="token punctuation">.</span>stride <span class="token operator">=</span> img_size <span class="token operator">/</span> nG    <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'create_grids stride : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>stride<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># build xy offsets</span>    grid_x <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>nG<span class="token punctuation">)</span><span class="token punctuation">.</span>repeat<span class="token punctuation">(</span><span class="token punctuation">(</span>nG<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nG<span class="token punctuation">,</span> nG<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>float<span class="token punctuation">(</span><span class="token punctuation">)</span>    grid_y <span class="token operator">=</span> grid_x<span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>grid_xy <span class="token operator">=</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span><span class="token punctuation">(</span>grid_x<span class="token punctuation">,</span> grid_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#进行堆叠</span>    <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'grid_x : '</span><span class="token punctuation">,</span>grid_x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>grid_x<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'grid_y : '</span><span class="token punctuation">,</span>grid_y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>grid_y<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'grid_xy : '</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>grid_xy<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>grid_xy<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># build wh gains</span>    self<span class="token punctuation">.</span>anchor_vec <span class="token operator">=</span> self<span class="token punctuation">.</span>anchors<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>stride <span class="token comment" spellcheck="true"># 基于 stride 的归一化</span>    <span class="token comment" spellcheck="true"># print('self.anchor_vecself.anchor_vecself.anchor_vec:',self.anchor_vec)</span>    self<span class="token punctuation">.</span>anchor_wh <span class="token operator">=</span> self<span class="token punctuation">.</span>anchor_vec<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>nA<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>nG <span class="token operator">=</span> torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>nG<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_yolo_layer_index</span><span class="token punctuation">(</span>module_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    yolo_layer_index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> l <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>module_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>img_size <span class="token operator">and</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nG  <span class="token comment" spellcheck="true"># only yolo layer need img_size and nG</span>            yolo_layer_index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>index<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>yolo_layer_index<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"can not find yolo layer"</span>    <span class="token keyword">return</span> yolo_layer_index</code></pre><h4 id="8：yolov3模型构建"><a href="#8：yolov3模型构建" class="headerlink" title="8：yolov3模型构建"></a>8：yolov3模型构建</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Yolov3</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> anchors<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">119</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">156</span><span class="token punctuation">,</span><span class="token number">198</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">373</span><span class="token punctuation">,</span><span class="token number">326</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取不同输出尺度上的anchor，对于416*416的图像，</span>        <span class="token comment" spellcheck="true"># anchor_mask1是13*13 大物体</span>        <span class="token comment" spellcheck="true"># anchor_mask2是26*26 中等物体</span>        <span class="token comment" spellcheck="true"># anchor_mask3是52*52 小物体</span>        anchor_mask1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># [6, 7, 8]</span>        anchor_mask2 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># [3, 4, 5]</span>        anchor_mask3 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>anchors<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># [0, 1, 2]</span>        <span class="token comment" spellcheck="true"># 网络构建，所有的网络层都存放在layerlist中，</span>        <span class="token comment" spellcheck="true"># OrderedDict 是 dict 的子类，其最大特征是可以保持添加的key-valu对的顺序</span>        <span class="token comment" spellcheck="true"># Conv2dBatchLeaky 是CBL模块，操作是Conv2d,BatchNorm2d,LeakyReLU</span>        <span class="token comment" spellcheck="true"># ResBlockSum 是resunit，操作是Conv2dBatchLeaky * 2 + x</span>        <span class="token comment" spellcheck="true"># headbody是CBL*5</span>        layer_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 构建backbone的第一部分，获取52*52的特征图 list0</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">'0_stage1_conv'</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 416 x 416 x 32</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">"0_stage2_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 208 x 208 x 64</span>            <span class="token comment" spellcheck="true"># resunit</span>            <span class="token punctuation">(</span><span class="token string">"0_stage2_ressum1"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">"0_stage3_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 104 x 104 128</span>            <span class="token comment" spellcheck="true"># resUnit*2</span>            <span class="token punctuation">(</span><span class="token string">"0_stage3_ressum1"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage3_ressum2"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 52 x 52 x 256</span>            <span class="token comment" spellcheck="true"># Reunit*8</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum1"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum2"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum3"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum4"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum5"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum6"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum7"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"0_stage4_ressum8"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 52 x 52 x 256 output_feature_0</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 构建backbone的第二部分获取26*26的特征图 list1</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 26 x 26 x 512</span>            <span class="token comment" spellcheck="true"># resunit*8</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum1"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum2"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum3"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum4"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum5"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum6"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum7"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"1_stage5_ressum8"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 26 x 26 x 512 output_feature_1</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 2 获取13*13的特征图并输入输出部分</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token comment" spellcheck="true"># CBL</span>            <span class="token punctuation">(</span><span class="token string">"2_stage6_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 13 x 13 x 1024</span>            <span class="token comment" spellcheck="true"># resuint*4</span>            <span class="token punctuation">(</span><span class="token string">"2_stage6_ressum1"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"2_stage6_ressum2"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"2_stage6_ressum3"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"2_stage6_ressum4"</span><span class="token punctuation">,</span> ResBlockSum<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 13 x 13 x 1024 output_feature_2</span>            <span class="token comment" spellcheck="true"># CBL*5</span>            <span class="token punctuation">(</span><span class="token string">"2_headbody1"</span><span class="token punctuation">,</span> HeadBody<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 13 x 13 x 512</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 3 获取13*13特征图像的预测 13*13*255</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"3_conv_1"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"3_conv_2"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">1024</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span>len<span class="token punctuation">(</span>anchor_mask1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num_classes <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 4 获取13*13特征图上的检测结果 3*((x, y, w, h, confidence) + classes )</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"4_yolo"</span><span class="token punctuation">,</span> YOLOLayer<span class="token punctuation">(</span><span class="token punctuation">[</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> anchor_mask1<span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 5 上采样</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"5_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"5_upsample"</span><span class="token punctuation">,</span> Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 6 获取26*26的特征图并输入输出部分</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"6_head_body2"</span><span class="token punctuation">,</span> HeadBody<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">768</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 7 获取26*26特征图像的预测 26*26*255</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"7_conv_1"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"7_conv_2"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span>len<span class="token punctuation">(</span>anchor_mask2<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num_classes <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># predict two</span>        <span class="token comment" spellcheck="true"># list 8 获取26*26特征图上的检测结果 3*((x, y, w, h, confidence) + classes )</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"8_yolo"</span><span class="token punctuation">,</span> YOLOLayer<span class="token punctuation">(</span><span class="token punctuation">[</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> anchor_mask2<span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 9</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"9_conv"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"9_upsample"</span><span class="token punctuation">,</span> Upsample<span class="token punctuation">(</span>scale_factor<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 10 获取52*52的特征图并输入输出部分</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"10_head_body3"</span><span class="token punctuation">,</span> HeadBody<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">384</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Convalutional Set = Conv2dBatchLeaky * 5</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 11 获取52*52特征图像的预测 52*52*255</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"11_conv_1"</span><span class="token punctuation">,</span> Conv2dBatchLeaky<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token string">"11_conv_2"</span><span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span>len<span class="token punctuation">(</span>anchor_mask3<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num_classes <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># predict three</span>        <span class="token comment" spellcheck="true"># list 12 获取52*52特征图上的检测结果 3*((x, y, w, h, confidence) + classes )</span>        layer_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token punctuation">(</span><span class="token string">"12_yolo"</span><span class="token punctuation">,</span> YOLOLayer<span class="token punctuation">(</span><span class="token punctuation">[</span>anchors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> anchor_mask3<span class="token punctuation">]</span><span class="token punctuation">,</span> num_classes<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 3*((x, y, w, h, confidence) + classes )</span>        <span class="token comment" spellcheck="true"># nn.ModuleList类似于pytho中的list类型，只是将一系列层装入列表</span>        self<span class="token punctuation">.</span>module_list <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> layer_list<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取输出结果 list4 list8 list12</span>        self<span class="token punctuation">.</span>yolo_layer_index <span class="token operator">=</span> get_yolo_layer_index<span class="token punctuation">(</span>self<span class="token punctuation">.</span>module_list<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 前向传播</span>        img_size <span class="token operator">=</span> x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># list0</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x_route1 <span class="token operator">=</span> x        <span class="token comment" spellcheck="true"># list1</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x_route2 <span class="token operator">=</span> x        <span class="token comment" spellcheck="true"># list2</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list4</span>        yolo_head <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mask1 yolo_head : '</span><span class="token punctuation">,</span>yolo_head<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list5 输出结果</span>        yolo_head_out_13x13 <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>yolo_head<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>        output<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yolo_head_out_13x13<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list 5</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 融合</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> x_route2<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list6</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list7</span>        yolo_head <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mask2 yolo_head : '</span><span class="token punctuation">,</span>yolo_head<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list8</span>        yolo_head_out_26x26 <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>yolo_head<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>        output<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yolo_head_out_26x26<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list9</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 融合</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span> x_route1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list10</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list11</span>        yolo_head <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> flag_yolo_structure<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mask3 yolo_head : '</span><span class="token punctuation">,</span>yolo_head<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># list12</span>        yolo_head_out_52x52 <span class="token operator">=</span> self<span class="token punctuation">.</span>module_list<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span>yolo_head<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span>        output<span class="token punctuation">.</span>append<span class="token punctuation">(</span>yolo_head_out_52x52<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 训练是直接输出三个尺度的结果，</span>        <span class="token comment" spellcheck="true"># train_out: torch.Size([5, 3, 13, 13, 85])</span>        <span class="token comment" spellcheck="true"># train_out: torch.Size([5, 3, 26, 26, 85])</span>        <span class="token comment" spellcheck="true"># train_out: torch.Size([5, 3, 52, 52, 85])</span>        <span class="token comment" spellcheck="true"># 预测时进行拼接</span>        <span class="token comment" spellcheck="true"># inference_out: torch.Size([5, 10647, 85])</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>training<span class="token punctuation">:</span>            <span class="token keyword">return</span> output        <span class="token keyword">else</span><span class="token punctuation">:</span>            io<span class="token punctuation">,</span> p <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>output<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># inference output, training output</span>            <span class="token keyword">return</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>io<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第二章：人脸识别，模型进行构建&quot;&gt;&lt;a href=&quot;#第二章：人脸识别，模型进行构建&quot; class=&quot;headerlink&quot; title=&quot;第二章：人脸识别，模型进行构建&quot;&gt;&lt;/a&gt;第二章：人脸识别，模型进行构建&lt;/h2&gt;&lt;h4 id=&quot;使用YOLO3进行模型的构</summary>
      
    
    
    
    <category term="CV深度学习" scheme="https://xiaoyvlongoing.github.io/categories/CV%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV人脸识别项目" scheme="https://xiaoyvlongoing.github.io/tags/CV%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>人脸识别：第一章</title>
    <link href="https://xiaoyvlongoing.github.io/2020/06/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>https://xiaoyvlongoing.github.io/2020/06/10/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2020-06-10T06:47:40.000Z</published>
    <updated>2021-06-13T11:17:45.248Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一章：人脸识别，图片数据处理增强"><a href="#第一章：人脸识别，图片数据处理增强" class="headerlink" title="第一章：人脸识别，图片数据处理增强"></a>第一章：人脸识别，图片数据处理增强</h2><h3 id="1：人脸识别简介："><a href="#1：人脸识别简介：" class="headerlink" title="1：人脸识别简介："></a>1：人脸识别简介：</h3><p>1.1：运用的是YOLO3深度学习进行人脸识别检测，使用pytorch框架进行编写</p><p>1.2：评价指标：</p><ul><li><h5 id="召回率："><a href="#召回率：" class="headerlink" title="召回率："></a>召回率：</h5><ul><li>通常交并比IoU大于0.5就认为是检测出来了，所以 recall = 检测出来的人脸数量/图像中总人脸数量</li></ul></li><li><h5 id="误检数："><a href="#误检数：" class="headerlink" title="误检数："></a><strong>误检数</strong>：</h5><ul><li>与recall相对，detector检测出来的矩形框与任何人工标注框的IoU都小于0.5，则认为这个检测结果是误检，误检越少越好</li></ul></li><li><h5 id="检测速度："><a href="#检测速度：" class="headerlink" title="检测速度："></a><strong>检测速度</strong>：</h5><ul><li>detector检测一幅图像所用的时间越少越好，通常用帧率(frame-per-second，FPS)来表示。不过这里有点小问题，很多detector都是图像越小、图像中人脸越少、检测最小人脸越大，检测速度越快</li></ul></li></ul><h3 id="2：数据集加载和处理"><a href="#2：数据集加载和处理" class="headerlink" title="2：数据集加载和处理"></a>2：数据集加载和处理</h3><h4 id="2-1：主要通过类LoadImagesAndLabels来实现，"><a href="#2-1：主要通过类LoadImagesAndLabels来实现，" class="headerlink" title="2.1：主要通过类LoadImagesAndLabels来实现，"></a>2.1：主要通过类LoadImagesAndLabels来实现，</h4><ul><li>该方法继承自DataSet，主要实现了以下三个方法：<ul><li>init方法 进行参数的初始化，包括图像路径，图像大小等</li><li>len方法 返回数据集中图像文件的数量</li><li>getitem方法 返回数据集中的每一个图像信息，供datasetloader来使用，在这里除了完成图像读取的任务外，我们还增加了图像增强处理</li></ul></li></ul><h4 id="2-2：导入依赖包"><a href="#2-2：导入依赖包" class="headerlink" title="2.2：导入依赖包"></a>2.2：导入依赖包</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> glob<span class="token keyword">import</span> math<span class="token keyword">import</span> os<span class="token keyword">import</span> random<span class="token keyword">import</span> shutil<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token comment" spellcheck="true"># import matplotlib.pyplot as plt</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token comment" spellcheck="true">#[x, y, w, h]：中点坐标x，y和图片的宽高</span><span class="token keyword">def</span> <span class="token function">xyxy2xywh</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Convert bounding box format from [x1, y1, x2, y2] to [x, y, w, h]</span>    <span class="token comment" spellcheck="true">#转换边界框格式: [x1, y1, x2, y2] to [x, y, w, h]</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token keyword">else</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> y<span class="token keyword">def</span> <span class="token function">xywh2xyxy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Convert bounding box format from [x, y, w, h] to [x1, y1, x2, y2]</span>    <span class="token comment" spellcheck="true">#转换边界框格式 :[x, y, w, h] to [x1, y1, x2, y2]</span>    y <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> torch<span class="token punctuation">.</span>Tensor<span class="token punctuation">)</span> <span class="token keyword">else</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span>    y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">return</span> y</code></pre><h4 id="2-3：获取数据，对尺度变换，图像增强，获取图片数据和标签数据"><a href="#2-3：获取数据，对尺度变换，图像增强，获取图片数据和标签数据" class="headerlink" title="2.3：获取数据，对尺度变换，图像增强，获取图片数据和标签数据"></a>2.3：获取数据，对尺度变换，图像增强，获取图片数据和标签数据</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 获取数据：图像数据和标签数据</span><span class="token keyword">class</span> <span class="token class-name">LoadImagesAndLabels</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> img_size<span class="token operator">=</span><span class="token number">416</span><span class="token punctuation">,</span> augment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> multi_scale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> root_path<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param path: txt文件        :param batch_size:批次        :param img_size: 图像大小        :param augment: 是否进行增强        :param multi_scale: 多尺度训练        :param root_path: 指定数据的根目录        """</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'LoadImagesAndLabels init : '</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 读取txt文件，获取所有的图像文件</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>            img_files <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#按照行('\r', '\r\n', \n')分隔</span>            img_files <span class="token operator">=</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> len<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> img_files<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#函数用于过滤序列，过滤掉不符合条件的图像文件</span>        <span class="token comment" spellcheck="true"># 打乱图像文件</span>        np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span>img_files<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shuffle image..."</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>img_files <span class="token operator">=</span> img_files        <span class="token keyword">assert</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_files<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'No images found in %s'</span> <span class="token operator">%</span> path<span class="token comment" spellcheck="true">#断言，检测条件，不符合就终止程序</span>        self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> img_size<span class="token comment" spellcheck="true">#图像大小</span>        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size        self<span class="token punctuation">.</span>multi_scale <span class="token operator">=</span> multi_scale        self<span class="token punctuation">.</span>augment <span class="token operator">=</span> augment        self<span class="token punctuation">.</span>scale_index <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>root_path <span class="token operator">=</span> root_path        <span class="token keyword">if</span> self<span class="token punctuation">.</span>multi_scale<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> img_size  <span class="token comment" spellcheck="true"># 在内存不足的情况下，以最大多刻度大小启动</span>            <span class="token comment" spellcheck="true">#多尺度图像训练，初始图像大小</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Multi scale images training, init img_size"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>img_size<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Fixed scale images, img_size"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>img_size<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取对应的标签图像</span>        self<span class="token punctuation">.</span>label_files <span class="token operator">=</span> <span class="token punctuation">[</span>            x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'images'</span><span class="token punctuation">,</span> <span class="token string">'labels'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"JPEGImages"</span><span class="token punctuation">,</span> <span class="token string">'labels'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.bmp'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.jpg'</span><span class="token punctuation">,</span>                                                                                                          <span class="token string">'.txt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>                <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">.</span>img_files<span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回图像文件的个数</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>img_files<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 返回一个训练数据</span>        <span class="token comment" spellcheck="true"># 判断是否进行多尺度训练且是新的批次，并且批次不为0</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>multi_scale <span class="token operator">and</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>scale_index <span class="token operator">%</span> self<span class="token punctuation">.</span>batch_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> self<span class="token punctuation">.</span>scale_index <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 随机生成要进行检测的图像的大小</span>            self<span class="token punctuation">.</span>img_size <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">32</span><span class="token comment" spellcheck="true">#yolo图片的传入的都是32的倍数，随机生成进行检测的大小</span>        <span class="token comment" spellcheck="true"># 多尺度训练时要对数据个数进行计数</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>multi_scale<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>scale_index <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>scale_index <span class="token operator">>=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>scale_index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># 获取图像位置，指定数据根路径和txt文件的路径位置进行拼接</span>        img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>img_files<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#位置进行拼接</span>        <span class="token comment" spellcheck="true">#对应的是2，就是前面为./后面是路径</span>        label_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>root_path<span class="token punctuation">,</span> self<span class="token punctuation">.</span>label_files<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 图像读取</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>        <span class="token keyword">assert</span> img <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">,</span> <span class="token string">'File Not Found '</span> <span class="token operator">+</span> img_path       <span class="token comment" spellcheck="true">#图片的数据增强       </span>                <span class="token comment" spellcheck="true"># 进行颜色增强，概率为0.5</span>        augment_hsv <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.5</span><span class="token comment" spellcheck="true">#返回的是T或F</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>augment <span class="token operator">and</span> augment_hsv<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># SV通道增强的概率为0.5</span>            fraction <span class="token operator">=</span> <span class="token number">0.50</span>            <span class="token comment" spellcheck="true"># 颜色空间转换</span>            img_hsv <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_BGR2HSV<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 获取S和V两个通道的数据</span>            S <span class="token operator">=</span> img_hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最后一个索引为1的时候获取的是S通道</span>            V <span class="token operator">=</span> img_hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#最后一个索引为2的时候获取的是v通道</span>            <span class="token comment" spellcheck="true"># 生成随机数a 在[0,5, 1.5]之间，对S通道进行处理</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction <span class="token operator">+</span> <span class="token number">1</span>            S <span class="token operator">*=</span> a            <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>S<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> out<span class="token operator">=</span>S<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#大于1的进行裁剪</span>            <span class="token comment" spellcheck="true"># 生成随机数a 在[0,5, 1.5]之间，对通道进行处理</span>            a <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction <span class="token operator">+</span> <span class="token number">1</span>            V <span class="token operator">*=</span> a            <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>                np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>V<span class="token punctuation">,</span> None<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> out<span class="token operator">=</span>V<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#增强后的赋值给原图像</span>            img_hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> S            img_hsv<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> V            <span class="token comment" spellcheck="true"># 颜色空间转换为BGR，完成图像增强</span>            cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>img_hsv<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_HSV2BGR<span class="token punctuation">,</span> dst<span class="token operator">=</span>img<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#yolo图片输入为正方形，图像进行填充</span>        <span class="token comment" spellcheck="true"># 获取图像的宽高</span>        h<span class="token punctuation">,</span> w<span class="token punctuation">,</span> _ <span class="token operator">=</span> img<span class="token punctuation">.</span>shape        <span class="token comment" spellcheck="true"># yoloV3输入图片要求为正方形，而数据集中的图片一般为长方形，粗暴的resize会使得图片失真，</span>        <span class="token comment" spellcheck="true"># 采用letterbox可以保持图片的长宽比例，剩下的部分采用灰色填充</span>        <span class="token comment" spellcheck="true"># img是处理后的图像，ratio是resize的比例，padw和padh是宽高两部分填充的大小</span>        img<span class="token punctuation">,</span> ratio<span class="token punctuation">,</span> padw<span class="token punctuation">,</span> padh <span class="token operator">=</span> letterbox<span class="token punctuation">(</span>img<span class="token punctuation">,</span> height<span class="token operator">=</span>self<span class="token punctuation">.</span>img_size<span class="token punctuation">,</span> augment<span class="token operator">=</span>self<span class="token punctuation">.</span>augment<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#height=self.img_size：对尺度的图像的生成，再对图片进行放射裁剪变换，</span>        <span class="token comment" spellcheck="true">#返回：图像，比例，高，宽</span>        <span class="token comment" spellcheck="true"># 加载标签值</span>        labels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 读取标签文件，有画框的图片</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>label_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#判断有这个路径就为T，否者为F</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>label_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>                lines <span class="token operator">=</span> file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#</span>            x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> lines<span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>            <span class="token keyword">if</span> x<span class="token punctuation">.</span>size <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                               <span class="token comment" spellcheck="true">#图像进增强后的框进行处理，写出位置    </span>                <span class="token comment" spellcheck="true"># 将归一化的xywh转换为xyxy的形式</span>                labels <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#进行拷贝</span>                labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> ratio <span class="token operator">*</span> w <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> padw                labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> ratio <span class="token operator">*</span> h <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> padh                labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> ratio <span class="token operator">*</span> w <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> padw                labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> ratio <span class="token operator">*</span> h <span class="token operator">*</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> padh<span class="token comment" spellcheck="true">#几何变化图像增强</span>        <span class="token comment" spellcheck="true"># 图像增强</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>augment<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 仿射变换的增强</span>            img<span class="token punctuation">,</span> labels <span class="token operator">=</span> random_affine<span class="token punctuation">(</span>img<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> degrees<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> translate<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.10</span><span class="token punctuation">,</span> <span class="token number">0.10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获取目标的个数</span>        nL <span class="token operator">=</span> len<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>        <span class="token keyword">if</span> nL<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># # 转化xyxy为xywh，且并归一化</span>            labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> xyxy2xywh<span class="token punctuation">(</span>labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> self<span class="token punctuation">.</span>img_size        <span class="token keyword">if</span> self<span class="token punctuation">.</span>augment<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 随机左右翻转</span>            lr_flip <span class="token operator">=</span> <span class="token boolean">True</span>            <span class="token keyword">if</span> lr_flip <span class="token operator">and</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">:</span>                img <span class="token operator">=</span> np<span class="token punctuation">.</span>fliplr<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                <span class="token keyword">if</span> nL<span class="token punctuation">:</span>                    labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 随机上下翻转，不适用</span>            ud_flip <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token keyword">if</span> ud_flip <span class="token operator">and</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">:</span>                img <span class="token operator">=</span> np<span class="token punctuation">.</span>flipud<span class="token punctuation">(</span>img<span class="token punctuation">)</span>                <span class="token keyword">if</span> nL<span class="token punctuation">:</span>                    labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> labels<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 生成一个全零数据存储label值</span>        labels_out <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>nL<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 若标签不为空，将其填充在全零数组中</span>        <span class="token keyword">if</span> nL<span class="token punctuation">:</span>            labels_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 通道BGR to RGB，表示形式转换为3x416x416（CHW）</span>        img <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#进行转至</span>        <span class="token comment" spellcheck="true"># 类型转换uint8 to float32</span>        img <span class="token operator">=</span> np<span class="token punctuation">.</span>ascontiguousarray<span class="token punctuation">(</span>img<span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#返回有顺序的转换好的类型</span>        <span class="token comment" spellcheck="true"># 归一化 0 - 255 to 0.0 - 1.0</span>        img <span class="token operator">/=</span> <span class="token number">255.0</span>        <span class="token comment" spellcheck="true"># 返回结果：图片增强后的结果，图片反转后的数组，图像位置，</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">,</span> labels_out<span class="token punctuation">,</span> img_path<span class="token punctuation">,</span> <span class="token punctuation">(</span>h<span class="token punctuation">,</span> w<span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">collate_fn</span><span class="token punctuation">(</span>batch<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        实现自定义的batch的输出        :param batch:        :return:        """</span>        img<span class="token punctuation">,</span> label<span class="token punctuation">,</span> path<span class="token punctuation">,</span> hw <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> l <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">:</span>            l<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token comment" spellcheck="true"># 获取 物体的 归属于 图片 的 index</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>label<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> hw</code></pre><h4 id="2-4：对图片进行裁剪插值变换"><a href="#2-4：对图片进行裁剪插值变换" class="headerlink" title="2.4：对图片进行裁剪插值变换"></a>2.4：对图片进行裁剪插值变换</h4><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#</span><span class="token keyword">def</span> <span class="token function">letterbox</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">416</span><span class="token punctuation">,</span> augment<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">127.5</span><span class="token punctuation">,</span> <span class="token number">127.5</span><span class="token punctuation">,</span> <span class="token number">127.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    保持图片的长宽比例，剩下的部分采用灰色填充，获取一个输入到网络中的正方形图片    :param img: 要处理的图像    :param height: 正方形图像的高    :param augment: 是否进行图像增强    :param color: pad部分使用其进行填充    :return:    """</span>    <span class="token comment" spellcheck="true"># shape = [height, width]，要处理图像的高宽</span>    shape <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># ratio  = old / new 缩放的比例</span>    ratio <span class="token operator">=</span> float<span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">/</span> max<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># resize后图像的大小</span>    new_shape <span class="token operator">=</span> <span class="token punctuation">(</span>round<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> ratio<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 宽pad的大小</span>    dw <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> new_shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 高pad的大小</span>    dh <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> new_shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 获取周围pad的大小</span>    top<span class="token punctuation">,</span> bottom <span class="token operator">=</span> round<span class="token punctuation">(</span>dh <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>dh <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    left<span class="token punctuation">,</span> right <span class="token operator">=</span> round<span class="token punctuation">(</span>dw <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> round<span class="token punctuation">(</span>dw <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 是否增强</span>    <span class="token keyword">if</span> augment<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 随机选择插值方式,choice:随机选取一条数据</span>        interpolation <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span>None<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_NEAREST<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">,</span>                                          None<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_NEAREST<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">,</span>                                          cv2<span class="token punctuation">.</span>INTER_AREA<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_CUBIC<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>INTER_LANCZOS4<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 若为None按默认方式增强，否则按随机选择的方式进行增强</span>        <span class="token keyword">if</span> interpolation <span class="token keyword">is</span> None<span class="token punctuation">:</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> new_shape<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> new_shape<span class="token punctuation">,</span> interpolation<span class="token operator">=</span>interpolation<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 若不增强，按近邻方式进行增强</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img<span class="token punctuation">,</span> new_shape<span class="token punctuation">,</span> interpolation<span class="token operator">=</span>cv2<span class="token punctuation">.</span>INTER_NEAREST<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将padding的填充在图像的周围，获取方形的结果</span>    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_CONSTANT<span class="token punctuation">,</span> value<span class="token operator">=</span>color<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回图像，缩放比例，padding大小</span>    <span class="token keyword">return</span> img<span class="token punctuation">,</span> ratio<span class="token punctuation">,</span> dw<span class="token punctuation">,</span> dh</code></pre><h4 id="2-5：仿射变换的增强"><a href="#2-5：仿射变换的增强" class="headerlink" title="2.5：仿射变换的增强"></a>2.5：仿射变换的增强</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">random_affine</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> targets<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> degrees<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> translate<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">1.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shear<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  borderValue<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">127.5</span><span class="token punctuation">,</span> <span class="token number">127.5</span><span class="token punctuation">,</span> <span class="token number">127.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># torchvision.transforms.RandomAffine(degrees=(-10, 10), translate=(.1, .1), scale=(.9, 1.1), shear=(-10, 10))</span>    <span class="token triple-quoted-string string">"""    :param img:    :param targets:    :param degrees: 旋转角度    :param translate: 水平或者垂直移动的范围    :param scale: 放缩尺度因子    :param shear: 错切    :param borderValue: 填充空白区域的颜色    :return:    """</span>    <span class="token keyword">if</span> targets <span class="token keyword">is</span> None<span class="token punctuation">:</span>        targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    border <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 添加邊框的寬度 (optional)</span>    height <span class="token operator">=</span> max<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> border <span class="token operator">*</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 旋轉和縮放</span>    R <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>degrees<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> degrees<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> degrees<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># a += random.choice([-180, -90, 0, 90])  # 90deg rotations added to small rotations</span>    s <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>scale<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> scale<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">#图片的旋转，angle：旋转角度，center：缩放比例</span>    R<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> cv2<span class="token punctuation">.</span>getRotationMatrix2D<span class="token punctuation">(</span>angle<span class="token operator">=</span>a<span class="token punctuation">,</span> center<span class="token operator">=</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scale<span class="token operator">=</span>s<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Translation</span>    T <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    T<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> translate<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> border  <span class="token comment" spellcheck="true"># x translation (pixels)</span>    T<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> translate<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> border  <span class="token comment" spellcheck="true"># y translation (pixels)</span>    <span class="token comment" spellcheck="true"># Shear</span>    S <span class="token operator">=</span> np<span class="token punctuation">.</span>eye<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    S<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>shear<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> shear<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> shear<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x shear (deg)</span>    S<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> math<span class="token punctuation">.</span>tan<span class="token punctuation">(</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>shear<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> shear<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> shear<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># y shear (deg)</span>    M <span class="token operator">=</span> S @ T @ R  <span class="token comment" spellcheck="true"># 組合旋轉矩陣。</span>    <span class="token comment" spellcheck="true"># 进行透射变换</span>    imw <span class="token operator">=</span> cv2<span class="token punctuation">.</span>warpPerspective<span class="token punctuation">(</span>img<span class="token punctuation">,</span> M<span class="token punctuation">,</span> dsize<span class="token operator">=</span><span class="token punctuation">(</span>height<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">,</span> flags<span class="token operator">=</span>cv2<span class="token punctuation">.</span>INTER_LINEAR<span class="token punctuation">,</span>                              borderValue<span class="token operator">=</span>borderValue<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># BGR order borderValue</span>    <span class="token comment" spellcheck="true"># 返回翘曲点</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>targets<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        n <span class="token operator">=</span> targets<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        points <span class="token operator">=</span> targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        area0 <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># warp points</span>        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#创建全为1的2维数组</span>        xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># x1y1, x2y2, x1y2, x2y1</span>        xy <span class="token operator">=</span> <span class="token punctuation">(</span>xy @ M<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#  创建 boxes</span>        x <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        y <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token comment" spellcheck="true"># 应用基于角度的边界框缩减</span>        radians <span class="token operator">=</span> a <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">/</span> <span class="token number">180</span>        reduction <span class="token operator">=</span> max<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>math<span class="token punctuation">.</span>sin<span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> abs<span class="token punctuation">(</span>math<span class="token punctuation">.</span>cos<span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">0.5</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>        w <span class="token operator">=</span> <span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> reduction        h <span class="token operator">=</span> <span class="token punctuation">(</span>xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> reduction        xy <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">-</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">-</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> x <span class="token operator">+</span> w <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">+</span> h <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span>T        <span class="token comment" spellcheck="true"># reject warped points outside of image</span>        np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>xy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> height<span class="token punctuation">,</span> out<span class="token operator">=</span>xy<span class="token punctuation">)</span>        w <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        h <span class="token operator">=</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> xy<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>        area <span class="token operator">=</span> w <span class="token operator">*</span> h        ar <span class="token operator">=</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span>w <span class="token operator">/</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> h <span class="token operator">/</span> <span class="token punctuation">(</span>w <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>w <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>h <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>area <span class="token operator">/</span> <span class="token punctuation">(</span>area0 <span class="token operator">+</span> <span class="token number">1e</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>ar <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        targets<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> xy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#返回透射变换后的</span>    <span class="token keyword">return</span> imw<span class="token punctuation">,</span> targets</code></pre><h4 id="2-5：打印输出进行测试"><a href="#2-5：打印输出进行测试" class="headerlink" title="2.5：打印输出进行测试"></a>2.5：打印输出进行测试</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    train_path <span class="token operator">=</span>r<span class="token string">'.\train.txt'</span>    batch_size <span class="token operator">=</span> <span class="token number">1</span>    img_size <span class="token operator">=</span> <span class="token number">416</span>    root_path <span class="token operator">=</span> r<span class="token string">'.\datasets'</span>    num_workers <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment" spellcheck="true"># 用之前创建好的Dataset类去创建数据对象</span>    dataset <span class="token operator">=</span> LoadImagesAndLabels<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> img_size<span class="token operator">=</span>img_size<span class="token punctuation">,</span> augment<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                  multi_scale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> root_path<span class="token operator">=</span>root_path<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'--------------->>> imge num : '</span><span class="token punctuation">,</span> dataset<span class="token punctuation">.</span>__len__<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用dataloader读取我们的数据对象，并设定batch-size，使用dataloader进行模型训练</span>    dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span>                            batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span>                            num_workers<span class="token operator">=</span>num_workers<span class="token punctuation">,</span>                            shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                            pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                            drop_last<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                            collate_fn<span class="token operator">=</span>dataset<span class="token punctuation">.</span>collate_fn<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span>imgs<span class="token punctuation">,</span> targets<span class="token punctuation">,</span> img_path_<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>dataloader<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将信息标注在图像上</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>targets<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>img_path_<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 标注的图像写入的文件路径</span>        out_path <span class="token operator">=</span> img_path_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"anno"</span><span class="token punctuation">,</span> <span class="token string">"results"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>out_path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 将图像写入</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>out_path<span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>permute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">255.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第一章：人脸识别，图片数据处理增强&quot;&gt;&lt;a href=&quot;#第一章：人脸识别，图片数据处理增强&quot; class=&quot;headerlink&quot; title=&quot;第一章：人脸识别，图片数据处理增强&quot;&gt;&lt;/a&gt;第一章：人脸识别，图片数据处理增强&lt;/h2&gt;&lt;h3 id=&quot;1：人脸识</summary>
      
    
    
    
    <category term="CV深度学习" scheme="https://xiaoyvlongoing.github.io/categories/CV%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="CV人脸识别项目" scheme="https://xiaoyvlongoing.github.io/tags/CV%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>线程任务</title>
    <link href="https://xiaoyvlongoing.github.io/2020/02/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E6%97%A0%E5%BA%8F%E6%89%A7%E8%A1%8C/"/>
    <id>https://xiaoyvlongoing.github.io/2020/02/10/%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%9A%E6%97%A0%E5%BA%8F%E6%89%A7%E8%A1%8C/</id>
    <published>2020-02-10T06:47:40.000Z</published>
    <updated>2021-06-10T00:50:01.078Z</updated>
    
    <content type="html"><![CDATA[<h3 id="多线程任务"><a href="#多线程任务" class="headerlink" title="多线程任务"></a>多线程任务</h3><table><thead><tr><th>函数名</th><th>使用的方法</th></tr></thead><tbody><tr><td>导入的函数包import multiprocessing</td><td>创建的进程导入的包名</td></tr><tr><td>multiprocessing.Process([group [, target [, name [, args：传入指定形参 [, kwargs：以字典的类型进行传参]]]]])</td><td>导入进程函数说明</td></tr><tr><td>target=方法名</td><td>执行的目标任务名（函数名，线程名）</td></tr><tr><td>name=进程的名字</td><td>进程名字</td></tr><tr><td>对象名=multiprocessing.Process(target=方法名)</td><td>启动进程的方法</td></tr><tr><td>子进程对象.start()</td><td>对象.start（）：启动子进程实例（创建子进程）</td></tr><tr><td>os.getpid</td><td>print(os.getpid)查看子进程编号</td></tr><tr><td>os.getppid</td><td>print(os.getppid)查看父进程编号</td></tr><tr><td>multiprocessing.current_process().name进程名字</td><td>查看当前进程编号</td></tr><tr><td>子进程对象.join()</td><td>加入jojn后主线程会等待子线程执行后再结束主线程，让线程可以形成串行，形成有顺序的，线性和进程的也可进行串行，结束前一个，进行下一个执行</td></tr><tr><td>子进程对象.terminate()</td><td>不管任务是否完成，立即终止子进程</td></tr><tr><td>子进程对象.daemom = True</td><td>不管任务是否完成，立即终止子进程</td></tr><tr><td>进程在ubuntu中 ps -aux|grep 要查找的线程的名字</td><td>过滤需要的进程来查看ID</td></tr><tr><td>os.kill(os.getpid(),9)  进程的id</td><td>强制杀死进程</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="多线程：无序执行"><a href="#多线程：无序执行" class="headerlink" title="多线程：无序执行"></a>多线程：无序执行</h2><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>import threading</td><td>创建线程的包</td></tr><tr><td>方法名= threading.Thread(target=方法名)</td><td>启动进程的方法</td></tr><tr><td>对象名 = threading.Thread(target=方法名,daemon= True)</td><td>主线程结束，会让子线程结束(方法1）</td></tr><tr><td>对象名 .setDaemon(True)：在启动线程之前</td><td>主线程结束，会让子线程结束(方法2）</td></tr><tr><td>current = threading.current_thread().name</td><td>获取线程的名称</td></tr><tr><td>多线程不能强制杀死，要把线程进行循环停止加上一个          变量 =</td><td></td></tr><tr><td>lock = threading.Lock()</td><td>创建互斥锁</td></tr><tr><td>lock.acquire()</td><td>创建锁</td></tr><tr><td>lock.release</td><td>解锁</td></tr></tbody></table><p>[TOC]</p><p>1：进程是操作系统资源分配的最小单位</p><p>2：进程之间执行也是无序的，它是由操作系统调度决定的，操作系统调度哪个进程，哪个进程就先执行，没有调度的进程不能执行</p><p>3：进程不共享全局变量</p><p>二：线程和进程有什么区别：</p><p>1：进程是操作系统资源分配的最小单位，线程是cpu调度的最小单位</p><p>2：线程依附于进程，没有进程就没有线程，一个进程默认创造一个主线程，一个进程可以创造多个线程</p><p>3：进程不共享全局变量，而同一个进程的线程可以共享进程的全局变量</p><p>4：进程开销比较大，可以利用多核（并行），线程开销比较小不能利用多核（并发）</p><p>三：什么是主进程：</p><p>主进程是：程序执行的入口，一个进程里默认带一个线程，主进程可以创建多个子线程，</p><p>四：写出创造进程的步骤：</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：导入进程包：​        <span class="token keyword">import</span>  multiprocessing<span class="token number">2</span>：创建进程函数（方法）​        <span class="token keyword">def</span> num（）：​                <span class="token keyword">pass</span><span class="token number">3</span>：创建进程，调用进程函数（方法）​        变量 <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target <span class="token operator">=</span> num<span class="token punctuation">)</span><span class="token number">4</span><span class="token punctuation">:</span>启动进程        变量<span class="token punctuation">.</span>start（）</code></pre><p>五：怎么获得进程的pid</p><pre class=" language-python"><code class="language-python"><span class="token number">1</span>：improre  os <span class="token number">2</span>：os<span class="token punctuation">.</span>getppid <span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>getppid<span class="token punctuation">)</span>查看父进程id编号<span class="token number">3</span>：os<span class="token punctuation">.</span>getpid  ：   <span class="token keyword">print</span>（os<span class="token punctuation">.</span>getpid）查看当前进程id编号<span class="token number">4</span>：multiprocessing<span class="token punctuation">.</span>current_process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name进程（线程）名字   ：查看当前进程（线程）的id编号    </code></pre><p>六：怎么给进程函数传递参数：</p><p>1：通过元组进程传递参数</p><pre><code>multiprocessing.Process(target = coding , args = （参数，）)传入的是一个元组需要加上，传入的参数要保持一致</code></pre><p>2：通过字典进程传参：</p><pre><code>multiprocessing.Process(target = coding , kwargs = &#123;传递的进程变量名：传入的参数&#125;)因为用的是字典的要与进程参数对住</code></pre><h2 id="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"><a href="#七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行" class="headerlink" title="七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行"></a>七：在主进程中，怎么堵塞等待子进程完成后，才能继续运行</h2><p>1：把join加入到子进程中，子进程变量.join，形成串联运行完子进程在运行主线线程</p><p>八：Process创建的实例对象的常用的方法有什么？</p><p>1：start（）：启动子进程实例（创建子进程）</p><p>2：join（）：等待子进程执行结束，形成串联</p><p>3：terminate（）：不管任务是否完成，立即终止子进程</p><p>八《一》：    Process常用的属性：</p><p>1：name：当前进程的别名，默认为Process - n ，n为从1开始递增的整数</p><p>2：pid：当前进程的id</p><p>九：编写一个程序，实现创建一个子进程，子进程每一秒打印一次：这是子进程，循环的第n次，打印 的次数是由主进程传递给子进程。</p><pre><code>1：#利用args和kwargs传参import multiprocessingimport timedef ness(num):    for i in range(num):        time.sleep(1)        print(&quot;这个是一个线程&quot;)if __name__ == &#39;__main__&#39;:    # mues = multiprocessing.Process(target= ness,args=(6,))    mues = multiprocessing.Process(target=ness, kwargs=&#123;&quot;num&quot;:6&#125;)    mues.start()2：#利用类方法实现线程import multiprocessingimport timeclass nees():    def __init__(self,name):        super(nees, self).__init__()        self.name = name    def num(self):        for i in range(self.name):            time.sleep(1)            print(&quot;这个是一个子进程&quot;)if __name__ == &#39;__main__&#39;:    num_process = multiprocessing.Process(target=nees)    A=nees(3)    A.num()</code></pre><p>：线程资源竞争问题：</p><p>1：100万次加法，线程1和线程2谁先执行完</p><p>2：线程1计算的结果一定比线程2小吗？</p><p>3：某个线程计算的结果有没有可能小于100万？为什么：</p><p>​            1：不一定谁先执行完，因为线程是由cpu进行调度的，没有执行顺序那个先执行完都是不一定的</p><p>​            2：不一定，因为没办法知道那个线程能先执行完，所有没有办法知道执行的时间，没有办法知道执行的大小</p><p>​            3：有的，因为多线程共享全局变量，再赋予全局变量的时候，线程一和线程二计算的先后没有办法确定下来，当线程一计算的多时，线程二计算的少时，线程一又把线程二中的值共享过来这时就不安之前的顺序的，会小于100万</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;多线程任务&quot;&gt;&lt;a href=&quot;#多线程任务&quot; class=&quot;headerlink&quot; title=&quot;多线程任务&quot;&gt;&lt;/a&gt;多线程任务&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数名&lt;/th&gt;
&lt;th&gt;使用的方法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    <category term="python高级" scheme="https://xiaoyvlongoing.github.io/categories/python%E9%AB%98%E7%BA%A7/"/>
    
    
    <category term="python高级" scheme="https://xiaoyvlongoing.github.io/tags/python%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>网络编程</title>
    <link href="https://xiaoyvlongoing.github.io/2020/02/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BTC/"/>
    <id>https://xiaoyvlongoing.github.io/2020/02/10/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8BTC/</id>
    <published>2020-02-10T06:47:40.000Z</published>
    <updated>2021-06-10T00:50:38.943Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络编程TC"><a href="#网络编程TC" class="headerlink" title="网络编程TC"></a>网络编程TC</h2><p>[TOC]</p><h2 id="P客户端"><a href="#P客户端" class="headerlink" title="P客户端"></a>P客户端</h2><table><thead><tr><th align="center">变量名称</th><th>变量使用方法</th></tr></thead><tbody><tr><td align="center">ifconfig</td><td>查看网络的ip</td></tr><tr><td align="center">ping</td><td>查看网络是否连通</td></tr><tr><td align="center">socket</td><td>网络编程包</td></tr><tr><td align="center">socket.AF_INET</td><td>ip地址</td></tr><tr><td align="center">socket.SOCK_STREAM</td><td>端口</td></tr><tr><td align="center">tcp_clien_socket.connect</td><td>客户端：传入ip和端口，用于建立与指定指定socket的连接</td></tr><tr><td align="center">tcp_clien_socket.send（字符串.encode(encoding=”utf-8”)）</td><td>send（）：把数据组转换成二进制，encode：写入编辑的字符串和要转成数据组的函数：encode（encoding = “”）</td></tr><tr><td align="center">字符串.encode(encoding=”utf-8”)）</td><td>encode：把字符串转换成数据组</td></tr><tr><td align="center">tcp_clien_socket.recv(数值)</td><td>套接字最大传入数据数值，接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞</td></tr><tr><td align="center">.decode()</td><td>对服务端发来的数据进行解码</td></tr><tr><td align="center">conn_socket.close()</td><td>关闭套接字</td></tr></tbody></table><h2 id="网络编程TCP服务端"><a href="#网络编程TCP服务端" class="headerlink" title="网络编程TCP服务端"></a>网络编程TCP服务端</h2><table><thead><tr><th>变量名称</th><th>变量使用方法</th></tr></thead><tbody><tr><td>socket</td><td>网络编程包</td></tr><tr><td>bind</td><td>服务端：创建ip和端口</td></tr><tr><td>tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)</td><td>端口的复用</td></tr><tr><td>tcp_sever_socket.listen（数值）</td><td>设置端口监听功能监听多少个数值上限</td></tr><tr><td>tcp_server_socket.accept()</td><td><code>accept()</code>接受一个客户端的连接请求，接收的数据用于recv，并返回一个新的套接字，用于了send分开数据和ip不同于以上<code>socket()</code>返回的用于监听和接受客户端的连接请求的套接字；，</td></tr></tbody></table><h2 id="扩展函数："><a href="#扩展函数：" class="headerlink" title="扩展函数："></a>扩展函数：</h2><table><thead><tr><th>函数</th><th>函数表达意思</th></tr></thead><tbody><tr><td>client_socket.recv(1024).<strong>decode()</strong></td><td>decode()：将查询的值翻译成其他的值，以其他形式表现出来</td></tr><tr><td><strong>os.listdir</strong></td><td>方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</td></tr><tr><td><strong>os.path.getsize()</strong></td><td><strong>获得文件的大小（字节）</strong></td></tr><tr><td>f.read（）</td><td>从文件指针所在的位置开始读</td></tr><tr><td>isdigit</td><td></td></tr></tbody></table><pre><code></code></pre><h2 id="静态服务器："><a href="#静态服务器：" class="headerlink" title="静态服务器："></a>静态服务器：</h2><table><thead><tr><th>函数</th><th>函数定义</th></tr></thead><tbody><tr><td>.open（“地址”，“要读或写”）</td><td>用于打开一个文件，创建一个 file 对象，相关的方法才可以调用它进行读写。</td></tr><tr><td>.read()</td><td>读取文件信息内容</td></tr><tr><td>英文：response</td><td>翻译：相应</td></tr><tr><td>英文：Server</td><td>翻译：服务器</td></tr><tr><td>localhost:8080</td><td>浏览器查看</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="使用多线程多客户端连接服务器，多发送信息"><a href="#使用多线程多客户端连接服务器，多发送信息" class="headerlink" title="使用多线程多客户端连接服务器，多发送信息"></a>使用多线程多客户端连接服务器，多发送信息</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">def</span> <span class="token function">duoe_sock</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        recv_data <span class="token operator">=</span> code_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        code_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"niaho1"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"quit"</span> <span class="token operator">or</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"连接关闭"</span><span class="token punctuation">)</span>    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_evelt_socket <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_evelt_socket<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        code_sock<span class="token punctuation">,</span>ip_lies <span class="token operator">=</span> tcp_evelt_socket<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip:"</span><span class="token punctuation">,</span>ip_lies<span class="token punctuation">)</span>        smeus_pskd <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>duoe_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>code_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smeus_pskd<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    code_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器返回固态页面："><a href="#静态服务器返回固态页面：" class="headerlink" title="静态服务器返回固态页面："></a>静态服务器返回固态页面：</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_serer_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_serer_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        clien_sock<span class="token punctuation">,</span>client_abbr <span class="token operator">=</span> tcp_serer_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        clien_request_data <span class="token operator">=</span> clien_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">10230</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>clien_request_data<span class="token punctuation">)</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"./nksld.html"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#打开文件夹有会报错，异常处理</span>            <span class="token comment" spellcheck="true"># f = open("当前文件夹","rb")</span>            file_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 应答行</span>        response_line <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>        <span class="token comment" spellcheck="true"># 头</span>        response_header <span class="token operator">=</span> <span class="token string">"Server:pwd\r\n"</span>        <span class="token comment" spellcheck="true"># 体</span>        response_body <span class="token operator">=</span> file_data<span class="token comment" spellcheck="true">#界面的数据</span>        <span class="token comment" spellcheck="true">#应答数据</span>        response_data<span class="token operator">=</span> <span class="token punctuation">(</span>response_line <span class="token operator">+</span> response_header <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> response_body        clien_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>response_data<span class="token punctuation">)</span>        clien_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器返回指定页面"><a href="#静态服务器返回指定页面" class="headerlink" title="静态服务器返回指定页面"></a>静态服务器返回指定页面</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> f_data                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器多线程任务"><a href="#静态服务器多线程任务" class="headerlink" title="静态服务器多线程任务"></a>静态服务器多线程任务</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>    recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>            tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>            tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>            tecponse_toes <span class="token operator">=</span> f_data            tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes            tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        tcp_sock<span class="token punctuation">,</span>ip_sock <span class="token operator">=</span> tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span>ip_sock<span class="token punctuation">)</span>        nues_sock <span class="token operator">=</span>  threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>nuws_sock<span class="token punctuation">,</span>args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器对象调用"><a href="#静态服务器对象调用" class="headerlink" title="静态服务器对象调用"></a>静态服务器对象调用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">import</span> socket<span class="token keyword">class</span> <span class="token class-name">Pues_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>tcp_server_sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">nuws_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>tcp_sock<span class="token punctuation">)</span><span class="token punctuation">:</span>        recv_data <span class="token operator">=</span> tcp_sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        spli_dat <span class="token operator">=</span> recv_data<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>spli_dat<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"浏览器关闭"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> spli_dat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> data <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">:</span>                data <span class="token operator">=</span> <span class="token string">"/001.jpg"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"."</span><span class="token operator">+</span> data<span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                    f_data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 404 NG\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> <span class="token string">"404 NG\r\n"</span>                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine<span class="token operator">+</span>tecponse_toue<span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token operator">+</span>tecponse_toes<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tecponse_hine <span class="token operator">=</span> <span class="token string">"HTTP/1.1 200 OK\r\n"</span>                tecponse_toue <span class="token operator">=</span> <span class="token string">"Server : long\r\n"</span>                tecponse_toes <span class="token operator">=</span> f_data                tecponse_zhen <span class="token operator">=</span> <span class="token punctuation">(</span>tecponse_hine  <span class="token operator">+</span> tecponse_toue<span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> tecponse_toes                tcp_sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>tecponse_zhen<span class="token punctuation">)</span>            <span class="token keyword">finally</span><span class="token punctuation">:</span>                tcp_sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">nuse_sock</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            tcp_sock<span class="token punctuation">,</span> ip_sock <span class="token operator">=</span> self<span class="token punctuation">.</span>tcp_server_sock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ip"</span><span class="token punctuation">,</span> ip_sock<span class="token punctuation">)</span>            nues_sock <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>nuws_sock<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>tcp_sock<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            nues_sock<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    nues <span class="token operator">=</span> Pues_sock<span class="token punctuation">(</span><span class="token punctuation">)</span>    nues<span class="token punctuation">.</span>nuse_sock<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="静态服务器变换端口号"><a href="#静态服务器变换端口号" class="headerlink" title="静态服务器变换端口号"></a>静态服务器变换端口号</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> threading<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取执行python程序的终端命令行参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token comment" spellcheck="true"># 判断参数的类型，设置端口号必须是整型</span>    <span class="token keyword">if</span> <span class="token operator">not</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式错误 python3 xxx.py 9090"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    port <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建服务器对象</span>    <span class="token comment" spellcheck="true"># 给Web服务器类的初始化方法添加一个端口号参数，用于绑定端口号</span>    my_web_server <span class="token operator">=</span> HttpWebServer<span class="token punctuation">(</span>port<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 启动服务器</span>    my_web_server<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="TCP协议是什么？提示：TCP定义及特点"><a href="#TCP协议是什么？提示：TCP定义及特点" class="headerlink" title="TCP协议是什么？提示：TCP定义及特点"></a>TCP协议是什么？提示：TCP定义及特点</h2><h4 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h4><p>传输控制协议，是一种面向连接，可靠的，基于字节流的传输层通讯协议</p><h5 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h5><p>面向连接：通信双方必须先建立好连接才能进行数据的传输，数据传输完成后，双方必须断开连接，以释放系统资源</p><p>可靠的通信方式</p><p>基于字节流</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-TCP特点是什么？"><a href="#2-TCP特点是什么？" class="headerlink" title="2. TCP特点是什么？"></a>2. TCP特点是什么？</h2><p>提示：TCP特点及解释说明</p><p>基于字节流的</p><p>面向连接</p><p>可靠通信</p><p>在网络状况不佳的时候尽量降低系统由于重传带来的宽开销</p><p>通信连接维护是面向通信的两个端点，而不考虑中间网段和节点</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h2 id="3-在TCP客户端使用connect的作用是什么？"><a href="#3-在TCP客户端使用connect的作用是什么？" class="headerlink" title="3. 在TCP客户端使用connect的作用是什么？"></a>3. 在TCP客户端使用connect的作用是什么？</h2><p>提示：connect的作用及connect()函数的参数形式</p><p>connenct：用于建立与指定指定socket的连接，对于流类套接口（SOCK—STREAMl类型），利用名字来与一个远程主机建立连接，一但套用接口调用成功，他就能收发数据，对于数据报类套接口（SOCK—STREAMl类型），则设置成一个缺省的目的并用它来进行后序的send与recv调用</p><h3 id="4-在TCP服务器中listen的作用是什么？"><a href="#4-在TCP服务器中listen的作用是什么？" class="headerlink" title="4. 在TCP服务器中listen的作用是什么？"></a>4. 在TCP服务器中listen的作用是什么？</h3><p>提示：listen()函数的作用及参数含义、</p><p>在网络中服务端是被动的，客户是主动的，被动要用listen来监听，listen（）作用是将socket（）得到一个sockfd被动监听的套接字，来通知内核来完成连接</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="5-简述tcp客户端创建的流程。"><a href="#5-简述tcp客户端创建的流程。" class="headerlink" title="5. 简述tcp客户端创建的流程。"></a>5. 简述tcp客户端创建的流程。</h2><p>提示：参考课件代码说出客户端创建步骤</p><p>创建一个套接字协议用：connenct赖建立连接</p><p>导入IP地址可端口</p><p>创建发送的数据用send（数据encode），先把字符串转换成数据组，在把数据组装换成二进制</p><p>设置最大字节数据：recv（）</p><p>接收客户端发来的数据用decode来解码</p><p>关闭套接字用close</p><h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h2 id="6-recv函数的参数表示什么含义？"><a href="#6-recv函数的参数表示什么含义？" class="headerlink" title="6. recv函数的参数表示什么含义？"></a>6. recv函数的参数表示什么含义？</h2><p>提示：recv()函数的作用及参数含义</p><p>接收来自socket缓存区对字节数据，当缓存区没有数值时会一直进行阻塞，直到有数据时进行读取，远程关闭并读取所有数据之后会返回空字符串</p><h2 id="7-简述TCP服务器创建的流程、"><a href="#7-简述TCP服务器创建的流程、" class="headerlink" title="7. 简述TCP服务器创建的流程、"></a>7. 简述TCP服务器创建的流程、</h2><p>提示：参考课件代码，说出服务器创建流程</p><p>1：创建套接字，进行网络协议</p><p>2：进行端口复用</p><p>3：进行bind进行套接字协议</p><p>4：进行与服务端监听连接的最大数值，listen</p><p>5：accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p><p>6：进行设置recv进行数据的阻塞，</p><p>7：给客户端发送一个数据用send（encode）来转成二进制</p><p>8：接收客户端发来的数据，用decode来进行解码</p><h2 id="8-accept的返回值分别代表的什么？"><a href="#8-accept的返回值分别代表的什么？" class="headerlink" title="8. accept的返回值分别代表的什么？"></a>8. accept的返回值分别代表的什么？</h2><p>提示：accept()函数的作用，及返回值的形式和返回值的含义</p><p>accept（）接收数据再返回一个新的socket字，接收的数据用于recv，返回客户端的数据用于了send分开数据和ip，</p><h2 id="9-完成TCP客户端的编写。"><a href="#9-完成TCP客户端的编写。" class="headerlink" title="9. 完成TCP客户端的编写。"></a>9. 完成TCP客户端的编写。</h2><p>服务器的ip和端口号需手动输入</p><p>要发送的信息需要手动输入</p><p>接收服务器返回的数据，并打印。</p><p>请在下方的注释下补充代码：</p><p>​       # 导入socket模块</p><pre><code>import socketif __name__ == &#39;__main__&#39;:    tcp_codne_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)    tcp_codne_socket.connect((&quot;&quot;,8080))    tcp_codne_socket.send(&quot;&quot;.encode())    cone_recv = tcp_codne_socket.recv(1024)    print(cone_recv.decode())    tcp_codne_socket.close()</code></pre><h2 id="-4"><a href="#-4" class="headerlink" title=""></a></h2><h2 id="10-完成TCP服务的的编写"><a href="#10-完成TCP服务的的编写" class="headerlink" title="10. 完成TCP服务的的编写"></a>10. 完成TCP服务的的编写</h2><p>请在下方注释下补充代码：</p><p>  # 导入socket模块</p><pre><code>import socketif __name__ == &#39;__main__&#39;:    tcp_evens_socket = socket.socket(socket.AF_INET,socket.SOCK_STREAM)    tcp_evens_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)    tcp_evens_socket.bind((&quot;&quot;,8080))    tcp_evens_socket.listen(138)    coet_socket,ip_mes = tcp_evens_socket.accept()    recv_data = coet_socket.recv(1025)    print(recv_data.decode())    coet_socket.send(&quot;&quot;.encode())    coet_socket.close()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络编程TC&quot;&gt;&lt;a href=&quot;#网络编程TC&quot; class=&quot;headerlink&quot; title=&quot;网络编程TC&quot;&gt;&lt;/a&gt;网络编程TC&lt;/h2&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;P客户端&quot;&gt;&lt;a href=&quot;#P客户端&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="python高级" scheme="https://xiaoyvlongoing.github.io/categories/python%E9%AB%98%E7%BA%A7/"/>
    
    
    <category term="python高级" scheme="https://xiaoyvlongoing.github.io/tags/python%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>文本摘要项目</title>
    <link href="https://xiaoyvlongoing.github.io/2020/02/10/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://xiaoyvlongoing.github.io/2020/02/10/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81%E9%A1%B9%E7%9B%AE/</id>
    <published>2020-02-10T06:47:40.000Z</published>
    <updated>2021-06-12T14:13:56.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1：文本摘要项目理论"><a href="#1：文本摘要项目理论" class="headerlink" title="1：文本摘要项目理论"></a><strong>1：文本摘要项目理论</strong></h2><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p><strong>文本摘要思想</strong>：就是一个长文本把重要的摘要出来</p><h5 id="1：NLP角度来看文本摘要任务，主流的概括两大方法："><a href="#1：NLP角度来看文本摘要任务，主流的概括两大方法：" class="headerlink" title="1：NLP角度来看文本摘要任务，主流的概括两大方法："></a>1：NLP角度来看文本摘要任务，主流的概括两大方法：</h5><ul><li><p>抽取式摘要：Extraction-based（从文本中抽取）：直接从原文中选择若干条重要的句子, 并对它们进行排序和重组, 以形成摘要的方法.</p><ul><li><strong>无监督抽取</strong>：不需要平行语料, 节省了人工标记的成本. 大体上有如下几种:<ul><li>Lead</li><li>Centroid</li><li>ClusterCMRW</li><li>TextRank：最经典</li></ul></li><li><strong>有监督抽取：</strong>将文本摘要抽象成二分类问题, 通过神经网络来学习句子及其标签之间的对应关系. 需要平行语料, 需要人工标记的成本. 常见方法有如下几种<ul><li>R2N2</li><li>NeuralSum</li><li>SummaRuNNer</li><li><strong>BertSum</strong>：原本用来计算网页之间的关联性，后来被应用在句子上，句子之间反复传播，选出最关键的语句进行排序。因为文章总有中心句，而textrank就试图找出这个中心句。</li></ul></li><li>取式<strong>缺点</strong>：主要考虑单词词频，没有过多的语义信息，所以无法建立段落中的完整语义信息</li></ul></li><li><p><strong>生成式摘要: Abstraction-based：</strong>需要通过<strong>转述、同义替换、句子缩写</strong>等生成。</p><ul><li>生成式神经网络模型的基本结构主要由<strong>编码器（encoder）和解码器（decoder）</strong>组成，编码和解码都由神经网络实现。<ul><li><strong>编码器</strong>负责将输入的原文本编码成一个<strong>向量C（context），</strong></li><li><strong>而解码器</strong>负责从这个<strong>向量C</strong>提取<strong>重要信息、加工剪辑，生成文本摘要。</strong></li><li><strong>Sequence-to-Sequence</strong>（以下简称Seq2Seq），被广泛应用于存在输入序列和输出序列的场景，比如机器翻译（一种语言序列到另一种语言序列）、image captioning（图片像素序列到语言序列）、对话机器人（如问题到回答）等</li></ul></li></ul></li></ul><h4 id="2：数据的处理："><a href="#2：数据的处理：" class="headerlink" title="2：数据的处理："></a>2：数据的处理：</h4><p>一般来说, 在任何项目中, 面对原始数据都要进行接下来的几点工作:</p><ul><li>删除空值.</li><li>删除”脏”数据.<ul><li>在这个数据集中的脏数据为：<ul><li>有很多的技师说和，车主说</li><li>文本中有很多的图片字样和语音字样</li><li>有很多进口，车型，还有一些符号</li></ul></li></ul></li><li>删除特定字符的集合.</li><li>分词.</li><li>完成字符到id的映射.</li><li>完成padding, cutting的工作.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdtrain_path <span class="token operator">=</span> <span class="token string">'train.csv'</span>test_path <span class="token operator">=</span> <span class="token string">'test.csv'</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'**********************'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_path<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="打印："><a href="#打印：" class="headerlink" title="打印："></a>打印：</h4><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">82943</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">82942</span>Data columns <span class="token punctuation">(</span>total <span class="token number">6</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">81642</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">82943</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">82941</span> non<span class="token operator">-</span>null  object <span class="token number">5</span>   Report    <span class="token number">82873</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">3.8</span><span class="token operator">+</span> MB<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'pandas.core.frame.DataFrame'</span><span class="token operator">></span>RangeIndex<span class="token punctuation">:</span> <span class="token number">20000</span> entries<span class="token punctuation">,</span> <span class="token number">0</span> to <span class="token number">19999</span>Data columns <span class="token punctuation">(</span>total <span class="token number">5</span> columns<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#   Column    Non-Null Count  Dtype </span> <span class="token number">0</span>   QID       <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">1</span>   Brand     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">2</span>   Model     <span class="token number">19987</span> non<span class="token operator">-</span>null  object <span class="token number">3</span>   Question  <span class="token number">20000</span> non<span class="token operator">-</span>null  object <span class="token number">4</span>   Dialogue  <span class="token number">20000</span> non<span class="token operator">-</span>null  objectdtypes<span class="token punctuation">:</span> object<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>memory usage<span class="token punctuation">:</span> <span class="token number">781.4</span><span class="token operator">+</span> KB</code></pre><h4 id="3：TextRank：算法理论基础"><a href="#3：TextRank：算法理论基础" class="headerlink" title="3：TextRank：算法理论基础"></a>3：TextRank：算法理论基础</h4><p>对比于衡量网页重要性的PageRank算法, TextRank算法用于衡量哪些单词是关键词, 类比之下的算法思想也就很好理解了:</p><ul><li>如果一个单词出现在很多单词的后面, 就是它和很多单词有关联, 那么说明这个单词比较重要.</li><li>如果一个TextRank值很高的单词后面跟着另一个单词, 那么后面这个单词的TextRank值也会相应的被提高.</li></ul><h4 id="3-1：TextRank算法代码实践"><a href="#3-1：TextRank算法代码实践" class="headerlink" title="3.1：TextRank算法代码实践"></a>3.1：TextRank算法代码实践</h4><ul><li>在本小节中, 我们仅以示例代码跑通几段小程序, 让同学们掌握如何具体在代码层面用TextRank.<ul><li>关键词抽取(keyword extraction)：是指从文本中确定一些能够描述文档含义的关键术语的过程<ul><li>对关键词抽取而言, 用于构建顶点集的文本单元可以使句子中的一个或多个字. 根据这些字之间的关系构建边.</li><li>根据任务的需要, 可以使用语法过滤器(syntactic filters)对顶点集进行优化. 语法过滤器的主要作用是将某一类或者某几类词性的字过滤出来作为顶点集.</li></ul></li><li>关键短语抽取(keyphrase extraction)</li><li>关键句抽取(sentence extraction)</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># coding=utf-8</span><span class="token comment" spellcheck="true"># 导入textrank4zh的相关工具包</span><span class="token keyword">from</span> textrank4zh <span class="token keyword">import</span> TextRank4Keyword<span class="token punctuation">,</span> TextRank4Sentence<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># 导入常用工具包</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true">#关键词抽取</span><span class="token keyword">def</span> <span class="token function">keywords_extraction</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># allow_speech_tags : 词性列表, 用于过滤某些词性的词</span>    tr4w <span class="token operator">=</span> TextRank4Keyword<span class="token punctuation">(</span>allow_speech_tags<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'nr'</span><span class="token punctuation">,</span> <span class="token string">'nrfg'</span><span class="token punctuation">,</span> <span class="token string">'ns'</span><span class="token punctuation">,</span> <span class="token string">'nt'</span><span class="token punctuation">,</span> <span class="token string">'nz'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>    <span class="token comment" spellcheck="true"># window: 窗口大小, int, 用来构造单词之间的边, 默认值为2</span>    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>    <span class="token comment" spellcheck="true"># vertex_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的>哪一个来构造pagerank对应的图中的节点</span>    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>    <span class="token comment" spellcheck="true"># edge_source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪>一个来构造pagerank对应的图中的节点之间的边</span>    <span class="token comment" spellcheck="true">#默认值为'no_stop_words', 可选值为'no_filter', 'no_stop_words', 'all_filters', 边的构造要结合window参数</span>    <span class="token comment" spellcheck="true"># pagerank_config: pagerank算法参数配置, 阻尼系数为0.85</span>    tr4w<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text<span class="token operator">=</span>text<span class="token punctuation">,</span> window<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> lower<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> vertex_source<span class="token operator">=</span><span class="token string">'all_filters'</span><span class="token punctuation">,</span>                 edge_source<span class="token operator">=</span><span class="token string">'no_stop_words'</span><span class="token punctuation">,</span> pagerank_config<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'alpha': 0.85, &amp;#125;)</span>    <span class="token comment" spellcheck="true"># num: 返回关键词数量</span>    <span class="token comment" spellcheck="true"># word_min_len: 词的最小长度, 默认值为1    </span>    keywords <span class="token operator">=</span> tr4w<span class="token punctuation">.</span>get_keywords<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> word_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">#提取重要关键短句</span>    <span class="token comment" spellcheck="true"># keywords_num: 抽取的关键词数量</span>    <span class="token comment" spellcheck="true"># min_occur_num: 关键短语在文中的最少出现次数</span>    <span class="token comment" spellcheck="true">#keyphrases = tr4w.get_keyphrases(keywords_num=6, min_occur_num=1)</span>        <span class="token comment" spellcheck="true">#提取关键句</span>    <span class="token comment" spellcheck="true">#tr4s = TextRank4Sentence()</span>        <span class="token comment" spellcheck="true"># text: 文本内容, 字符串</span>    <span class="token comment" spellcheck="true"># lower: 是否将英文文本转换为小写, 默认值为False</span>    <span class="token comment" spellcheck="true"># source: 选择使用words_no_filter, words_no_stop_words, words_all_filters中的哪一个来                生成句子之间的相似度</span>    <span class="token comment" spellcheck="true">#默认值为'all_filters', 可选值为'no_filter', 'no_stop_words', 'all_filters'</span>    <span class="token comment" spellcheck="true">#tr4s.analyze(text, lower=True, source='all_filters')</span>    <span class="token comment" spellcheck="true"># 获取最重要的num个长度大于等于sentence_min_len的句子用来生成摘要</span>    <span class="token comment" spellcheck="true">#keysentences = tr4s.get_key_sentences(num=3, sentence_min_len=6)</span>                <span class="token comment" spellcheck="true"># 返回关键词</span>    <span class="token keyword">return</span> keywords<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>    <span class="token comment" spellcheck="true">#关键词抽取</span>    keywords<span class="token operator">=</span>keywords_extraction<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span></code></pre><h5 id="打印：-1"><a href="#打印：-1" class="headerlink" title="打印："></a>打印：</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#关键词抽取</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '小行星', 'weight': 0.05808441467341854&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '天文台', 'weight': 0.05721653775742513&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '命名', 'weight': 0.0485177005159723&amp;#125;,</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国', 'weight': 0.045716478124251815&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '中国科学院', 'weight': 0.037818937836996636&amp;#125;, </span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'word': '国家', 'weight': 0.03438059254484016&amp;#125;]</span><span class="token comment" spellcheck="true">#提取重要关键短句</span><span class="token punctuation">[</span><span class="token string">'小行星命名'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#提取关键句</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 4, 'sentence': '2018年9月25日，经国家天文台申报，国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，正式将该小行星命名为“周又元星”', 'weight': 0.2281040325096452&amp;#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 3, 'sentence': '”据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，获得国际永久编号第120730号', 'weight': 0.2106246105971721&amp;#125;,</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'index': 1, 'sentence': '4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂', 'weight': 0.2020923401661083&amp;#125;]</span></code></pre><h4 id="3-2：基于jieba的TextRank算法"><a href="#3-2：基于jieba的TextRank算法" class="headerlink" title="3.2：基于jieba的TextRank算法"></a>3.2：基于jieba的TextRank算法</h4><ul><li>jieba工具不仅仅可以用来分词, 进行词性分析. 也可以用来完成TextRank.</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> jieba<span class="token punctuation">.</span>analyse<span class="token keyword">def</span> <span class="token function">jieba_keywords_textrank</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    keywords <span class="token operator">=</span> jieba<span class="token punctuation">.</span>analyse<span class="token punctuation">.</span>textrank<span class="token punctuation">(</span>text<span class="token punctuation">,</span> topK<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> keywords<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    text <span class="token operator">=</span> <span class="token string">"来源：中国科学报本报讯（记者肖洁）又有一位中国科学家喜获小行星命名殊荣！4月19日下午，中国科学院国家天文台在京举行“周又元星”颁授仪式，"</span> \           <span class="token string">"我国天文学家、中国科学院院士周又元的弟子与后辈在欢声笑语中济济一堂。国家天文台党委书记、"</span> \           <span class="token string">"副台长赵刚在致辞一开始更是送上白居易的诗句：“令公桃李满天下，何须堂前更种花。”"</span> \           <span class="token string">"据介绍，这颗小行星由国家天文台施密特CCD小行星项目组于1997年9月26日发现于兴隆观测站，"</span> \           <span class="token string">"获得国际永久编号第120730号。2018年9月25日，经国家天文台申报，"</span> \           <span class="token string">"国际天文学联合会小天体联合会小天体命名委员会批准，国际天文学联合会《小行星通报》通知国际社会，"</span> \           <span class="token string">"正式将该小行星命名为“周又元星”。"</span>    <span class="token comment" spellcheck="true"># 基于jieba的textrank算法实现</span>    keywords <span class="token operator">=</span> jieba_keywords_textrank<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>keywords<span class="token punctuation">)</span></code></pre><ul><li><h6 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果:"></a>输出结果:</h6></li></ul><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'小行星'</span><span class="token punctuation">,</span> <span class="token string">'命名'</span><span class="token punctuation">,</span> <span class="token string">'国际'</span><span class="token punctuation">,</span> <span class="token string">'中国'</span><span class="token punctuation">,</span> <span class="token string">'国家'</span><span class="token punctuation">,</span> <span class="token string">'天文学家'</span><span class="token punctuation">]</span></code></pre><h2 id="2：-TextRank实现baseline-0模型"><a href="#2：-TextRank实现baseline-0模型" class="headerlink" title="2： TextRank实现baseline-0模型"></a><strong>2： TextRank实现baseline-0模型</strong></h2><h4 id="数据预处理："><a href="#数据预处理：" class="headerlink" title="数据预处理："></a>数据预处理：</h4><ul><li><p>我们在第一章的1.2小节曾经讨论过原始数据存在的各种问题, 这些问题都需要在数据预处理的这个环节一一解决. 接下来按照如下步骤进行处理:</p><ul><li><p>第一步: 提取特定的文本.</p></li><li><p>第二步: 删除”脏”数据.</p></li><li><p>第三步: 删除特定的字符集合.</p></li><li><p>第四步: 删除特殊位置的特定字符.</p></li></ul></li></ul><h4 id="第一步-提取特定的文本"><a href="#第一步-提取特定的文本" class="headerlink" title="第一步: 提取特定的文本."></a>第一步: 提取特定的文本.</h4><p>面对原始语料, 并不是说我们必须要全部纳入模型中, 可以根据业务需求, 或者程序员的项目经验, 或许出于尝试的态度, 只选取一部分出来作为我们后续模型的输入数据.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><ul><li><h6 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果:"></a>输出结果:</h6></li></ul><pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>预处理后的第一条句子<span class="token punctuation">:</span>  技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：不需要。技师说：你这是更换的部件有问题。技师说：是非常重吗。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>。</code></pre><ul><li><h5 id="数据进行分割形成小型数据"><a href="#数据进行分割形成小型数据" class="headerlink" title="数据进行分割形成小型数据"></a>数据进行分割形成小型数据</h5></li></ul><pre class=" language-python"><code class="language-python">nf <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5000</span><span class="token punctuation">]</span>nf<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">'w'</span><span class="token punctuation">)</span>dfa  <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"dev.csv"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>dfa<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>打印结果</p><h4 id="第二步-删除”脏”数据"><a href="#第二步-删除”脏”数据" class="headerlink" title="第二步: 删除”脏”数据."></a>第二步: 删除”脏”数据.</h4><ul><li>关于什么是”脏”数据是个千人千面的问题, 我们在第一章中也讨论过. 这一步也仅仅处理一个baseline的级别.</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><ul><li><h5 id="处理后的数据"><a href="#处理后的数据" class="headerlink" title="处理后的数据"></a>处理后的数据</h5></li></ul><pre><code>预处理前的第一条句子： 技师说：[语音]|车主说：新的都换了|车主说：助力泵，方向机|技师说：[语音]|车主说：换了方向机带的有|车主说：[图片]|技师说：[语音]|车主说：有助力就是重，这车要匹配吧|技师说：不需要|技师说：你这是更换的部件有问题|车主说：跑快了还好点，就倒车重的很。|技师说：是非常重吗|车主说：是的，累人|技师说：[语音]|车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。|技师说：[语音]|技师说：[语音]预处理后的第一条句子:  ：[]。：[]。：[]。：不需要。：你这是更换的部件有问题。：是非常重吗。：[]。：[]。：[]</code></pre><h4 id="第三步-删除特定的字符集合"><a href="#第三步-删除特定的字符集合" class="headerlink" title="第三步: 删除特定的字符集合."></a>第三步: 删除特定的字符集合.</h4><ul><li>1: 我们发现原始数据文件中有若干的”进口”, “海外”字样, 可认为是需要删除的特定字符.</li><li>2: 为了后续处理文本容易, 除了汉字还有数字, 英文字母, 特定的几个标点符号, 其他都删除.</li><li>3: 将标点符号的半角格式, 转变成全角格式.</li><li>4: 将问号, 感叹号, 转变成句号.</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理前的第一条句子：'</span><span class="token punctuation">,</span> texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'********************************'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据预处理</span>    res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'预处理后的第一条句子: '</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><h5 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h5><pre class=" language-python"><code class="language-python">预处理前的第一条句子： 技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：新的都换了<span class="token operator">|</span>车主说：助力泵，方向机<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：换了方向机带的有<span class="token operator">|</span>车主说：<span class="token punctuation">[</span>图片<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：有助力就是重，这车要匹配吧<span class="token operator">|</span>技师说：不需要<span class="token operator">|</span>技师说：你这是更换的部件有问题<span class="token operator">|</span>车主说：跑快了还好点，就倒车重的很。<span class="token operator">|</span>技师说：是非常重吗<span class="token operator">|</span>车主说：是的，累人<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>车主说：我觉得也是，可是车主是以前没这么重，选吧助理泵换了不行，又把放向机换了，现在还这样就不知道咋和车主解释。<span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span><span class="token operator">|</span>技师说：<span class="token punctuation">[</span>语音<span class="token punctuation">]</span>预处理后的第一条句子<span class="token punctuation">:</span>  。。。不需要。你这是更换的部件有问题。是非常重吗。。。。</code></pre><h3 id="2-1：TextRank模型代码实现：进行数数的机器学习模型"><a href="#2-1：TextRank模型代码实现：进行数数的机器学习模型" class="headerlink" title="2.1：TextRank模型代码实现：进行数数的机器学习模型"></a>2.1：TextRank模型代码实现：进行数数的机器学习模型</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入正则表达式工具包, 用来删除特定模式的数据</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 第一步要处理的代码</span>    <span class="token comment" spellcheck="true"># 1. 将sentence按照'|'分句，并只提取技师的话</span>    sub_jishi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 按照'|'字符将车主和用户的对话分离</span>    sub <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 遍历每个子句</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果不是以句号结尾, 增加一个句号</span>        <span class="token keyword">if</span> <span class="token operator">not</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'。'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token string">'。'</span>        <span class="token comment" spellcheck="true"># 只使用技师说的句子</span>        <span class="token keyword">if</span> sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'技师'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sub_jishi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 拼接成字符串并返回</span>    sentence <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sub_jishi<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步中添加的两个处理, 利用正则表达式re工具</span>    <span class="token comment" spellcheck="true"># 2. 删除1. 2. 3. 这些标题</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 删除一些无关紧要的词以及语气助词</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|呢|吧|哈|啊|啦"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步中添加的4个处理</span>    <span class="token comment" spellcheck="true"># 4. 删除带括号的 进口 海外</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 删除除了汉字数字字母和，！？。.- 以外的字符</span>    r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 半角变为全角</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 问号叹号变为句号</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"？"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"！"</span><span class="token punctuation">,</span> <span class="token string">"。"</span><span class="token punctuation">)</span>    sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第四步添加的删除特定位置的特定字符</span>    <span class="token comment" spellcheck="true"># 8. 删除句子开头的逗号</span>    <span class="token keyword">if</span> sentence<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'，'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> sentence<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取数据, 并指定编码格式为'utf-8'</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'dev.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    texts <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">500</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 初始化结果存放的列表</span>    results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 初始化textrank4zh类对象</span>    tr4s <span class="token operator">=</span> TextRank4Sentence<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>texts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text <span class="token operator">=</span> texts<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        tr4s<span class="token punctuation">.</span>analyze<span class="token punctuation">(</span>text <span class="token operator">=</span> text<span class="token punctuation">,</span>lower <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span>source <span class="token operator">=</span> <span class="token string">"all_filters"</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token string">""</span>        <span class="token comment" spellcheck="true"># 直接调用函数获取关键语句</span>        <span class="token comment" spellcheck="true"># num=3: 获取重要性最高的3个句子.</span>        <span class="token comment" spellcheck="true"># sentence_min_len=2: 句子的长度最小等于2.</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> tr4s<span class="token punctuation">.</span>get_key_sentences<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> sentence_min_len<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">+=</span> item<span class="token punctuation">.</span>sentence            result <span class="token operator">+=</span> <span class="token string">'。'</span>        results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 间隔100次打印结果</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'result length: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>results<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存结果</span>    df<span class="token punctuation">[</span><span class="token string">'Prediction'</span><span class="token punctuation">]</span> <span class="token operator">=</span> results    <span class="token comment" spellcheck="true"># 提取ID, Report, 和预测结果这3列</span>    df <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'QID'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">,</span> <span class="token string">'Prediction'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 保存结果，这里自动生成一个结果名</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将空行置换为随时联系, 文件保存格式指定为utf-8</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_.csv'</span><span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> df<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'随时联系。'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将处理后的文件保存起来</span>    df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'textrank_result_final_.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span></code></pre><p><strong>打印结果</strong></p><pre class=" language-python"><code class="language-python">i<span class="token operator">=</span> <span class="token number">0</span>i<span class="token operator">=</span> <span class="token number">500</span>i<span class="token operator">=</span> <span class="token number">1000</span>i<span class="token operator">=</span> <span class="token number">1500</span>i<span class="token operator">=</span> <span class="token number">2000</span>i<span class="token operator">=</span> <span class="token number">2500</span>i<span class="token operator">=</span> <span class="token number">3000</span>i<span class="token operator">=</span> <span class="token number">3500</span>i<span class="token operator">=</span> <span class="token number">4000</span>i<span class="token operator">=</span> <span class="token number">4500</span><span class="token number">100</span> 这个故障一般是转向系统的故障，需要重点检查一下车辆的转向灯泡，是否有不亮的。换了就可以解决问题。你好，车辆故障信息代码标识。<span class="token number">200</span> 主要是找到发动机和变速器连接部位的支架以及底盘上的各个胶套，是否存在松旷，造成硬性的接触共振。你好，这种情况主要考虑检查底盘是否存在共振区域。这个需要全面检查，如果之前没有这种问题，可以试驾其他同款车辆，确认是否都有这种问题。<span class="token number">300</span> 您好出厂的时候变速箱油是正常的，在刻度线以内，流出半升之后还是在刻度线以内，所以不用加，亲。加不进去了。顶进去的。<span class="token number">400</span> 那就要去检查一下皮带轮了。如果高于<span class="token number">1200</span>还有，就要检查一下皮带轮。这款发动机在<span class="token number">900</span><span class="token operator">-</span><span class="token number">1100</span>转时确实有一点嗡嗡声。<span class="token number">500</span> 这种单边积水的情况基本上不是泡水的原因，而是有地方密封不严，下雨漏水进去，这个一般是门边密封条老化，或者是防风玻璃漏水，需要关上车门，在车外冲水，在车内慢慢找漏水的地方。海绵积水可以用洗车的泡沫海绵放在上面挤压，能把大部的水吸出来，然后大太阳的时候打开车门得晒一个星期左右，差不多就会干了，主要还是得找出进水的原因，不然弄干水了，下次又进水了，时间长了，海绵会发霉发臭的。我知道是地板上积水，空调管堵塞也是会造成这种情况的，也是需要检查的。<span class="token number">600</span> 您好，需要更换加油管和碳罐，加油时气体排不出去导致跳枪。估计外面找不到改款配件。加油管是改款双管的，原车是单管的。<span class="token number">700</span> 找领导处理，更换新件并赔偿。送保养次数。投诉厂家，欺骗消费者。<span class="token number">800</span> 用T10170和百分表，转曲轴看百分表指针，指针转到顺时针的最顶端是一缸上止点。把曲轴转到一缸上止点，然后挂链条就可以了。直接量一缸的上止点不就可以了，不用管其他缸。</code></pre><h1 id="3：-seq2seq实现baseline-1模型：文本摘要"><a href="#3：-seq2seq实现baseline-1模型：文本摘要" class="headerlink" title="3： seq2seq实现baseline-1模型：文本摘要"></a>3： seq2seq实现baseline-1模型：文本摘要</h1><h3 id="seq2seq实现文本摘要的架构"><a href="#seq2seq实现文本摘要的架构" class="headerlink" title="seq2seq实现文本摘要的架构"></a>seq2seq实现文本摘要的架构</h3><ul><li>首选回顾一下在英译法任务中的经典seq2seq架构图</li></ul><blockquote><ul><li>编码器端负责将输入数据进行编码, 得到中间语义张量.</li><li>解码器端负责一次次的循环解析中间语义张量, 得到最终的结果语句.</li><li>一般来说, 我们将注意力机制添加在解码器端.</li></ul></blockquote><h4 id="对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图"><a href="#对比于英译法任务-我们再来看文本摘要任务下的seq2seq架构图" class="headerlink" title="对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:"></a>对比于英译法任务, 我们再来看文本摘要任务下的seq2seq架构图:</h4><blockquote><ul><li>编码器端负责进行原始文本的编码.</li><li>注意力层结合编码张量和解码器端的当前输入, 得到总体上的内容张量.</li><li>最后在注意力机制的指导下, 解码器端得到完整的单词分布, 解码出当前时间步的单词.</li></ul></blockquote><h3 id="seq2seq实现文本摘要的架构代码实践"><a href="#seq2seq实现文本摘要的架构代码实践" class="headerlink" title="seq2seq实现文本摘要的架构代码实践"></a>seq2seq实现文本摘要的架构代码实践</h3><h4 id="若干工具函数的实现"><a href="#若干工具函数的实现" class="headerlink" title="若干工具函数的实现"></a>若干工具函数的实现</h4><ul><li><p>在这一部分中我们要实现如下几个工具函数:</p><ul><li>第一步: 实现配置函数config.py</li><li>第二步: 实现多核并行处理的函数multi_proc_utils.py</li><li>第三步: 实现参数配置函数params_utils.py</li><li>第四步: 实现保存字典的函数word2vec_utils.py</li><li>第五步: 实现数据加载的函数data_loader.py</li></ul></li><li><h4 id="第一步-实现配置函数config-py"><a href="#第一步-实现配置函数config-py" class="headerlink" title="第一步: 实现配置函数config.py"></a>第一步: 实现配置函数config.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/config.py</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入os工具包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token comment" spellcheck="true"># 设置项目代码库的root路径, 为后续所有的包导入提供便利</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置原始数据文件的路径, 通过以项目root路径为基础, 逐级添加到文件路径</span>train_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train.csv'</span><span class="token punctuation">)</span>test_raw_data_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 停用词路径和jieba分词用户自定义字典路径</span>stop_words_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'stopwords.txt'</span><span class="token punctuation">)</span>user_dict_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'user_dict.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 预处理+切分后的训练测试数据路径</span>train_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_seg_data.csv'</span><span class="token punctuation">)</span>test_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_seg_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将训练集和测试机数据混合后的文件路径</span>merged_seg_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'merged_seg_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 样本与标签分离，并经过pad处理后的数据路径</span>train_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X_pad_data.csv'</span><span class="token punctuation">)</span>train_y_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y_pad_data.csv'</span><span class="token punctuation">)</span>test_x_pad_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X_pad_data.csv'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># numpy转换为数字后最终使用的的数据路径</span>train_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_X.npy'</span><span class="token punctuation">)</span>train_y_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'train_Y.npy'</span><span class="token punctuation">)</span>test_x_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'test_X.npy'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 正向词典和反向词典路径</span>vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'vocab.txt'</span><span class="token punctuation">)</span>reverse_vocab_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'wv'</span><span class="token punctuation">,</span> <span class="token string">'reverse_vocab.txt'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试集结果保存路径</span>result_save_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root_path<span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token string">'result'</span><span class="token punctuation">)</span></code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">/</span>text_summary<span class="token operator">/</span>seq2seq</code></pre><h4 id="第二步-实现多核并行处理的函数multi-proc-utils-py"><a href="#第二步-实现多核并行处理的函数multi-proc-utils-py" class="headerlink" title="第二步: 实现多核并行处理的函数multi_proc_utils.py"></a>第二步: 实现多核并行处理的函数multi_proc_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/multi_proc_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> cpu_count<span class="token punctuation">,</span> Pool<span class="token comment" spellcheck="true"># 计算当前服务器CPU的数量</span>cores <span class="token operator">=</span> cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将分块个数设置为CPU的数量</span>partitions <span class="token operator">=</span> cores<span class="token keyword">print</span><span class="token punctuation">(</span>cores<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parallelize</span><span class="token punctuation">(</span>df<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 数据切分</span>    data_split <span class="token operator">=</span> np<span class="token punctuation">.</span>array_split<span class="token punctuation">(</span>df<span class="token punctuation">,</span> partitions<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始化线程池</span>    pool <span class="token operator">=</span> Pool<span class="token punctuation">(</span>cores<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据分发, 处理, 再合并</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> data_split<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 关闭线程池</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 执行完close后不会有新的进程加入到pool, join函数等待所有子进程结束</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回处理后的数据</span>    <span class="token keyword">return</span> data</code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 当前服务器是一个8核CPU, 32GB内存的机器</span><span class="token number">8</span></code></pre><h4 id="第三步-实现参数配置函数params-utils-py"><a href="#第三步-实现参数配置函数params-utils-py" class="headerlink" title="第三步: 实现参数配置函数params_utils.py"></a>第三步: 实现参数配置函数params_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/params_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> argparse<span class="token keyword">def</span> <span class="token function">get_params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码器和解码器的最大序列长度</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_enc_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--max_dec_len"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder input max sequence length"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 一个训练批次的大小</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--batch_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Batch size"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># seq2seq训练轮数</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--seq2seq_train_epochs"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Seq2seq model training epochs"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 词嵌入大小</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--embed_size"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Words embeddings dimension"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 编码器、解码器以及attention的隐含层单元数</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--enc_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Encoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--dec_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Decoder GRU cell units number"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--attn_units"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Used to compute the attention weights"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>int<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 学习率</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--learning_rate"</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Learning rate"</span><span class="token punctuation">,</span> type<span class="token operator">=</span>float<span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># param是一个字典类型的变量，键为参数名，值为参数值</span>    params <span class="token operator">=</span> vars<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">return</span> params<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> get_params<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></code></pre><ul><li>输出结果:</li></ul><pre class=" language-python"><code class="language-python"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'max_enc_len': 300, 'max_dec_len': 50, 'batch_size': 64, 'seq2seq_train_epochs': </span></code></pre><h4 id="第四步-实现保存字典的函数word2vec-utils-py"><a href="#第四步-实现保存字典的函数word2vec-utils-py" class="headerlink" title="第四步: 实现保存字典的函数word2vec_utils.py"></a>第四步: 实现保存字典的函数word2vec_utils.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/word2vec_utils.py</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> gensim<span class="token punctuation">.</span>models<span class="token punctuation">.</span>word2vec <span class="token keyword">import</span> Word2Vec<span class="token keyword">def</span> <span class="token function">load_embedding_matrix_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从word2vec模型中获取词向量矩阵</span>    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># wv_model.wv.vectors包含词向量矩阵</span>    embedding_matrix <span class="token operator">=</span> wv_model<span class="token punctuation">.</span>wv<span class="token punctuation">.</span>vectors    <span class="token keyword">return</span> embedding_matrix<span class="token keyword">def</span> <span class="token function">get_vocab_from_model</span><span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 从word2vec模型中获取正向和反向词典</span>    <span class="token comment" spellcheck="true"># wv_model_path: word2vec模型的路径</span>    wv_model <span class="token operator">=</span> Word2Vec<span class="token punctuation">.</span>load<span class="token punctuation">(</span>wv_model_path<span class="token punctuation">)</span>    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;index: word for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;word: index for index, word in enumerate(wv_model.wv.index2word)&amp;#125;</span>    <span class="token keyword">return</span> word_to_id<span class="token punctuation">,</span> id_to_word<span class="token keyword">def</span> <span class="token function">save_vocab_as_txt</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 保存字典</span>    <span class="token comment" spellcheck="true"># filename: 目标txt文件路径</span>    <span class="token comment" spellcheck="true"># word_to_id: 要保存的字典</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&amp;#123;&amp;#125;\t&amp;#123;&amp;#125;\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="第五步-实现数据加载的函数data-loader-py"><a href="#第五步-实现数据加载的函数data-loader-py" class="headerlink" title="第五步: 实现数据加载的函数data_loader.py"></a>第五步: 实现数据加载的函数data_loader.py</h4><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/utils/data_loader.py<ul><li>1: 获取最大长度的函数.</li><li>2: 完成文本语句单词到id的数字映射函数.</li><li>3: 填充特殊标识符的函数.</li><li>4: 加载停用词表的函数.</li><li>5: 清洗文本的函数.</li><li>6: 过滤停用词的函数.</li><li>7: 语句处理的函数.</li><li>8: 加载构建好的训练集和测试集的函数.</li><li>9: 完成本步骤总体逻辑的函数build_dataset()函数.</li></ul></li></ul><h5 id="1-获取最大长度的函数"><a href="#1-获取最大长度的函数" class="headerlink" title="1: 获取最大长度的函数"></a>1: 获取最大长度的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">import</span> jieba<span class="token comment" spellcheck="true"># 配置模块</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_max_len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获得合适的最大长度值(被build_dataset调用)</span>    <span class="token comment" spellcheck="true"># data: 待统计的数据train_df['Question']</span>    <span class="token comment" spellcheck="true"># 句子最大长度为空格数+1</span>    max_lens <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 平均值+2倍方差的方式</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="2-完成文本语句单词到id的数字映射函数"><a href="#2-完成文本语句单词到id的数字映射函数" class="headerlink" title="2: 完成文本语句单词到id的数字映射函数"></a>2: 完成文本语句单词到id的数字映射函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">transform_data</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 句子转换为index序列(被build_dataset调用)</span>    <span class="token comment" spellcheck="true"># sentence: 'word1 word2 word3 ...'  ->  [index1, index2, index3 ...]</span>    <span class="token comment" spellcheck="true"># word_to_id: 映射字典</span>    <span class="token comment" spellcheck="true"># 字符串切分成词</span>    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按照word_to_id的id进行转换, 到未知词就填充unk的索引</span>    ids <span class="token operator">=</span> <span class="token punctuation">[</span>word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> word_to_id<span class="token punctuation">[</span><span class="token string">'&lt;UNK>'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 返回映射后的文本id值列表</span>    <span class="token keyword">return</span> ids</code></pre><h5 id="3-填充特殊标识符的函数"><a href="#3-填充特殊标识符的函数" class="headerlink" title="3: 填充特殊标识符的函数"></a>3: 填充特殊标识符的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pad_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 根据max_len和vocab填充&lt;START> &lt;STOP> &lt;PAD> &lt;UNK></span>    <span class="token comment" spellcheck="true"># 0. 按空格统计切分出词</span>    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1. 截取规定长度的词数</span>    words <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 2. 填充&lt;UNK></span>    sentence <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> <span class="token string">'&lt;UNK>'</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 3. 填充&lt;START> &lt;END></span>    sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;START>'</span><span class="token punctuation">]</span> <span class="token operator">+</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;STOP>'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 4. 判断长度，填充&lt;PAD></span>    sentence <span class="token operator">=</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD>'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_len <span class="token operator">-</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以空格连接列表, 返回结果字符串</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span></code></pre><h5 id="4-加载停用词表的函数"><a href="#4-加载停用词表的函数" class="headerlink" title="4: 加载停用词表的函数"></a>4: 加载停用词表的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">load_stop_words</span><span class="token punctuation">(</span>stop_word_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 加载停用词(程序调用)</span>    <span class="token comment" spellcheck="true"># stop_word_path: 停用词路径</span>    <span class="token comment" spellcheck="true"># 打开停用词文件</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>stop_word_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 读取所有行</span>    stop_words <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 去除每一个停用词前后 空格 换行符</span>    stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>stop_word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> stop_word <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>    <span class="token keyword">return</span> stop_words<span class="token comment" spellcheck="true"># 加载停用词, 这里面的stop_words_path是早已在config.py文件中配置好的</span>stop_words <span class="token operator">=</span> load_stop_words<span class="token punctuation">(</span>stop_words_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stop_words: '</span><span class="token punctuation">,</span> stop_words<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><h5 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">stop_words<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'———'</span><span class="token punctuation">,</span> <span class="token string">'》），'</span><span class="token punctuation">,</span> <span class="token string">'）÷（１－'</span><span class="token punctuation">,</span> <span class="token string">'”，'</span><span class="token punctuation">,</span> <span class="token string">'）、'</span><span class="token punctuation">,</span> <span class="token string">'＝（'</span><span class="token punctuation">,</span> <span class="token string">'→'</span><span class="token punctuation">,</span> <span class="token string">'℃'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'一一'</span><span class="token punctuation">,</span> <span class="token string">'~~~~'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'.一'</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'＝″'</span><span class="token punctuation">]</span></code></pre><h5 id="5-清洗文本的函数"><a href="#5-清洗文本的函数" class="headerlink" title="5: 清洗文本的函数"></a>5: 清洗文本的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 特殊符号去除(被sentence_proc调用)</span>    <span class="token comment" spellcheck="true"># sentence: 待处理的字符串</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 删除1. 2. 3. 这些标题</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除带括号的 进口 海外</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除除了汉字数字字母和，！？。.- 以外的字符</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用中文输入法下的，！？来替换英文输入法下的,!?</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除 车主说 技师说 语音 图片 你好 您好</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|你好|您好"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token keyword">return</span> sentence    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span>    sentence <span class="token operator">=</span> <span class="token string">'技师说：你好！以前也出现过该故障吗？|技师说：缸压多少有没有测量一下?|车主说：没有过|车主说：没测缸压|技师说：测量一下缸压 看一四缸缸压是否偏低|车主说：用电脑测，只是14缸缺火|车主说：[语音]|车主说：[语音]|技师说：点火线圈  火花塞 喷油嘴不用干活  直接和二三缸对倒一下  跑一段在测量一下故障码进行排除|车主说：[语音]|车主>说：[语音]|车主说：[语音]|车主说：[语音]|车主说：师傅还在吗|技师说：调一下喷油嘴  测一下缸压  都正常则为发动机电脑板问题|车主说：[语音]|车主说：[语音]|车主说：[语音]|技师说：这个影响不大的|技师说：缸压八个以上正常|车主说：[语音]|技师说：所以说让你测量缸压  只要缸压正常则没有问题|车主说：[语音]|车主说：[语音]|技师说：可以点击头像关注我  有什么问题随时询问  一定真诚用心为你解决|车主说：师傅，谢谢了|技师说：不用客气'</span>res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><h5 id="打印：-2"><a href="#打印：-2" class="headerlink" title="打印："></a>打印：</h5><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span> ！以前也出现过该故障吗？缸压多少有没有测量一下？没有过没测缸压测量一下缸压看一四缸缸压是否偏低用电脑测，只是<span class="token number">14</span>缸缺火点火线圈火花塞喷油嘴不用干活直接和二三缸对倒一下跑一段在测量一下故障码进行排除师傅还在吗调一下喷油嘴测一下缸压都正常则为发动机电脑板问题这个影响不大的缸压八个以上正常所以说让你测量缸压只要缸压正常则没有问题可以点击头像关注我有什么问题随时询问一定真诚用心为你解决师傅，谢谢了不用客气</code></pre><h5 id="6：-过滤停用词的函数"><a href="#6：-过滤停用词的函数" class="headerlink" title="6：#过滤停用词的函数"></a>6：#过滤停用词的函数</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_stopwords</span><span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 过滤一句切好词的话中的停用词(被sentence_proc调用)</span>    <span class="token comment" spellcheck="true"># seg_list: 切好词的列表 [word1 ,word2 .......]</span>    <span class="token comment" spellcheck="true"># 首先去掉多余空字符</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> seg_list <span class="token keyword">if</span> word<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 去掉停用词</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第一步: 先将原始文本执行清洗操作</span>res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print('res=', res)</span><span class="token comment" spellcheck="true"># 第二步: 对清洗结果进行分词, 默认是精确模式, 当设置cut_all=True时, 采用全模式</span>words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步: 将分词的结果传入过滤停用词函数中, 并打印结果</span>result <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h5 id="打印-1"><a href="#打印-1" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'！'</span><span class="token punctuation">,</span> <span class="token string">'以前'</span><span class="token punctuation">,</span> <span class="token string">'出现'</span><span class="token punctuation">,</span> <span class="token string">'过该'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'有没有'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'没测'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'看'</span><span class="token punctuation">,</span> <span class="token string">'一四缸'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'是否'</span><span class="token punctuation">,</span> <span class="token string">'偏低'</span><span class="token punctuation">,</span> <span class="token string">'电脑'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'缺火'</span><span class="token punctuation">,</span> <span class="token string">'点火'</span><span class="token punctuation">,</span> <span class="token string">'线圈'</span><span class="token punctuation">,</span> <span class="token string">'火花塞'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'干活'</span><span class="token punctuation">,</span> <span class="token string">'直接'</span><span class="token punctuation">,</span> <span class="token string">'二三'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'倒'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'跑'</span><span class="token punctuation">,</span> <span class="token string">'一段'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'码'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'排除'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'还'</span><span class="token punctuation">,</span> <span class="token string">'调'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'都'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'发动机'</span><span class="token punctuation">,</span> <span class="token string">'电脑板'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'影响'</span><span class="token punctuation">,</span> <span class="token string">'不大'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'八个'</span><span class="token punctuation">,</span> <span class="token string">'以上'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'说'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'点击'</span><span class="token punctuation">,</span> <span class="token string">'头像'</span><span class="token punctuation">,</span> <span class="token string">'关注'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'随时'</span><span class="token punctuation">,</span> <span class="token string">'询问'</span><span class="token punctuation">,</span> <span class="token string">'一定'</span><span class="token punctuation">,</span> <span class="token string">'真诚'</span><span class="token punctuation">,</span> <span class="token string">'用心'</span><span class="token punctuation">,</span> <span class="token string">'解决'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'谢谢'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'客气'</span><span class="token punctuation">]</span></code></pre><h5 id="7：句子的处理"><a href="#7：句子的处理" class="headerlink" title="7：句子的处理"></a>7：句子的处理</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sentence_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 预处理模块(处理一条句子, 被sentences_proc调用)</span>    <span class="token comment" spellcheck="true"># sentence: 待处理字符串</span>    <span class="token comment" spellcheck="true"># 第一步: 执行清洗原始文本的操作</span>    sentence <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步: 执行分词操作, 默认精确模式, 全模式cut参数cut_all=True</span>    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步: 将分词结果输入过滤停用词函数中</span>    words <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回字符串结果, 按空格分隔, 将过滤停用词后的列表拼接</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>res <span class="token operator">=</span> sentence_proc<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span></code></pre><h5 id="打印-2"><a href="#打印-2" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">res<span class="token operator">=</span> ！ 以前 出现 过该 故障 ？ 缸 压 有没有 测量 一下 ？ 没有 没测 缸 压 测量 一下 缸 压 看 一四缸 缸 压 是否 偏低 电脑 测 ， <span class="token number">14</span> 缸 缺火 点火 线圈 火花塞 喷油嘴 不用 干活 直接 二三 缸 倒 一下 跑 一段 测量 一下 故障 码 进行 排除 师傅 还 调 一下 喷油嘴 测 一下 缸 压 都 正常 发动机 电脑板 问题 影响 不大 缸 压 八个 以上 正常 说 测量 缸 压 缸 压 正常 没有 问题 点击 头像 关注 问题 随时 询问 一定 真诚 用心 解决 师傅 ， 谢谢 不用 客气</code></pre><h5 id="7：语句处理的函数-2"><a href="#7：语句处理的函数-2" class="headerlink" title="7：语句处理的函数(2)"></a>7：语句处理的函数(2)</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sentences_proc</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 预处理模块(处理一个句子列表, 对每个句子调用sentence_proc操作)</span>    <span class="token comment" spellcheck="true"># df: 数据集</span>    <span class="token comment" spellcheck="true"># 批量预处理训练集和测试集</span>    <span class="token keyword">for</span> col_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Brand'</span><span class="token punctuation">,</span> <span class="token string">'Model'</span><span class="token punctuation">,</span> <span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集Report预处理</span>    <span class="token keyword">if</span> <span class="token string">'Report'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以Pandas的DataFrame格式返回</span>    <span class="token keyword">return</span> df</code></pre><h5 id="8：加载构建好的训练集和测试集的函数"><a href="#8：加载构建好的训练集和测试集的函数" class="headerlink" title="8：加载构建好的训练集和测试集的函数"></a>8：加载构建好的训练集和测试集的函数</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 加载处理好的训练样本和训练标签.npy文件(执行完build_dataset后才能使用)</span><span class="token keyword">def</span> <span class="token function">load_train_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>    <span class="token comment" spellcheck="true"># max_dec_len: 最长标签长度, 后面的截断</span>    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_x_path<span class="token punctuation">)</span>    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_y_path<span class="token punctuation">)</span>    train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>    train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_dec_len<span class="token punctuation">]</span>    <span class="token keyword">return</span> train_X<span class="token punctuation">,</span> train_Y<span class="token comment" spellcheck="true"># 加载处理好的测试样本.npy文件(执行完build_dataset后才能使用)</span><span class="token keyword">def</span> <span class="token function">load_test_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>test_x_path<span class="token punctuation">)</span>    test_X <span class="token operator">=</span> test_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>    <span class="token keyword">return</span> test_X</code></pre><h5 id="9-完成本步骤总体逻辑的函数build-dataset-函数"><a href="#9-完成本步骤总体逻辑的函数build-dataset-函数" class="headerlink" title="9: 完成本步骤总体逻辑的函数build_dataset()函数"></a>9: 完成本步骤总体逻辑的函数build_dataset()函数</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 数据预处理总函数, 用于数据加载 + 预处理 (注意: 只需执行一次)</span><span class="token keyword">def</span> <span class="token function">build_dataset</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 加载原始数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1. 加载原始数据'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 必须设定数据格式为utf-8</span>    train_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 82943, 20000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2. 空值去除(对于一行数据, 任意列只要有空值就去掉该行)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2. 空值去除（对于一行数据，任意列只要有空值就去掉该行）'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空值去除后训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)'</span><span class="token punctuation">)</span>    train_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>    test_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>test_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sentences_proc has done!'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4. 合并训练测试集, 用于构造映射字典word_to_id</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4. 合并训练测试集, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>    train_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>    test_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># merged列是训练集三列和测试集两列按行连接在一起再按列堆积, 用于构造映射字典</span>    <span class="token comment" spellcheck="true"># 按列堆积, 用于构造映射字典</span>    merged_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集行数&amp;#123;&amp;#125;, 测试集行数&amp;#123;&amp;#125;, 合并数据集行数&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>merged_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 保存分割处理好的train_seg_data.csv, test_set_data.csv</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5. 保存分割处理好的train_seg_data.csv, test_set_data.csv'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把建立的列merged去掉, 该列对于神经网络无用</span>    train_df <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    test_df <span class="token operator">=</span> test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将处理后的数据存入持久化文件</span>    train_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The csv_file has saved!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>    merged_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word_to_vector file has saved!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 构建word_to_id字典和id_to_word字典, 根据第6步存储的合并文件数据来完成.</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总体单词总数count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    res_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>            res_dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> i            number <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入到字典中的单词总数number='</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合并数据集的字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> res_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>            word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终构造完毕字典, word_to_id容量='</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']"</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 9. 填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>, 使数据变为等长</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'9. 填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>, 使数据变为等长'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取适当的最大长度</span>    train_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    train_y_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集样本的最大长度为: '</span><span class="token punctuation">,</span> train_x_max_len<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前测试集样本的最大长度为: '</span><span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集标签的最大长度为: '</span><span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 选训练集和测试集中较大的值</span>    x_max_len <span class="token operator">=</span> max<span class="token punctuation">(</span>train_x_max_len<span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集X填充处理</span>    <span class="token comment" spellcheck="true"># train_df['X'] = train_df['X'].apply(lambda x: pad_proc(x, x_max_len, vocab))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 测试集X填充处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集Y填充处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>后的X和Y</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>后的X和Y'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充后的三个文件保存完毕!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 11. 重新构建word_to_id字典和id_to_word字典, 根据第10步存储的3个文件数据来完成.</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对训练集数据Y进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对测试集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f3<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单词总数量count= '</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造逆向字典id_to_word</span>    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        id_to_word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逆向字典构造完毕, id_to_word容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>id_to_word<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 12. 更新vocab并保存</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12. 更新vocab并保存'</span><span class="token punctuation">)</span>    save_vocab_as_txt<span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span>    save_vocab_as_txt<span class="token punctuation">(</span>reverse_vocab_path<span class="token punctuation">,</span> id_to_word<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字典映射器word_to_id, id_to_word保存完毕!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X执行transform_data中......'</span><span class="token punctuation">)</span>    train_ids_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y执行transform_data中......'</span><span class="token punctuation">)</span>    train_ids_y <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X执行transform_data中......'</span><span class="token punctuation">)</span>    test_ids_x <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 14. 数据转换成numpy数组(需等长)</span>    <span class="token comment" spellcheck="true"># 将索引列表转换成矩阵 [32800, 403, 986, 246, 231] --> array([[32800, 403, 986, 246, 231], ...])</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'14. 数据转换成numpy数组(需等长)'</span><span class="token punctuation">)</span>    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_y<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换为numpy数组的形状如下: \ntrain_X的shape为: '</span><span class="token punctuation">,</span> train_X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntrain_Y的shape为: '</span><span class="token punctuation">,</span> train_Y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntest_X的shape为: '</span><span class="token punctuation">,</span> test_X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 15. 保存数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'15. 保存数据......'</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_x_path<span class="token punctuation">,</span> train_X<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_y_path<span class="token punctuation">,</span> train_Y<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>test_x_path<span class="token punctuation">,</span> test_X<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据集构造完毕, 存储于seq2seq/data/目录下.'</span><span class="token punctuation">)</span></code></pre><h4 id="前面数据处理合并的代码"><a href="#前面数据处理合并的代码" class="headerlink" title="前面数据处理合并的代码"></a>前面数据处理合并的代码</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">import</span> jieba<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> utils<span class="token punctuation">.</span>multi_proc_utils <span class="token keyword">import</span> parallelize<span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> save_vocab_as_txtroot_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 配置模块</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>params_utils <span class="token keyword">import</span> get_params<span class="token comment" spellcheck="true"># 载入词向量参数</span>params <span class="token operator">=</span> get_params<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># jieba载入自定义切词表</span>jieba<span class="token punctuation">.</span>load_userdict<span class="token punctuation">(</span>user_dict_path<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_max_len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获得合适的最大长度值(被build_dataset调用)</span>    <span class="token comment" spellcheck="true"># data: 待统计的数据train_df['Question']</span>    <span class="token comment" spellcheck="true"># 句子最大长度为空格数+1</span>    max_lens <span class="token operator">=</span> data<span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 平均值+2倍方差的方式</span>    <span class="token keyword">return</span> int<span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>max_lens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#完成文本语句单词到id的数字映射函数</span><span class="token keyword">def</span> <span class="token function">transform_data</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 句子转换为index序列(被build_dataset调用)</span>    <span class="token comment" spellcheck="true"># sentence: 'word1 word2 word3 ...'  ->  [index1, index2, index3 ...]</span>    <span class="token comment" spellcheck="true"># word_to_id: 映射字典</span>    <span class="token comment" spellcheck="true"># 字符串切分成词</span>    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 按照word_to_id的id进行转换, 到未知词就填充unk的索引</span>    ids <span class="token operator">=</span> <span class="token punctuation">[</span>word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> word_to_id<span class="token punctuation">[</span><span class="token string">'&lt;UNK>'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 返回映射后的文本id值列表</span>    <span class="token keyword">return</span> ids<span class="token comment" spellcheck="true"># 填充特殊标识符的函数</span><span class="token keyword">def</span> <span class="token function">pad_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 根据max_len和vocab填充&lt;START> &lt;STOP> &lt;PAD> &lt;UNK></span>    <span class="token comment" spellcheck="true"># 0. 按空格统计切分出词</span>    words <span class="token operator">=</span> sentence<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1. 截取规定长度的词数</span>    words <span class="token operator">=</span> words<span class="token punctuation">[</span><span class="token punctuation">:</span>max_len<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 2. 填充&lt;UNK></span>    sentence <span class="token operator">=</span> <span class="token punctuation">[</span>w <span class="token keyword">if</span> w <span class="token keyword">in</span> word_to_id <span class="token keyword">else</span> <span class="token string">'&lt;UNK>'</span> <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 3. 填充&lt;START> &lt;END></span>    sentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'&lt;START>'</span><span class="token punctuation">]</span> <span class="token operator">+</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;STOP>'</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 4. 判断长度，填充&lt;PAD></span>    sentence <span class="token operator">=</span> sentence <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'&lt;PAD>'</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max_len <span class="token operator">-</span> len<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以空格连接列表, 返回结果字符串</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#加载停用词的函数</span><span class="token keyword">def</span> <span class="token function">load_stop_words</span><span class="token punctuation">(</span>stop_word_payh<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#stop_word_payh:停用词的存储路径</span>    <span class="token comment" spellcheck="true">#打开停用词表</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>stop_word_payh<span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    stop_words <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_words <span class="token operator">=</span> <span class="token punctuation">[</span>stop_word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span>  stop_word <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span>    <span class="token keyword">return</span> stop_words<span class="token comment" spellcheck="true"># 加载停用词, 这里面的stop_words_path是早已在config.py文件中配置好的</span>stop_words <span class="token operator">=</span> load_stop_words<span class="token punctuation">(</span>stop_words_path<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'stop_words: '</span><span class="token punctuation">,</span> stop_words<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#清理文本的函数</span><span class="token keyword">def</span> <span class="token function">clean_sentence</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 特殊符号去除(被sentence_proc调用)</span>    <span class="token comment" spellcheck="true"># sentence: 待处理的字符串</span>    <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>sentence<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 删除1. 2. 3. 这些标题</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"\D(\d\.)\D"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正则表达式</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除带括号的 进口 海外</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"[(（]进口[)）]|\(海外\)"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除除了汉字数字字母和，！？。.- 以外的字符</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">"[^，！？。\.\-\u4e00-\u9fa5_a-zA-Z0-9]"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 用中文输入法下的，！？来替换英文输入法下的,!?</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"，"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token string">"！"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> sentence<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">,</span> <span class="token string">"？"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 删除 车主说 技师说 语音 图片 你好 您好</span>        r <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"车主说|技师说|语音|图片|你好|您好"</span><span class="token punctuation">)</span>        sentence <span class="token operator">=</span> r<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> sentence<span class="token punctuation">)</span>        <span class="token keyword">return</span> sentence    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span>sentence <span class="token operator">=</span> <span class="token string">'技师说：你好！以前也出现过该故障吗？|技师说：缸压多少有没有测量一下?|车主说：没有过|车主说：没测缸压|技师说：测量一下缸压 看一四缸缸压是否偏低|车主说：用电脑测，只是14缸缺火|车主说：[语音]|车主说：[语音]|技师说：点火线圈  火花塞 喷油嘴不用干活  直接和二三缸对倒一下  跑一段在测量一下故障码进行排除|车主说：[语音]|车主>说：[语音]|车主说：[语音]|车主说：[语音]|车主说：师傅还在吗|技师说：调一下喷油嘴  测一下缸压  都正常则为发动机电脑板问题|车主说：[语音]|车主说：[语音]|车主说：[语音]|技师说：这个影响不大的|技师说：缸压八个以上正常|车主说：[语音]|技师说：所以说让你测量缸压  只要缸压正常则没有问题|车主说：[语音]|车主说：[语音]|技师说：可以点击头像关注我  有什么问题随时询问  一定真诚用心为你解决|车主说：师傅，谢谢了|技师说：不用客气'</span><span class="token comment" spellcheck="true">#过滤停用词的函数</span><span class="token keyword">def</span> <span class="token function">filter_stopwords</span><span class="token punctuation">(</span>seg_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 过滤一句切好词的话中的停用词(被sentence_proc调用)</span>    <span class="token comment" spellcheck="true"># seg_list: 切好词的列表 [word1 ,word2 .......]</span>    <span class="token comment" spellcheck="true"># 首先去掉多余空字符</span>    words <span class="token operator">=</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> seg_list <span class="token keyword">if</span> word<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 去掉停用词</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>word <span class="token keyword">for</span> word <span class="token keyword">in</span> words <span class="token keyword">if</span> word <span class="token operator">not</span> <span class="token keyword">in</span> stop_words<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 第一步: 先将原始文本执行清洗操作</span>res <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print('res=', res)</span><span class="token comment" spellcheck="true"># 第二步: 对清洗结果进行分词, 默认是精确模式, 当设置cut_all=True时, 采用全模式</span>words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 第三步: 将分词的结果传入过滤停用词函数中, 并打印结果</span>result <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 句子的处理</span><span class="token keyword">def</span> <span class="token function">sentence_proc</span><span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 预处理模块(处理一条句子, 被sentences_proc调用)</span>    <span class="token comment" spellcheck="true"># sentence: 待处理字符串</span>    <span class="token comment" spellcheck="true"># 第一步: 执行清洗原始文本的操作</span>    sentence <span class="token operator">=</span> clean_sentence<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步: 执行分词操作, 默认精确模式, 全模式cut参数cut_all=True</span>    words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第三步: 将分词结果输入过滤停用词函数中</span>    words <span class="token operator">=</span> filter_stopwords<span class="token punctuation">(</span>words<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 返回字符串结果, 按空格分隔, 将过滤停用词后的列表拼接</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>words<span class="token punctuation">)</span>res <span class="token operator">=</span> sentence_proc<span class="token punctuation">(</span>sentence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res='</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 语句处理的函数(2)</span><span class="token keyword">def</span> <span class="token function">sentences_proc</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 预处理模块(处理一个句子列表, 对每个句子调用sentence_proc操作)</span>    <span class="token comment" spellcheck="true"># df: 数据集</span>    <span class="token comment" spellcheck="true"># 批量预处理训练集和测试集</span>    <span class="token keyword">for</span> col_name <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'Brand'</span><span class="token punctuation">,</span> <span class="token string">'Model'</span><span class="token punctuation">,</span> <span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span>col_name<span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集Report预处理</span>    <span class="token keyword">if</span> <span class="token string">'Report'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>        df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span>sentence_proc<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 以Pandas的DataFrame格式返回</span>    <span class="token keyword">return</span> df<span class="token comment" spellcheck="true"># 加载构建好的训练集和测试集的函数</span><span class="token comment" spellcheck="true"># 加载处理好的训练样本和训练标签.npy文件(执行完build_dataset后才能使用)</span><span class="token keyword">def</span> <span class="token function">load_train_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>    <span class="token comment" spellcheck="true"># max_dec_len: 最长标签长度, 后面的截断</span>    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_x_path<span class="token punctuation">)</span>    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>train_y_path<span class="token punctuation">)</span>    train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>    train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_dec_len<span class="token punctuation">]</span>    <span class="token keyword">return</span> train_X<span class="token punctuation">,</span> train_Y<span class="token comment" spellcheck="true"># 加载处理好的测试样本.npy文件(执行完build_dataset后才能使用)</span><span class="token keyword">def</span> <span class="token function">load_test_dataset</span><span class="token punctuation">(</span>max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># max_enc_len: 最长样本长度, 后面的截断</span>    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>load<span class="token punctuation">(</span>test_x_path<span class="token punctuation">)</span>    test_X <span class="token operator">=</span> test_X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>max_enc_len<span class="token punctuation">]</span>    <span class="token keyword">return</span> test_X    <span class="token comment" spellcheck="true"># 9: 完成本步骤总体逻辑的函数build_dataset()函数</span><span class="token comment" spellcheck="true"># 数据预处理总函数, 用于数据加载 + 预处理 (注意: 只需执行一次)</span><span class="token keyword">def</span> <span class="token function">build_dataset</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 1. 加载原始数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1. 加载原始数据'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 必须设定数据格式为utf-8</span>    train_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    test_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>test_raw_data_path<span class="token punctuation">,</span> engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 82943, 20000</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'原始训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 2. 空值去除(对于一行数据, 任意列只要有空值就去掉该行)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2. 空值去除（对于一行数据，任意列只要有空值就去掉该行）'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'any'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空值去除后训练集行数 &amp;#123;&amp;#125;, 测试集行数 &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'3. 多线程, 批量数据预处理(对每个句子执行sentence_proc, 清除无用词, 分词, 过滤停用词, 再用空格拼接为一个字符串)'</span><span class="token punctuation">)</span>    train_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>train_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>    test_df <span class="token operator">=</span> parallelize<span class="token punctuation">(</span>test_df<span class="token punctuation">,</span> sentences_proc<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sentences_proc has done!'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 4. 合并训练测试集, 用于构造映射字典word_to_id</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'4. 合并训练测试集, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>    train_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">,</span> <span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 新建一列, 按行堆积</span>    test_df<span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># merged列是训练集三列和测试集两列按行连接在一起再按列堆积, 用于构造映射字典</span>    <span class="token comment" spellcheck="true"># 按列堆积, 用于构造映射字典</span>    merged_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集行数&amp;#123;&amp;#125;, 测试集行数&amp;#123;&amp;#125;, 合并数据集行数&amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>train_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>test_df<span class="token punctuation">)</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>merged_df<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 5. 保存分割处理好的train_seg_data.csv, test_set_data.csv</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'5. 保存分割处理好的train_seg_data.csv, test_set_data.csv'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 把建立的列merged去掉, 该列对于神经网络无用</span>    train_df <span class="token operator">=</span> train_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    test_df <span class="token operator">=</span> test_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'merged'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将处理后的数据存入持久化文件</span>    train_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The csv_file has saved!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'6. 保存合并数据merged_seg_data.csv, 用于构造映射字典word_to_id'</span><span class="token punctuation">)</span>    merged_df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The word_to_vector file has saved!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 7. 构建word_to_id字典和id_to_word字典, 根据第6步存储的合并文件数据来完成.</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>merged_seg_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>                    count <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总体单词总数count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    res_dict <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    number <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">>=</span> <span class="token number">5</span><span class="token punctuation">:</span>            res_dict<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> i            number <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'进入到字典中的单词总数number='</span><span class="token punctuation">,</span> number<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'合并数据集的字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>res_dict<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> res_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>            word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count            count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'最终构造完毕字典, word_to_id容量='</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count='</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"8. 将Question和Dialogue用空格连接作为模型输入形成train_df['X']"</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'Question'</span><span class="token punctuation">,</span> <span class="token string">'Dialogue'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 9. 填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>, 使数据变为等长</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'9. 填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>, 使数据变为等长'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取适当的最大长度</span>    train_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    test_x_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    train_y_max_len <span class="token operator">=</span> get_max_len<span class="token punctuation">(</span>train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集样本的最大长度为: '</span><span class="token punctuation">,</span> train_x_max_len<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前测试集样本的最大长度为: '</span><span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充前训练集标签的最大长度为: '</span><span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 选训练集和测试集中较大的值</span>    x_max_len <span class="token operator">=</span> max<span class="token punctuation">(</span>train_x_max_len<span class="token punctuation">,</span> test_x_max_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集X填充处理</span>    <span class="token comment" spellcheck="true"># train_df['X'] = train_df['X'].apply(lambda x: pad_proc(x, x_max_len, vocab))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 测试集X填充处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 训练集Y填充处理</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y填充PAD, START, STOP, UNK处理中...'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Report'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> pad_proc<span class="token punctuation">(</span>x<span class="token punctuation">,</span> train_y_max_len<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK>和&lt;PAD>后的X和Y</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10. 保存填充&lt;START>, &lt;STOP>, &lt;UNK> 和 &lt;PAD>后的X和Y'</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> index<span class="token operator">=</span>None<span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'填充后的三个文件保存完毕!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 11. 重新构建word_to_id字典和id_to_word字典, 根据第10步存储的3个文件数据来完成.</span>    word_to_id <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 对训练集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对训练集数据Y进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>train_y_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对测试集数据X进行处理</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>test_x_pad_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f3<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f3<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> line<span class="token punctuation">:</span>                <span class="token keyword">if</span> w <span class="token operator">not</span> <span class="token keyword">in</span> word_to_id<span class="token punctuation">:</span>                    word_to_id<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> count                    count <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X字典构造完毕, word_to_id容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'单词总数量count= '</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造逆向字典id_to_word</span>    id_to_word <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>    <span class="token keyword">for</span> w<span class="token punctuation">,</span> i <span class="token keyword">in</span> word_to_id<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        id_to_word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'逆向字典构造完毕, id_to_word容量: '</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>id_to_word<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 12. 更新vocab并保存</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'12. 更新vocab并保存'</span><span class="token punctuation">)</span>    save_vocab_as_txt<span class="token punctuation">(</span>vocab_path<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span>    save_vocab_as_txt<span class="token punctuation">(</span>reverse_vocab_path<span class="token punctuation">,</span> id_to_word<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'字典映射器word_to_id, id_to_word保存完毕!'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'13. 数据集转换 将词转换成索引[&lt;START> 方向机 重 ...] -> [32800, 403, 986, 246, 231]'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集X执行transform_data中......'</span><span class="token punctuation">)</span>    train_ids_x <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'训练集Y执行transform_data中......'</span><span class="token punctuation">)</span>    train_ids_y <span class="token operator">=</span> train_df<span class="token punctuation">[</span><span class="token string">'Y'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试集X执行transform_data中......'</span><span class="token punctuation">)</span>    test_ids_x <span class="token operator">=</span> test_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>apply<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> transform_data<span class="token punctuation">(</span>x<span class="token punctuation">,</span> word_to_id<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 14. 数据转换成numpy数组(需等长)</span>    <span class="token comment" spellcheck="true"># 将索引列表转换成矩阵 [32800, 403, 986, 246, 231] --> array([[32800, 403, 986, 246, 231], ...])</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'14. 数据转换成numpy数组(需等长)'</span><span class="token punctuation">)</span>    train_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    train_Y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>train_ids_y<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    test_X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>test_ids_x<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'转换为numpy数组的形状如下: \ntrain_X的shape为: '</span><span class="token punctuation">,</span> train_X<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntrain_Y的shape为: '</span><span class="token punctuation">,</span> train_Y<span class="token punctuation">.</span>shape<span class="token punctuation">,</span> <span class="token string">'\ntest_X的shape为: '</span><span class="token punctuation">,</span> test_X<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 15. 保存数据</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'15. 保存数据......'</span><span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_x_path<span class="token punctuation">,</span> train_X<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>train_y_path<span class="token punctuation">,</span> train_Y<span class="token punctuation">)</span>    np<span class="token punctuation">.</span>save<span class="token punctuation">(</span>test_x_path<span class="token punctuation">,</span> test_X<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数据集构造完毕, 存储于seq2seq/data/目录下.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    build_dataset<span class="token punctuation">(</span>train_raw_data_path<span class="token punctuation">,</span> test_raw_data_path<span class="token punctuation">)</span></code></pre><h5 id="打印输出"><a href="#打印输出" class="headerlink" title="打印输出"></a>打印输出</h5><pre class=" language-python"><code class="language-python">Building prefix dict <span class="token keyword">from</span> the default dictionary <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Loading model <span class="token keyword">from</span> cache <span class="token operator">/</span>tmp<span class="token operator">/</span>jieba<span class="token punctuation">.</span>cacheLoading model cost <span class="token number">0.753</span> seconds<span class="token punctuation">.</span>Prefix dict has been built successfully<span class="token punctuation">.</span><span class="token number">1</span><span class="token punctuation">.</span> 加载原始数据<span class="token operator">/</span>home<span class="token operator">/</span>ec2<span class="token operator">-</span>user<span class="token operator">/</span>text_summary<span class="token operator">/</span>seq2seq<span class="token operator">/</span>data<span class="token operator">/</span>train<span class="token punctuation">.</span>csv原始训练集行数 <span class="token number">82943</span><span class="token punctuation">,</span> 测试集行数 <span class="token number">20000</span><span class="token number">2</span><span class="token punctuation">.</span> 空值去除（对于一行数据，任意列只要有空值就去掉该行）空值去除后训练集行数 <span class="token number">82871</span><span class="token punctuation">,</span> 测试集行数 <span class="token number">20000</span><span class="token number">3</span><span class="token punctuation">.</span> 多线程<span class="token punctuation">,</span> 批量数据预处理<span class="token punctuation">(</span>对每个句子执行sentence_proc，清除无用词，切词，过滤停用词，再用空格拼接为一个字符串<span class="token punctuation">)</span>sentences_proc has done!<span class="token number">4</span><span class="token punctuation">.</span> 合并训练测试集，用于训练词向量训练集行数<span class="token number">82871</span><span class="token punctuation">,</span> 测试集行数<span class="token number">20000</span><span class="token punctuation">,</span> 合并数据集行数<span class="token number">102871</span><span class="token number">5</span><span class="token punctuation">.</span> 保存分割处理好的train_seg_data<span class="token punctuation">.</span>csv、test_set_data<span class="token punctuation">.</span>csvThe csv_file has saved!<span class="token number">6</span><span class="token punctuation">.</span> 保存合并数据merged_seg_data<span class="token punctuation">.</span>csv，用于训练词向量The word_to_vector file has saved!总体单词总数count<span class="token operator">=</span> <span class="token number">124520</span>进入到字典中的单词总数number<span class="token operator">=</span> <span class="token number">32227</span>合并数据集的字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32227</span>最终构造完毕字典<span class="token punctuation">,</span> word_to_id容量<span class="token operator">=</span> <span class="token number">32227</span>count<span class="token operator">=</span> <span class="token number">32227</span><span class="token number">8</span><span class="token punctuation">.</span> 将Question和Dialogue用空格连接作为模型输入形成train_df<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span><span class="token number">9</span><span class="token punctuation">.</span> 填充<span class="token operator">&lt;</span>START<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>STOP<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>UNK<span class="token operator">></span>和<span class="token operator">&lt;</span>PAD<span class="token operator">></span>，使数据变为等长填充前训练集样本的最大长度为<span class="token punctuation">:</span>  <span class="token number">298</span>填充前测试集样本的最大长度为<span class="token punctuation">:</span>  <span class="token number">312</span>填充前训练集标签的最大长度为<span class="token punctuation">:</span>  <span class="token number">38</span>训练集X填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>测试集X填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>训练集Y填充PAD<span class="token punctuation">,</span>START<span class="token punctuation">,</span>STOP<span class="token punctuation">,</span>UNK处理中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">10</span><span class="token punctuation">.</span> 保存填充<span class="token operator">&lt;</span>START<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>STOP<span class="token operator">></span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>UNK<span class="token operator">></span>和<span class="token operator">&lt;</span>PAD<span class="token operator">></span>后的X和Y填充后的三个文件保存完毕!训练集X字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32101</span>训练集Y字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32130</span>测试集X字典构造完毕<span class="token punctuation">,</span> word_to_id容量<span class="token punctuation">:</span>  <span class="token number">32217</span>单词总数量count<span class="token operator">=</span>  <span class="token number">32217</span>逆向字典构造完毕<span class="token punctuation">,</span> id_to_word容量<span class="token punctuation">:</span>  <span class="token number">32217</span>字典映射器word_to_id<span class="token punctuation">,</span> id_to_word保存完毕!<span class="token number">13</span><span class="token punctuation">.</span> 数据集转换 将词转换成索引  <span class="token punctuation">[</span><span class="token operator">&lt;</span>START<span class="token operator">></span> 方向机 重 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">32800</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">,</span> <span class="token number">986</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">]</span>训练集X执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>训练集Y执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>测试集X执行transform_data中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">14</span><span class="token punctuation">.</span> 数据转换成numpy数组<span class="token punctuation">(</span>需等长<span class="token punctuation">)</span>转换为numpy数组的形状如下<span class="token punctuation">:</span> train_X的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">82871</span><span class="token punctuation">,</span> <span class="token number">314</span><span class="token punctuation">)</span> train_Y的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">82871</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span> test_X的shape为<span class="token punctuation">:</span>  <span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">,</span> <span class="token number">314</span><span class="token punctuation">)</span><span class="token number">15</span><span class="token punctuation">.</span> 保存数据数据集构造完毕，于seq2seq<span class="token operator">/</span>data<span class="token operator">/</span>目录下</code></pre><p><strong>结论</strong>: 通过五个步骤实现了全部的工具函数, 并完成了数据预处理. 后续模型类需要数据的时候, 可以直接通过加载文件的方式读取数据, 非常方便. 对于任意工业级别的项目来说, 数据预处理都处于非常重要的地位, 代码量和耗费的时间也占了整个项目很大的比例.</p><h4 id="模型类的实现"><a href="#模型类的实现" class="headerlink" title="模型类的实现"></a>模型类的实现</h4><ul><li><p>在模型类的实现过程中, 为了代码的解耦和结构清晰, 总共需要完成以下几个函数的实现:</p><ul><li>第一步: 实现批次数据加载的函数batcher.py</li><li>第二步: 实现模型中子层的函数layers.py</li><li>第三步: 实现模型类的函数model.py</li></ul></li><li><h5 id="第一步-实现批次数据加载的函数batcher-py"><a href="#第一步-实现批次数据加载的函数batcher-py" class="headerlink" title="第一步: 实现批次数据加载的函数batcher.py"></a>第一步: 实现批次数据加载的函数batcher.py</h5><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/batcher.py</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入工具包</span><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span> TensorDataset<span class="token comment" spellcheck="true"># 设定项目的rootL路径, 方便后续相关代码文件的导入</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入项目相关的代码文件</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>data_loader <span class="token keyword">import</span> load_train_dataset<span class="token punctuation">,</span> load_test_dataset<span class="token comment" spellcheck="true"># 训练批次数据生成器函数</span><span class="token keyword">def</span> <span class="token function">train_batch_generator</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> max_dec_len<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> sample_num<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># batch_size: batch大小</span>    <span class="token comment" spellcheck="true"># max_enc_len: 样本最大长度</span>    <span class="token comment" spellcheck="true"># max_dec_len: 标签最大长度</span>    <span class="token comment" spellcheck="true"># sample_num: 限定样本个数大小</span>    <span class="token comment" spellcheck="true"># 直接从已经预处理好的数据文件中加载训练集数据</span>    train_X<span class="token punctuation">,</span> train_Y <span class="token operator">=</span> load_train_dataset<span class="token punctuation">(</span>max_enc_len<span class="token punctuation">,</span> max_dec_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对数据进行限定长度的切分</span>    <span class="token keyword">if</span> sample_num<span class="token punctuation">:</span>        train_X <span class="token operator">=</span> train_X<span class="token punctuation">[</span><span class="token punctuation">:</span>sample_num<span class="token punctuation">]</span>        train_Y <span class="token operator">=</span> train_Y<span class="token punctuation">[</span><span class="token punctuation">:</span>sample_num<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 将numpy类型的数据转换为Pytorch下的tensor类型, 因为TensorDataset只接收tensor类型数据</span>    x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_X<span class="token punctuation">)</span>    y_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>train_Y<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第一步: 先对数据进行封装</span>    dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> y_data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步: 再对dataset进行迭代器的构建</span>    <span class="token comment" spellcheck="true"># 如果机器没有GPU, 请采用下面的注释行代码</span>    <span class="token comment" spellcheck="true"># dataset = DataLoader(dataset, batch_size=batch_size, shuffle=True, drop_last=True)</span>    <span class="token comment" spellcheck="true"># 如果机器有GPU, 请采用下面的代码, 可以加速训练流程</span>    dataset <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                         num_workers<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算每个epoch要循环多少次</span>    steps_per_epoch <span class="token operator">=</span> len<span class="token punctuation">(</span>train_X<span class="token punctuation">)</span> <span class="token operator">//</span> batch_size    <span class="token comment" spellcheck="true"># 将封装好的数据集和次数返回</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> steps_per_epoch<span class="token comment" spellcheck="true"># 测试批次数据生成器函数</span><span class="token keyword">def</span> <span class="token function">test_batch_generator</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> max_enc_len<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># batch_size: batch大小</span>    <span class="token comment" spellcheck="true"># max_enc_len: 样本最大长度</span>    <span class="token comment" spellcheck="true"># 直接从已经预处理好的数据文件中加载测试集数据</span>    test_X <span class="token operator">=</span> load_test_dataset<span class="token punctuation">(</span>max_enc_len<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将numpy类型的数据转换为Pytorch下的tensor类型, 因为TensorDataset只接收tensor类型数据</span>    x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第一步: 先对数据进行封装</span>    dataset <span class="token operator">=</span> TensorDataset<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第二步: 再对dataset进行迭代器的构建</span>    dataset <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> batch_size<span class="token operator">=</span>batch_size<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 计算每个epoch要循环多少次</span>    steps_per_epoch <span class="token operator">=</span> len<span class="token punctuation">(</span>test_X<span class="token punctuation">)</span> <span class="token operator">//</span> batch_size    <span class="token comment" spellcheck="true"># 将封装好的数据集和次数返回</span>    <span class="token keyword">return</span> dataset<span class="token punctuation">,</span> steps_per_epoch</code></pre><h5 id="打印-3"><a href="#打印-3" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">F<span class="token punctuation">:</span>\人工智能<span class="token number">7</span>期NLP分享\NLP\NLPAI项目AI第<span class="token number">7</span>期BT同步资料\文本摘要项目\day01\数据集Building prefix dict <span class="token keyword">from</span> the default dictionary <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>Loading model <span class="token keyword">from</span> cache C<span class="token punctuation">:</span>\Users\<span class="token number">86176</span>\AppData\Local\Temp\jieba<span class="token punctuation">.</span>cacheLoading model cost <span class="token number">0.829</span> seconds<span class="token punctuation">.</span>Prefix dict has been built successfully<span class="token punctuation">.</span>stop_words<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'：'</span><span class="token punctuation">,</span> <span class="token string">'———'</span><span class="token punctuation">,</span> <span class="token string">'》），'</span><span class="token punctuation">,</span> <span class="token string">'）÷（１－'</span><span class="token punctuation">,</span> <span class="token string">'”，'</span><span class="token punctuation">,</span> <span class="token string">'）、'</span><span class="token punctuation">,</span> <span class="token string">'＝（'</span><span class="token punctuation">,</span> <span class="token string">'→'</span><span class="token punctuation">,</span> <span class="token string">'℃'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'一一'</span><span class="token punctuation">,</span> <span class="token string">'~~~~'</span><span class="token punctuation">,</span> <span class="token string">'『'</span><span class="token punctuation">,</span> <span class="token string">'.一'</span><span class="token punctuation">,</span> <span class="token string">'./'</span><span class="token punctuation">,</span> <span class="token string">'--'</span><span class="token punctuation">,</span> <span class="token string">'』'</span><span class="token punctuation">,</span> <span class="token string">'＝″'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'！'</span><span class="token punctuation">,</span> <span class="token string">'以前'</span><span class="token punctuation">,</span> <span class="token string">'出现'</span><span class="token punctuation">,</span> <span class="token string">'过该'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'有没有'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'？'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'没测'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'看'</span><span class="token punctuation">,</span> <span class="token string">'一四缸'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'是否'</span><span class="token punctuation">,</span> <span class="token string">'偏低'</span><span class="token punctuation">,</span> <span class="token string">'电脑'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'14'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'缺火'</span><span class="token punctuation">,</span> <span class="token string">'点火'</span><span class="token punctuation">,</span> <span class="token string">'线圈'</span><span class="token punctuation">,</span> <span class="token string">'火花塞'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'干活'</span><span class="token punctuation">,</span> <span class="token string">'直接'</span><span class="token punctuation">,</span> <span class="token string">'二三'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'倒'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'跑'</span><span class="token punctuation">,</span> <span class="token string">'一段'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'故障'</span><span class="token punctuation">,</span> <span class="token string">'码'</span><span class="token punctuation">,</span> <span class="token string">'进行'</span><span class="token punctuation">,</span> <span class="token string">'排除'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'还'</span><span class="token punctuation">,</span> <span class="token string">'调'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'喷油嘴'</span><span class="token punctuation">,</span> <span class="token string">'测'</span><span class="token punctuation">,</span> <span class="token string">'一下'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'都'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'发动机'</span><span class="token punctuation">,</span> <span class="token string">'电脑板'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'影响'</span><span class="token punctuation">,</span> <span class="token string">'不大'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'八个'</span><span class="token punctuation">,</span> <span class="token string">'以上'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'说'</span><span class="token punctuation">,</span> <span class="token string">'测量'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'缸'</span><span class="token punctuation">,</span> <span class="token string">'压'</span><span class="token punctuation">,</span> <span class="token string">'正常'</span><span class="token punctuation">,</span> <span class="token string">'没有'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'点击'</span><span class="token punctuation">,</span> <span class="token string">'头像'</span><span class="token punctuation">,</span> <span class="token string">'关注'</span><span class="token punctuation">,</span> <span class="token string">'问题'</span><span class="token punctuation">,</span> <span class="token string">'随时'</span><span class="token punctuation">,</span> <span class="token string">'询问'</span><span class="token punctuation">,</span> <span class="token string">'一定'</span><span class="token punctuation">,</span> <span class="token string">'真诚'</span><span class="token punctuation">,</span> <span class="token string">'用心'</span><span class="token punctuation">,</span> <span class="token string">'解决'</span><span class="token punctuation">,</span> <span class="token string">'师傅'</span><span class="token punctuation">,</span> <span class="token string">'，'</span><span class="token punctuation">,</span> <span class="token string">'谢谢'</span><span class="token punctuation">,</span> <span class="token string">'不用'</span><span class="token punctuation">,</span> <span class="token string">'客气'</span><span class="token punctuation">]</span>res<span class="token operator">=</span> ！ 以前 出现 过该 故障 ？ 缸 压 有没有 测量 一下 ？ 没有 没测 缸 压 测量 一下 缸 压 看 一四缸 缸 压 是否 偏低 电脑 测 ， <span class="token number">14</span> 缸 缺火 点火 线圈 火花塞 喷油嘴 不用 干活 直接 二三 缸 倒 一下 跑 一段 测量 一下 故障 码 进行 排除 师傅 还 调 一下 喷油嘴 测 一下 缸 压 都 正常 发动机 电脑板 问题 影响 不大 缸 压 八个 以上 正常 说 测量 缸 压 缸 压 正常 没有 问题 点击 头像 关注 问题 随时 询问 一定 真诚 用心 解决 师傅 ， 谢谢 不用 客气<span class="token operator">&lt;</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataloader<span class="token punctuation">.</span>DataLoader object at <span class="token number">0x00000167C3F8DFC8</span><span class="token operator">></span><span class="token number">1294</span><span class="token operator">&lt;</span>torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data<span class="token punctuation">.</span>dataloader<span class="token punctuation">.</span>DataLoader object at <span class="token number">0x00000167C231BFC8</span><span class="token operator">></span><span class="token number">312</span></code></pre><ul><li><h5 id="第二步-实现模型中子层的函数layers-py"><a href="#第二步-实现模型中子层的函数layers-py" class="headerlink" title="第二步: 实现模型中子层的函数layers.py"></a>第二步: 实现模型中子层的函数layers.py</h5><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/layers.py</li></ul></li><li><p>为了完成模型中子层的构建, 我们需要分3个小步骤:</p></li><li><p>1: 实现编码器类Encoder.</p></li><li><p>2: 实现注意力类Attention.</p></li><li><p>3: 实现解码器类Decoder.</p></li><li><p>1: 实现编码器类Encoder.</p></li></ul><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入工具包</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># 设定项目的root路径, 方便后续的代码文件导入</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入项目相关的代码文件</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> get_vocab_from_model<span class="token comment" spellcheck="true"># 构建编码器类</span><span class="token keyword">class</span> <span class="token class-name">Encoder</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">,</span> enc_units<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Encoder<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>vocab_size <span class="token operator">=</span> vocab_size        self<span class="token punctuation">.</span>embedding_dim <span class="token operator">=</span> embedding_dim        self<span class="token punctuation">.</span>enc_units <span class="token operator">=</span> enc_units        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size        <span class="token comment" spellcheck="true"># 第一层: 词嵌入层</span>        self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>vocab_size<span class="token punctuation">,</span> embedding_dim<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第二层: GRU层</span>        self<span class="token punctuation">.</span>gru <span class="token operator">=</span> nn<span class="token punctuation">.</span>GRU<span class="token punctuation">(</span>input_size<span class="token operator">=</span>embedding_dim<span class="token punctuation">,</span> hidden_size<span class="token operator">=</span>enc_units<span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> batch_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> h0<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># x.shape: (batch_size, sequence_length)</span>        <span class="token comment" spellcheck="true"># h0.shape: (num_layers, batch_size, enc_units)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        output<span class="token punctuation">,</span> hn <span class="token operator">=</span> self<span class="token punctuation">.</span>gru<span class="token punctuation">(</span>x<span class="token punctuation">,</span> h0<span class="token punctuation">)</span>        <span class="token keyword">return</span> output<span class="token punctuation">,</span> hn<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">initialize_hidden_state</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># hidden state张量形状: (num_layers, batch_size, enc_units)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>batch_size<span class="token punctuation">,</span> self<span class="token punctuation">.</span>enc_units<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Attention</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> enc_units<span class="token punctuation">,</span> dec_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Attention<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>enc_units <span class="token operator">=</span> enc_units        self<span class="token punctuation">.</span>dec_units <span class="token operator">=</span> dec_units        self<span class="token punctuation">.</span>attn_units <span class="token operator">=</span> attn_units        <span class="token comment" spellcheck="true"># 计算注意力的三次矩阵乘法, 对应着3个全连接层.</span>        self<span class="token punctuation">.</span>w1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>enc_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>w2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>dec_units<span class="token punctuation">,</span> attn_units<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>v <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>attn_units<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> query<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># query为上次的decoder隐藏层，shape: (batch_size, dec_units)</span>        <span class="token comment" spellcheck="true"># values为编码器的编码结果enc_output，shape: (batch_size, enc_seq_len, enc_units)</span>        <span class="token comment" spellcheck="true"># 在应用self.V之前，张量的形状是(batch_size, enc_seq_len, attention_units)</span>        <span class="token comment" spellcheck="true"># 得到score的shape: (batch_size, seq_len, 1)</span>        score <span class="token operator">=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>tanh<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w1<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>w2<span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 注意力权重，是score经过softmax，但是要作用在第一个轴上(seq_len的轴)</span>        attention_weights <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>score<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># (batch_size, enc_seq_len, 1) * (batch_size, enc_seq_len, enc_units)</span>        <span class="token comment" spellcheck="true"># 广播, encoder unit的每个位置都对应相乘</span>        context_vector <span class="token operator">=</span> attention_weights <span class="token operator">*</span> value        <span class="token comment" spellcheck="true"># 在最大长度enc_seq_len这一维度上求和</span>        context_vector <span class="token operator">=</span> torch<span class="token punctuation">.</span>sum<span class="token punctuation">(</span>context_vector<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># context_vector求和之后的shape: (batch_size, enc_units)</span>        <span class="token keyword">return</span> context_vector<span class="token punctuation">,</span> attention_weights</code></pre><h5 id="打印-4"><a href="#打印-4" class="headerlink" title="打印"></a>打印</h5><pre class=" language-python"><code class="language-python">torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32217</span><span class="token punctuation">]</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li><h5 id="第三步-实现模型类的函数model-py"><a href="#第三步-实现模型类的函数model-py" class="headerlink" title="第三步: 实现模型类的函数model.py"></a>第三步: 实现模型类的函数model.py</h5><ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/model.py</li></ul></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment" spellcheck="true"># 设定项目的root路径, 方便后续代码文件的导入</span>root_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root_path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 导入工具包和项目相关的代码文件</span><span class="token keyword">import</span> torch<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> src<span class="token punctuation">.</span>layers <span class="token keyword">import</span> Encoder<span class="token punctuation">,</span> Attention<span class="token punctuation">,</span> Decoder<span class="token keyword">from</span> utils<span class="token punctuation">.</span>config <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> utils<span class="token punctuation">.</span>word2vec_utils <span class="token keyword">import</span> get_vocab_from_model<span class="token comment" spellcheck="true"># 构建完整的seq2seq模型</span><span class="token keyword">class</span> <span class="token class-name">Seq2Seq</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>Seq2Seq<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> params        <span class="token comment" spellcheck="true"># 第一层: 编码器层</span>        self<span class="token punctuation">.</span>encoder <span class="token operator">=</span> Encoder<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'vocab_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'embed_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               params<span class="token punctuation">[</span><span class="token string">'enc_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第二层: 注意力机制层</span>        self<span class="token punctuation">.</span>attention <span class="token operator">=</span> Attention<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'enc_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'dec_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'attn_units'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 第三层: 解码器层</span>        self<span class="token punctuation">.</span>decoder <span class="token operator">=</span> Decoder<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token string">'vocab_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'embed_size'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                               params<span class="token punctuation">[</span><span class="token string">'dec_units'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token punctuation">[</span><span class="token string">'batch_size'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 实质上是在调用解码器,因为需要注意力机制,直接封装到forward中. 要调用编码器直接encoder()即可</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dec_input<span class="token punctuation">,</span> dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">,</span> dec_target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这里的dec_input实质是(batch_size, 1)大小的&lt;START></span>        predictions <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 拿编码器的输出和最终隐含层向量来计算</span>        context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 循环解码</span>        <span class="token keyword">for</span> t <span class="token keyword">in</span> range<span class="token punctuation">(</span>dec_target<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># dec_input (batch_size, 1); dec_hidden (batch_size, hidden_units)</span>            pred<span class="token punctuation">,</span> dec_hidden <span class="token operator">=</span> self<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_input<span class="token punctuation">,</span> context_vector<span class="token punctuation">)</span>            context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>dec_hidden<span class="token punctuation">,</span> enc_output<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 使用teacher forcing, 并扩展维度到三维张量</span>            dec_input <span class="token operator">=</span> dec_target<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            predictions<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pred<span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>predictions<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dec_hidden<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># word_to_id, id_to_word = get_vocab_from_model(vocab_path, reverse_vocab_path)</span>    word_to_id <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"F:/人工智能7期NLP分享/NLP/NLPAI项目AI第7期BT同步资料/文本摘要项目/day01/数据集/data/wv/vocab.txt"</span><span class="token punctuation">)</span>    vocab_size <span class="token operator">=</span> len<span class="token punctuation">(</span>word_to_id<span class="token punctuation">)</span>    batch_size <span class="token operator">=</span> <span class="token number">64</span>    input_seq_len <span class="token operator">=</span> <span class="token number">300</span>    <span class="token comment" spellcheck="true"># 模拟测试参数</span>    params <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"vocab_size": vocab_size, "embed_size": 500, "enc_units": 512,</span>              <span class="token string">"attn_units"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">"dec_units"</span><span class="token punctuation">:</span> <span class="token number">512</span><span class="token punctuation">,</span><span class="token string">"batch_size"</span><span class="token punctuation">:</span> batch_size<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    <span class="token comment" spellcheck="true"># 实例化类对象</span>    model <span class="token operator">=</span> Seq2Seq<span class="token punctuation">(</span>params<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始化测试输入数据</span>    sample_input_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> input_seq_len<span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span>    sample_hidden <span class="token operator">=</span> model<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>initialize_hidden_state<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用Encoder进行编码</span>    sample_output<span class="token punctuation">,</span> sample_hidden <span class="token operator">=</span> model<span class="token punctuation">.</span>encoder<span class="token punctuation">(</span>sample_input_batch<span class="token punctuation">,</span> sample_hidden<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印输出张量维度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encoder output shape: (batch_size, enc_seq_len, enc_units) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Encoder Hidden state shape: (batch_size, enc_units) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_hidden<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用Attention进行注意力张量</span>    context_vector<span class="token punctuation">,</span> attention_weights <span class="token operator">=</span> model<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>sample_hidden<span class="token punctuation">,</span> sample_output<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Attention context_vector shape: (batch_size, enc_units) &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>context_vector<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Attention weights shape: (batch_size, sequence_length, 1) &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>attention_weights<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 调用Decoder进行解码</span>    dec_input <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>long<span class="token punctuation">)</span>    sample_decoder_output<span class="token punctuation">,</span> _<span class="token punctuation">,</span> <span class="token operator">=</span> model<span class="token punctuation">.</span>decoder<span class="token punctuation">(</span>dec_input<span class="token punctuation">,</span> context_vector<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Decoder output shape: (batch_size, vocab_size) &amp;#123;&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sample_decoder_output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 这里仅测试一步，没有用到dec_seq_len</span></code></pre><h6 id="打印-5"><a href="#打印-5" class="headerlink" title="打印"></a>打印</h6><pre class=" language-python"><code class="language-python">Encoder output shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_seq_len<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Encoder Hidden state shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Attention context_vector shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> enc_units<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Attention weights shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> sequence_length<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Decoder output shape<span class="token punctuation">:</span> <span class="token punctuation">(</span>batch_size<span class="token punctuation">,</span> vocab_size<span class="token punctuation">)</span> torch<span class="token punctuation">.</span>Size<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">32216</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Process finished <span class="token keyword">with</span> exit code <span class="token number">0</span></code></pre><h4 id="训练和测试函数的实现"><a href="#训练和测试函数的实现" class="headerlink" title="训练和测试函数的实现"></a>训练和测试函数的实现</h4><ul><li>构建完成模型类后, 我们要分别实现训练函数和测试函数:<ul><li>第一步: 编写训练辅助函数train_helper.py</li><li>第二步: 编写训练主函数train.py</li><li>第三步: 编写测试辅助函数test_helper.py</li><li>第四步: 编写测试主函数test.py</li></ul></li></ul><hr><ul><li>第一步: 编写训练辅助函数train_helper.py<ul><li>代码文件路径: /home/ec2-user/text_summary/seq2seq/src/train_helper.py </li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1：文本摘要项目理论&quot;&gt;&lt;a href=&quot;#1：文本摘要项目理论&quot; class=&quot;headerlink&quot; title=&quot;1：文本摘要项目理论&quot;&gt;&lt;/a&gt;&lt;strong&gt;1：文本摘要项目理论&lt;/strong&gt;&lt;/h2&gt;&lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="NLP" scheme="https://xiaoyvlongoing.github.io/categories/NLP/"/>
    
    
    <category term="文本摘要" scheme="https://xiaoyvlongoing.github.io/tags/%E6%96%87%E6%9C%AC%E6%91%98%E8%A6%81/"/>
    
  </entry>
  
</feed>
